{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/samvincent/Desktop/MusicStreamingCalculator/src/CalcPage.js\";\nimport React from 'react';\nimport './App.css';\nimport SmallText from './components/SmallText.js';\nimport TextButton from './components/TextButton.js';\nimport TabGroup from './components/ButtonGroup.js';\nimport SingleDropDown from './components/SingleDropDown.js';\nimport NumberInput from './components/NumberInput.js';\nimport DspButton from './components/DspButton.js';\nconst labelDealOptions = [{\n  value: 'royalty',\n  label: 'Royalty'\n}, {\n  value: 'netProfit',\n  label: 'Net Profit'\n}, {\n  value: 'distributionPercent',\n  label: 'Distribution (%)'\n}, {\n  value: 'distributionFee',\n  label: 'Distribution (fee)'\n}, {\n  value: 'labelServices',\n  label: 'Label Services'\n}];\nconst pubDealOptions = [{\n  value: 'Full/Traditional',\n  label: 'Full/Traditional'\n}, {\n  value: 'Co-Publishing',\n  label: 'Co-publising'\n}, {\n  value: 'Admin',\n  label: 'Admin'\n}, {\n  value: 'No Deal',\n  label: 'No Deal'\n}];\nconst marketingSplitOptions = [{\n  value: 0.0,\n  label: '0%'\n}, {\n  value: 0.5,\n  label: '50%'\n}, {\n  value: 1.0,\n  label: '100%'\n}];\nconst labelServicesOptions = [{\n  value: 'steamDistribution',\n  label: 'Steam Distribution'\n}, {\n  value: 'avertising',\n  label: 'Avertising'\n}, {\n  value: 'analytics',\n  label: 'Analytics'\n}, {\n  value: 'royaltyAccounting',\n  label: 'Royalty Accounting'\n}, {\n  value: 'splitPayments',\n  label: 'Split Payments'\n}];\nconst roleTypes = [\"Recording Artist Only\", \"Writer Only\", \"Both\"];\nconst ce = React.createElement; //average / approx payout for publishing for stream\n\nconst avgPubPayout = 0.0007174565191; //handling dsps\n\nlet spotify = {\n  id: 0,\n  ref: /*#__PURE__*/React.createRef(),\n  name: \"Spotify\",\n  payoutPerStream: 0.00331,\n  marketShareStreams: .2922,\n  marketShareDollars: .4893,\n  includeInCalculations: true\n};\nlet apple = {\n  id: 1,\n  ref: /*#__PURE__*/React.createRef(),\n  name: \"Apple Music\",\n  payoutPerStream: 0.00495,\n  marketShareStreams: .0995,\n  marketShareDollars: .2497,\n  includeInCalculations: true\n};\nlet youtube = {\n  id: 2,\n  ref: /*#__PURE__*/React.createRef(),\n  name: \"Youtube Content ld\",\n  payoutPerStream: 0.00028,\n  marketShareStreams: .4858,\n  marketShareDollars: .0699,\n  includeInCalculations: true\n};\nlet amazon = {\n  id: 3,\n  ref: /*#__PURE__*/React.createRef(),\n  name: \"Amazon Unlimited\",\n  payoutPerStream: 0.01175,\n  marketShareStreams: .0068,\n  marketShareDollars: .0404,\n  includeInCalculations: true\n};\nlet google = {\n  id: 4,\n  ref: /*#__PURE__*/React.createRef(),\n  name: \"Google Play\",\n  payoutPerStream: 0.00543,\n  marketShareStreams: .0112,\n  marketShareDollars: .0308,\n  includeInCalculations: true\n};\nlet pandora = {\n  id: 5,\n  ref: /*#__PURE__*/React.createRef(),\n  name: \"Pandora\",\n  payoutPerStream: 0.00155,\n  marketShareStreams: .0386,\n  marketShareDollars: .0303,\n  includeInCalculations: true\n};\nlet deezer = {\n  id: 6,\n  name: \"Deezer\",\n  ref: /*#__PURE__*/React.createRef(),\n  payoutPerStream: 0.00567,\n  marketShareStreams: .0091,\n  marketShareDollars: .026,\n  includeInCalculations: true\n};\nlet amazonDig = {\n  id: 7,\n  ref: /*#__PURE__*/React.createRef(),\n  name: \"Amazon Digital Services\",\n  payoutPerStream: 0.00395,\n  marketShareStreams: .0095,\n  marketShareDollars: .019,\n  includeInCalculations: true\n};\nlet tidal = {\n  id: 8,\n  ref: /*#__PURE__*/React.createRef(),\n  name: \"TIDAL\",\n  payoutPerStream: 0.00927,\n  marketShareStreams: 0.0021,\n  marketShareDollars: 0.0098,\n  includeInCalculations: true\n};\nlet others = {\n  id: 9,\n  ref: /*#__PURE__*/React.createRef(),\n  name: \"Napster / Rhapsody\",\n  payoutPerStream: 0.0111,\n  marketShareStreams: 0.0014,\n  marketShareDollars: 0.0080,\n  includeInCalculations: true\n}; //console.log(act)\n\nclass CalcPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dealTypeRef = /*#__PURE__*/React.createRef();\n    this.tabGroupRef = /*#__PURE__*/React.createRef();\n    this.pubTypeRef = /*#__PURE__*/React.createRef();\n    this.advanceRef = /*#__PURE__*/React.createRef();\n    this.costsRef = /*#__PURE__*/React.createRef();\n    this.artistButtonRef = /*#__PURE__*/React.createRef();\n    this.writerButtonRef = /*#__PURE__*/React.createRef();\n    this.bothButtonRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      providers: [spotify, apple, youtube, amazon, google, pandora, deezer, amazonDig, tidal, others],\n      streamNumber: null,\n      role: null,\n      recordDeal: [],\n      publishDeal: [],\n      sliderValue: 50,\n      recordDealSelected: null,\n      publishingDealSelected: null,\n      advance: 0,\n      costs: 0,\n      grossRev: 0,\n      totRecoupe: 0,\n      publisherShare: 0,\n      writerEarnings: 0,\n      totalEarnings: 0\n    };\n  }\n\n  componentDidMount() {\n    //console.log(\"mounted\");\n    this.buildRecordDealSelect();\n    this.handleRoleButton(\"Writer & Artist\");\n    this.buildPublishingDealSelect();\n    this.setSliderValue(50);\n    this.testMap(); //this.buildDspsArr();\n\n    this.setInitialRoleState();\n    this.setInitialStates();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Welcome to the revenue calculator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Est Streams\",\n        onChange: e => this.changeStreams(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n        text: \"Role: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(DspButton, {\n        ref: this.artistButtonRef,\n        text: \"Artist\",\n        onChange: e => this.getRoleButton(\"artist\")\n      }, \"artButton\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(DspButton, {\n        ref: this.writerButtonRef,\n        text: \"Writer\",\n        onChange: e => this.getRoleButton(\"writer\")\n      }, \"writeButton\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(DspButton, {\n        ref: this.bothButtonRef,\n        text: \"Both\",\n        onChange: e => this.getRoleButton(\"both\")\n      }, \"bothButton\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", this.state.role, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n        text: \"Record Deal Type: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SingleDropDown, {\n        ref: this.dealTypeRef,\n        options: labelDealOptions,\n        onChange: e => this.getStateRecDeal(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n        text: \"Publishing Deal Type: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SingleDropDown, {\n        ref: this.pubTypeRef,\n        options: pubDealOptions,\n        onChange: e => this.getStatePubDeal(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n        text: \"Deal Split: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n        text: \"Guaranteed Income: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(NumberInput, {\n        ref: this.advanceRef,\n        id: \"numInput\",\n        label: \"From Advance\",\n        locked: false,\n        active: false,\n        onChange: e => this.getStateAdvance(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n        text: \"Costs: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(NumberInput, {\n        ref: this.costsRef,\n        id: \"costInput\",\n        label: \"Costs\",\n        locked: false,\n        active: false,\n        onChange: e => this.getStateCosts(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n        text: \"Recoupable: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n        text: \"DSPs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.providers.map(provider => /*#__PURE__*/_jsxDEV(DspButton, {\n          ref: provider.ref,\n          text: provider.name,\n          onChange: e => this.getButtonClick(provider.id)\n        }, provider.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 20\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 12\n    }, this);\n    /*<!--\n    return ce('div', {ref: 'this.myRef'},\n      ce('h2', {className: \"font\"}, 'Welcome to the Revenue Calculator'),\n          ce('input', {id: \"estStreams\", type: \"text\", placeholder: \"Enter Est. Streams\", onChange: e => this.changeStreams(e)}),\n          ce('br'),\n          ce('text', null, 'Role: '),\n          /*ce('select', {onChange: e => this.handleRoleSelect(e)},\n              this.state.roles.map(role => ce('option', {key: role.id}, role.name))\n              ),*/\n\n    /*\n    ce('button', {onClick: e => this.handleRoleButton(\"artist\")}, 'Artist Only'),\n    ce('button', {onClick: e => this.handleRoleButton(\"writer\")}, 'Writer Only'),\n    ce('button', {onClick: e => this.handleRoleButton(\"both\")}, 'Writer & Artist'),\n    ce('br'),\n    ce('text', null, 'Record Deal Type: '),\n    ce('select', {onChange: e => this.handleRecDealSelect(e)},\n    this.state.recordDeal.map(deal => ce('option', {key: deal.id}, deal.name))\n    ),\n    ce('br'),\n    ce('text', null, 'Publishing Deal Type: '),\n    ce('select', {onChange: e => this.handlePublishingDealSelect(e)},\n    this.state.publishDeal.map(deal => ce('option', {key: deal.id}, deal.name))\n    ),\n    ce('br'),\n    ce('text', null, 'Deal Split: '),\n    ce('input', {type: 'range', ref: 'sliderRef', min: '1', max: '100', id: 'splitSlider', onChange: e => this.updateSlider(e)}),\n    ce('text', null, 'Guaranteed Income: '),\n    ce('input', {id: \"fromAdvance\", placeholder: \"From Advance\", onChange: e => this.updateAdvance(e)}),\n    ce('br'),\n    ce('text', null, 'Costs: '),\n    ce('input', {placeholder: 'Costs', onChange: e => this.updateCosts(e)}),\n    ce('br'),\n    ce('text', null, 'Recoupable: '),\n    ce('input', {type: 'checkbox', checked: 'true'}),\n    ce('br'),\n    ce('text', null, 'DSPs'),\n    ce('br'),\n    ce('table', {id: 'dspTable'}, \n    ce('thead', null, ce('tr', null, ce('th', null, \"Platform\"), ce('th', null, \"Include\"))),\n    ce('tbody', null, this.state.providers.map(provider => ce('tr', null, ce('td', null, ce('input', {placeholder: provider.name})), ce('td', null, ce('input', {type: 'checkbox', checked: provider.includeInCalculations, onChange: e => this.toggleMe(provider.id)})))))\n    ),\n    ce('br'),\n    //ce('button', {onClick: e => this.calculate()}, 'Calculate'),\n    //ce('br'),\n    ce('text', null, 'Total Revenue: '),\n    ce('br'),\n    ce('text', null, 'Gross Revenue: '),\n    ce('input', {value: this.state.grossRev}),\n    ce('br'),\n    ce('text', null, 'Total Money Needed to Recoupe: '),\n    ce('input', {value: 0}),\n    ce('br'),\n    ce('text', null, 'Unrecouped: '),\n    ce('br'),\n    ce('text', null, 'Label Earnings: '),\n    ce('input', {value: this.state.publisherShare}),\n    ce('text', null, 'Writer Earnings: '),\n    ce('input', {value: this.state.writerEarnings}),\n    ce('br'),\n    ce('text', null, 'TOTAL EARNINGS: '),\n    ce('input', {value: this.state.totalEarnings}),\n    ce('br')\n     )-->*/\n  }\n\n  setInitialRoleState() {\n    /*this.artistButtonRef.current.setState({button: false});\n    this.writerButtonRef.current.setState({button: false});\n    this.bothButtonRef.current.setState({button: true});\n    */\n  }\n\n  getRoleButton(name) {\n    console.log(name);\n    console.log(this.artistButtonRef.current.state.button);\n    console.log(this.writerButtonRef.current.state.button);\n    console.log(this.bothButtonRef.current.state.button);\n\n    if (name === \"artist\" && !this.artistButtonRef.current.state.button) {\n      this.handleRoleButton(\"artist\");\n      this.writerButtonRef.current.setState({\n        button: false\n      });\n      this.bothButtonRef.current.setState({\n        button: false\n      }); //this.state.\n    } else if (name === \"writer\" && !this.writerButtonRef.current.state.button) {\n      this.handleRoleButton(\"writer\");\n      this.artistButtonRef.current.setState({\n        button: false\n      });\n      this.bothButtonRef.current.setState({\n        button: false\n      });\n    } else if (name === \"both\" && !this.bothButtonRef.current.state.button) {\n      this.handleRoleButton(\"both\");\n      this.writerButtonRef.current.setState({\n        button: false\n      });\n      this.artistButtonRef.current.setState({\n        button: false\n      });\n    }\n  }\n\n  getButtonClick(id) {\n    //console.log(\"clicked: \" + id);\n    //console.log(this.state.providers[id].ref.current.state);\n    if (this.state.providers[id].ref.current.state.button != null && this.state.providers[id].ref.current.state.button != this.state.providers[id].includeInCalculations) {\n      this.toggleMe(id);\n    }\n  }\n\n  getStateCosts() {\n    console.log(this.costsRef.current.state);\n\n    if (this.costsRef.current.state.value != \"\" && parseInt(this.costsRef.current.state.value) != this.state.costs) {\n      const e = parseInt(this.costsRef.current.state.value);\n      this.updateCosts(e);\n    }\n  }\n\n  getStateAdvance() {\n    console.log(this.advanceRef.current.state);\n\n    if (this.advanceRef.current.state.value != \"\" && parseInt(this.advanceRef.current.state.value) != this.state.advance) {\n      const e = parseInt(this.advanceRef.current.state.value);\n      this.updateAdvance(e);\n    }\n  }\n\n  getStatePubDeal() {\n    //console.log(\"getting state rec deal\");\n    if (this.pubTypeRef.current.state.selectedOption != null && this.pubTypeRef.current.state.selectedOption.value != this.state.publishingDealSelected) {\n      //console.log(this.dealTypeRef.current.state.selectedOption.value);\n      const e = this.pubTypeRef.current.state.selectedOption.value;\n      this.handlePublishingDealSelect(e);\n    } //const node = this.dealTypeRef.current;\n    //console.log(\"Node: \" + node);\n\n  }\n\n  getStateRecDeal() {\n    //console.log(\"getting state rec deal\");\n    if (this.dealTypeRef.current.state.selectedOption != null && this.dealTypeRef.current.state.selectedOption.value != this.state.recordDealSelected) {\n      //console.log(this.dealTypeRef.current.state.selectedOption.value);\n      const e = this.dealTypeRef.current.state.selectedOption.value;\n      this.handleRecDealSelect(e);\n    } //const node = this.dealTypeRef.current;\n    //console.log(\"Node: \" + node);\n\n  }\n\n  testMap() {\n    this.state.providers.map(provider => console.log(provider.name)); //this.state.providers.map(provider => ce('tr', null, ce('td', null, ce('text', null, provider.name))), ce('tr', null, ce('td', null, ce('input', {type: 'checkbox', checked: provider.includeInCalculations, onClick: e => this.toggleMe(provider.id)}))))\n  }\n\n  setInitialStates() {\n    this.setState({\n      streamNumber: 1000000000,\n      role: \"Writer & Artist\",\n      recordDealSelected: \"Royalty\",\n      publishingDealSelected: \"Full/Traditional\",\n      advance: 0,\n      costs: 0,\n      grossRev: 0,\n      publisherShare: 0,\n      writerEarnings: 0,\n      totalEarnings: 0\n    });\n    console.log(this.state.providers);\n    this.calculate();\n  }\n\n  changeStreams(e) {\n    console.log(\"changed streams to: \" + e.target.value);\n    this.setState({\n      streamNumber: e.target.value\n    });\n    this.calculate();\n  }\n\n  updateAdvance(e) {\n    console.log(\"changed advance to: \" + e);\n    this.setState({\n      advance: e\n    });\n    this.calculate();\n  }\n\n  updateCosts(e) {\n    console.log(\"changed costs to: \" + e);\n    this.setState({\n      costs: e\n    });\n    this.calculate();\n  }\n\n  setSliderValue(val) {\n    this.setState({\n      sliderValue: val\n    });\n    this.calculate();\n  }\n\n  updateSlider(e) {\n    console.log(e.target.value); //val = document.getElementById(\"splitSlider\").value()\n\n    this.setState({\n      sliderValue: e.target.value\n    });\n    this.calculate();\n  }\n\n  buildPublishingDealSelect() {\n    let fullTrad = {\n      id: 0,\n      name: \"Full/Traditional\"\n    };\n    let coPublishing = {\n      id: 1,\n      name: \"Co-Publishing\"\n    };\n    let adminDeal = {\n      id: 2,\n      name: \"Admin Deal\"\n    };\n    let noDeal = {\n      id: 3,\n      name: \"No Deal\"\n    };\n    let deals = [fullTrad, coPublishing, adminDeal, noDeal];\n    this.setState({\n      publishDeal: deals\n    });\n  }\n\n  handlePublishingDealSelect(e) {\n    console.log(e);\n    this.setState({\n      publishingDealSelected: e\n    });\n    this.calculate();\n  }\n\n  handleRoleButton(which) {\n    console.log(which);\n    this.setState({\n      role: which\n    });\n    this.calculate();\n  } // handleRecDealSelect(e)\n\n\n  handleRecDealSelect(e) {\n    console.log(\"selecting Roles\");\n    console.log(e);\n\n    if (e === \"royalty\") {\n      this.setState({\n        sliderValue: 20\n      });\n    } else if (e === \"netProfit\") {\n      this.setState({\n        sliderValue: 50\n      });\n    } else if (e === \"distributionPercent\") {\n      this.setState({\n        sliderValue: 70\n      });\n    } else if (e === \"labelServices\") {\n      this.setState({\n        sliderValue: 80\n      });\n    } //document.getElementById(\"splitSlider\").value = this.state.sliderValue;\n    //console.log(this.myRef.current);\n    //React.findDOMNode(this.refs.sliderRef).value = this.state.sliderValue;\n\n\n    console.log(\"sliderValue: \" + this.state.sliderValue);\n    this.setState({\n      recordDealSelected: e\n    });\n    this.calculate();\n  }\n\n  buildRecordDealSelect() {\n    //console.log(\"Roles!\");\n    let royalty = {\n      id: 0,\n      name: \"Royalty\"\n    };\n    let netProfit = {\n      id: 1,\n      name: \"Net Profit\"\n    };\n    let distributionPercent = {\n      id: 2,\n      name: \"Distribution Percent\"\n    };\n    let labelServices = {\n      id: 3,\n      name: \"Label Services\"\n    };\n    let rls = [royalty, netProfit, distributionPercent, labelServices];\n    this.setState({\n      recordDeal: rls\n    });\n  }\n\n  toggleMe(index) {\n    this.state.providers[index].includeInCalculations = !this.state.providers[index].includeInCalculations; //console.log(dsps[index].name);\n    //console.log(dsps[index].includeInCalculations);\n\n    this.calculate();\n  } /// MATH STUFF /////\n\n\n  calculate() {\n    this.getPublisherShare();\n    console.log(\"calculating\");\n    let artistShare;\n    let labelShare; // Why are there double semi-colons?\n    //prob a typo\n\n    let totalMoneyToRecoupe = parseFloat(this.state.advance) + parseFloat(this.state.costs); //console.log(totalMoneyToRecoupe)\n\n    let grossRevenue = this.state.streamNumber * this.weightedAverageOfSelected(); //console.log(\"grossRevenue: \" + grossRevenue)\n    //checkDSPs();\n    //console.log(estStreams.value * avgPayout);\n    //console.log(estStreams.value * weightedAverageOfSelected());\n\n    if (this.state.recordDealSelected === \"royalty\") {\n      // Artist Split\n      if (grossRevenue * (parseFloat(this.state.sliderValue) / 100) <= totalMoneyToRecoupe) {\n        console.log(\"unrecouped\");\n        artistShare = 0;\n      } else {\n        artistShare = grossRevenue * (parseFloat(this.state.sliderValue) / 100) - totalMoneyToRecoupe;\n      }\n\n      labelShare = grossRevenue * (1 - parseFloat(this.state.sliderValue) / 100);\n    } else if (this.state.recordDealSelected === \"netProfit\" || this.state.recordDealSelected === \"distributionPercent\" || this.state.recordDealSelected === \"Distribution Fee\") {\n      //net profit deals are generally guaranteed 50/50, distribution are generally 70/30 artist/label\n      let profit = grossRevenue - this.state.costs; // Artist Split\n\n      if (profit * (parseFloat(this.state.sliderValue) / 100) - parseFloat(this.state.advance) < 0) {\n        console.log(\"unrecouped\");\n        artistShare = 0;\n      } else {\n        artistShare = profit * (parseFloat(this.state.sliderValue) / 100) - parseFloat(this.state.advance);\n      } // Label Split Net Profit, Distributions\n\n\n      if (this.state.recordDealSelected === \"netProfit\" || this.state.recordDealSelected === \"distributionPercent\") {\n        if (profit < 0) {\n          labelShare = 0;\n        } else {\n          labelShare = profit * (1 - parseFloat(this.state.sliderValue) / 100);\n        }\n      } else labelShare = grossRevenue - artistShare;\n      /* Nik Label Share for Net Profit, %Distribution Deals\n      if(profit < 0){\n        labelShare = 0;\n      } else {\n        labelShare = (profit * (1-(parseFloat(artistDeal.value)/100)));\n      }\n      */\n\n    } else if (this.state.recordDealSelected === \"labelServices\") {\n      // Artist Split\n      if (grossRevenue * (parseFloat(this.state.sliderValue) / 100) <= totalMoneyToRecoupe) {\n        console.log(\"unrecouped\");\n        artistShare = 0;\n      } else {\n        artistShare = grossRevenue * (parseFloat(this.state.sliderValue) / 100) - totalMoneyToRecoupe;\n      }\n\n      labelShare = grossRevenue * (1 - parseFloat(this.state.sliderValue) / 100) + this.state.costs; //extra menu items would be factored into costs\n    }\n\n    console.log(\"grossRevenue: \" + grossRevenue);\n    console.log(\"totRecoupe: \" + totalMoneyToRecoupe);\n    console.log(\"writerEarnings: \" + artistShare);\n    console.log(\"publisherShare: \" + labelShare);\n    this.setState({\n      grossRev: grossRevenue,\n      totRecoupe: totalMoneyToRecoupe,\n      writerEarnings: artistShare,\n      publisherShare: labelShare\n    });\n    this.getTotalEarnings(artistShare);\n  }\n\n  getPublisherShare() {\n    //console.log(\"avgPubPayout: \" + avgPubPayout)\n    let pubGrossRevenue = avgPubPayout * this.state.streamNumber;\n    let pubPerformanceRevenue = pubGrossRevenue * .5;\n    let pubMechanicalRevenue = pubGrossRevenue * .5;\n    let pubPROAdminFee = pubPerformanceRevenue * .165;\n    let pubMechanicalAdminFee = pubMechanicalRevenue * .15;\n    let pubMechanicalRecordFee = (pubMechanicalRevenue - pubMechanicalAdminFee) * .3;\n    let publisherPercentage;\n\n    if (this.state.publishingDealSelected === \"Full/Traditional\") {\n      publisherPercentage = 1.0;\n      this.setState({\n        publisherShare: (pubPerformanceRevenue - pubPROAdminFee) * .5 * publisherPercentage\n      });\n      this.setState({\n        writerEarnings: (pubPerformanceRevenue - pubPROAdminFee) * .5 + (pubPerformanceRevenue - pubPROAdminFee) * .5 * (1 - publisherPercentage) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))\n      });\n    } else if (this.state.publishingDealSelected === \"Co-Publishing\") {\n      publisherPercentage = 0.5;\n      this.setState({\n        publisherShare: (pubPerformanceRevenue - pubPROAdminFee) * .5 * publisherPercentage\n      });\n      this.setState({\n        writerEarnings: (pubPerformanceRevenue - pubPROAdminFee) * .5 + (pubPerformanceRevenue - pubPROAdminFee) * .5 * (1 - publisherPercentage) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))\n      });\n    } else if (this.state.publishingDealSelected === \"Admin Deal\") {\n      publisherPercentage = 0.1;\n      this.setState({\n        publisherShare: (pubPerformanceRevenue - pubPROAdminFee) * .5 * publisherPercentage\n      });\n      this.setState({\n        writerEarnings: (pubPerformanceRevenue - pubPROAdminFee) * .5 + (pubPerformanceRevenue - pubPROAdminFee) * .5 * (1 - publisherPercentage) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))\n      });\n    } else if (this.state.publishingDealSelected === \"No Deal\") {\n      publisherPercentage = 0.0;\n      this.setState({\n        publisherShare: (pubPerformanceRevenue - pubPROAdminFee) * .5 * publisherPercentage\n      });\n      this.setState({\n        writerEarnings: (pubPerformanceRevenue - pubPROAdminFee) * .5 + (pubPerformanceRevenue - pubPROAdminFee) * .5 * (1 - publisherPercentage) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))\n      });\n    }\n  }\n\n  weightedAverageOfSelected() {\n    let sum = 0.0;\n\n    for (let i = 0; i < this.state.providers.length; i++) {\n      if (this.state.providers[i].includeInCalculations) {\n        sum += this.state.providers[i].payoutPerStream * this.state.providers[i].marketShareStreams;\n      }\n    }\n\n    console.log(sum);\n    let sumOfWeights = 0.0;\n\n    for (let i = 0; i < this.state.providers.length; i++) {\n      if (this.state.providers[i].includeInCalculations) {\n        sumOfWeights += this.state.providers[i].marketShareStreams;\n      }\n    }\n\n    if (sumOfWeights <= 0.0) return 0.0; //console.log(sum)\n\n    console.log(sum / sumOfWeights);\n    return sum / sumOfWeights;\n  }\n\n  getTotalEarnings(artistShare) {\n    if (this.state.role === \"both\") {\n      this.setState({\n        totalEarnings: artistShare + parseFloat(this.state.writerEarnings)\n      });\n    } else if (this.state.role === \"artist\") {\n      this.setState({\n        totalEarnings: artistShare\n      });\n    } else if (this.state.role === \"writer\") {\n      this.setState({\n        totalEarnings: this.state.writerEarnings\n      });\n    }\n  }\n\n}\n\nexport default CalcPage;","map":{"version":3,"sources":["/Users/samvincent/Desktop/MusicStreamingCalculator/src/CalcPage.js"],"names":["React","SmallText","TextButton","TabGroup","SingleDropDown","NumberInput","DspButton","labelDealOptions","value","label","pubDealOptions","marketingSplitOptions","labelServicesOptions","roleTypes","ce","createElement","avgPubPayout","spotify","id","ref","createRef","name","payoutPerStream","marketShareStreams","marketShareDollars","includeInCalculations","apple","youtube","amazon","google","pandora","deezer","amazonDig","tidal","others","CalcPage","Component","constructor","props","dealTypeRef","tabGroupRef","pubTypeRef","advanceRef","costsRef","artistButtonRef","writerButtonRef","bothButtonRef","state","providers","streamNumber","role","recordDeal","publishDeal","sliderValue","recordDealSelected","publishingDealSelected","advance","costs","grossRev","totRecoupe","publisherShare","writerEarnings","totalEarnings","componentDidMount","buildRecordDealSelect","handleRoleButton","buildPublishingDealSelect","setSliderValue","testMap","setInitialRoleState","setInitialStates","render","e","changeStreams","getRoleButton","getStateRecDeal","getStatePubDeal","getStateAdvance","getStateCosts","map","provider","getButtonClick","console","log","current","button","setState","toggleMe","parseInt","updateCosts","updateAdvance","selectedOption","handlePublishingDealSelect","handleRecDealSelect","calculate","target","val","updateSlider","fullTrad","coPublishing","adminDeal","noDeal","deals","which","royalty","netProfit","distributionPercent","labelServices","rls","index","getPublisherShare","artistShare","labelShare","totalMoneyToRecoupe","parseFloat","grossRevenue","weightedAverageOfSelected","profit","getTotalEarnings","pubGrossRevenue","pubPerformanceRevenue","pubMechanicalRevenue","pubPROAdminFee","pubMechanicalAdminFee","pubMechanicalRecordFee","publisherPercentage","sum","i","length","sumOfWeights"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport SmallText from './components/SmallText.js';\nimport TextButton from './components/TextButton.js';\nimport TabGroup from './components/ButtonGroup.js';\nimport SingleDropDown from './components/SingleDropDown.js';\nimport NumberInput from './components/NumberInput.js';\nimport DspButton from './components/DspButton.js';\n\nconst labelDealOptions = [\n  { value: 'royalty', label: 'Royalty' },\n  { value: 'netProfit', label: 'Net Profit' },\n  { value: 'distributionPercent', label: 'Distribution (%)' },\n  { value: 'distributionFee', label: 'Distribution (fee)' },\n  { value: 'labelServices', label: 'Label Services' }\n]\n\nconst pubDealOptions = [\n  { value: 'Full/Traditional', label: 'Full/Traditional' },\n  { value: 'Co-Publishing', label: 'Co-publising' },\n  { value: 'Admin', label: 'Admin' },\n  { value: 'No Deal', label: 'No Deal' }\n]\n\nconst marketingSplitOptions = [\n  { value: 0.0, label: '0%' },\n  { value: 0.5, label: '50%' },\n  { value: 1.0, label: '100%' }\n]\n\nconst labelServicesOptions = [\n  { value: 'steamDistribution', label: 'Steam Distribution' },\n  { value: 'avertising', label: 'Avertising' },\n  { value: 'analytics', label: 'Analytics' },\n  { value: 'royaltyAccounting', label: 'Royalty Accounting' },\n  { value: 'splitPayments', label: 'Split Payments' },\n]\n\nconst roleTypes = [\"Recording Artist Only\", \"Writer Only\", \"Both\"];\n\nconst ce = React.createElement;\n\n//average / approx payout for publishing for stream\nconst avgPubPayout = 0.0007174565191\n\n        //handling dsps\n        let spotify = {\n          id: 0,\n          ref: React.createRef(),\n          name: \"Spotify\",\n          payoutPerStream: 0.00331,\n          marketShareStreams: .2922,\n            marketShareDollars: .4893,\n            includeInCalculations: true\n        };\n        let apple = {\n          id: 1,\n          ref: React.createRef(),\n          name: \"Apple Music\",\n          payoutPerStream: 0.00495,\n          marketShareStreams: .0995,\n            marketShareDollars: .2497,\n            includeInCalculations: true\n        };\n        let youtube = {\n          id: 2,\n          ref: React.createRef(),\n          name: \"Youtube Content ld\",\n          payoutPerStream: 0.00028,\n          marketShareStreams: .4858,\n            marketShareDollars: .0699,\n            includeInCalculations: true\n        };\n        let amazon = {\n          id: 3,\n          ref: React.createRef(),\n          name: \"Amazon Unlimited\",\n          payoutPerStream: 0.01175,\n          marketShareStreams: .0068,\n            marketShareDollars: .0404,\n            includeInCalculations: true\n        };\n        let google = {\n          id: 4,\n          ref: React.createRef(),\n          name: \"Google Play\",\n          payoutPerStream: 0.00543,\n          marketShareStreams: .0112,\n            marketShareDollars: .0308,\n            includeInCalculations: true\n        };\n        let pandora = {\n          id: 5,\n          ref: React.createRef(),\n          name: \"Pandora\",\n          payoutPerStream: 0.00155,\n          marketShareStreams: .0386,\n            marketShareDollars: .0303,\n            includeInCalculations: true\n        };\n        let deezer = {\n          id: 6,\n          name: \"Deezer\",\n          ref: React.createRef(),\n          payoutPerStream: 0.00567,\n          marketShareStreams: .0091,\n            marketShareDollars: .026,\n            includeInCalculations: true\n        };\n        let amazonDig = {\n          id: 7,\n          ref: React.createRef(),\n          name: \"Amazon Digital Services\",\n          payoutPerStream: 0.00395,\n          marketShareStreams: .0095,\n            marketShareDollars: .019,\n            includeInCalculations: true\n        };\n        let tidal = {\n          id: 8,\n          ref: React.createRef(),\n          name: \"TIDAL\",\n          payoutPerStream: 0.00927,\n          marketShareStreams: 0.0021,\n            marketShareDollars: 0.0098,\n            includeInCalculations: true\n        };\n        let others = {\n          id: 9,\n          ref: React.createRef(),\n          name: \"Napster / Rhapsody\",\n          payoutPerStream: 0.0111,\n          marketShareStreams: 0.0014,\n            marketShareDollars: 0.0080,\n            includeInCalculations: true\n        };\n\n//console.log(act)\n\nclass CalcPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.dealTypeRef = React.createRef();\n        this.tabGroupRef = React.createRef();\n        this.pubTypeRef = React.createRef();\n        this.advanceRef = React.createRef();\n        this.costsRef = React.createRef();\n        this.artistButtonRef = React.createRef();\n        this.writerButtonRef = React.createRef();\n        this.bothButtonRef = React.createRef();\n        \n\n        this.state = {\n            providers: [spotify, apple, youtube, amazon, google, pandora, deezer, amazonDig, tidal, others],\n            streamNumber: null,\n            role: null,\n            recordDeal: [],\n            publishDeal: [],\n            sliderValue: 50,\n            recordDealSelected: null,\n            publishingDealSelected: null,\n            advance: 0,\n            costs: 0,\n            grossRev: 0,\n            totRecoupe: 0,\n            publisherShare: 0,\n            writerEarnings: 0,\n            totalEarnings: 0\n        };\n\n    }\n\n\n    componentDidMount() {\n        //console.log(\"mounted\");\n        this.buildRecordDealSelect();\n        this.handleRoleButton(\"Writer & Artist\");\n        this.buildPublishingDealSelect();\n        this.setSliderValue(50);\n        this.testMap();\n        //this.buildDspsArr();\n        this.setInitialRoleState();\n        this.setInitialStates();\n    }\n\n\n    render() {\n      return (\n           <div>\n              <h2>Welcome to the revenue calculator</h2>\n              <input \n                type = \"text\"\n                placeholder = \"Enter Est Streams\"\n                onChange = {e => this.changeStreams(e)}\n              />\n              <br />\n              <SmallText text=\"Role: \"/>\n              <DspButton ref={this.artistButtonRef}\n                text = \"Artist\"\n                key=\"artButton\"\n                onChange={e => this.getRoleButton(\"artist\")}\n              />\n              <DspButton ref={this.writerButtonRef}\n                text = \"Writer\"\n                key=\"writeButton\"\n                onChange={e => this.getRoleButton(\"writer\")}\n              />\n              <DspButton ref={this.bothButtonRef}\n                text = \"Both\"\n                key=\"bothButton\"\n                onChange={e => this.getRoleButton(\"both\")}\n              />\n              <p> {this.state.role} </p>\n              <br />\n              <SmallText text=\"Record Deal Type: \"/>\n              <SingleDropDown ref={this.dealTypeRef}\n                  \n                  options={labelDealOptions}\n                  onChange = {e => this.getStateRecDeal(e)}\n              />\n              <br />\n              <SmallText text=\"Publishing Deal Type: \"/>\n              <SingleDropDown ref={this.pubTypeRef}\n                  options={pubDealOptions}\n                  onChange = {e => this.getStatePubDeal(e)}\n              />\n              <br />\n              <SmallText text=\"Deal Split: \"/>\n\n              <br />\n              <SmallText text=\"Guaranteed Income: \"/>\n              <NumberInput ref={this.advanceRef}\n                id= {\"numInput\"} \n                label = \"From Advance\"\n                locked = {false}\n                active = {false}\n                onChange = {e => this.getStateAdvance(e)}\n              />\n              <br />\n              <SmallText text=\"Costs: \"/>\n              <NumberInput ref={this.costsRef} \n                id = {\"costInput\"}\n                label = \"Costs\"\n                locked = {false}\n                active = {false}\n                onChange = {e => this.getStateCosts(e)}\n              />\n              <br />\n              <SmallText text=\"Recoupable: \"/>\n              <input\n                 type=\"checkbox\"\n              />\n              <br />\n              <SmallText text=\"DSPs\"/>\n              <div>\n                {this.state.providers.map((provider) =>\n                   <DspButton ref={provider.ref}\n                     key={provider.id}\n                     text={provider.name}\n                     onChange = {e => this.getButtonClick(provider.id)}\n                   />\n                )}\n              </div>\n           </div>\n        );\n\n\n\n      /*<!--\n      return ce('div', {ref: 'this.myRef'},\n        ce('h2', {className: \"font\"}, 'Welcome to the Revenue Calculator'),\n            ce('input', {id: \"estStreams\", type: \"text\", placeholder: \"Enter Est. Streams\", onChange: e => this.changeStreams(e)}),\n            ce('br'),\n            ce('text', null, 'Role: '),\n            /*ce('select', {onChange: e => this.handleRoleSelect(e)},\n                this.state.roles.map(role => ce('option', {key: role.id}, role.name))\n                ),*//*\n            ce('button', {onClick: e => this.handleRoleButton(\"artist\")}, 'Artist Only'),\n            ce('button', {onClick: e => this.handleRoleButton(\"writer\")}, 'Writer Only'),\n            ce('button', {onClick: e => this.handleRoleButton(\"both\")}, 'Writer & Artist'),\n            ce('br'),\n            ce('text', null, 'Record Deal Type: '),\n            ce('select', {onChange: e => this.handleRecDealSelect(e)},\n                this.state.recordDeal.map(deal => ce('option', {key: deal.id}, deal.name))\n                ),\n            ce('br'),\n            ce('text', null, 'Publishing Deal Type: '),\n            ce('select', {onChange: e => this.handlePublishingDealSelect(e)},\n                this.state.publishDeal.map(deal => ce('option', {key: deal.id}, deal.name))\n                ),\n            ce('br'),\n            ce('text', null, 'Deal Split: '),\n            ce('input', {type: 'range', ref: 'sliderRef', min: '1', max: '100', id: 'splitSlider', onChange: e => this.updateSlider(e)}),\n            ce('text', null, 'Guaranteed Income: '),\n            ce('input', {id: \"fromAdvance\", placeholder: \"From Advance\", onChange: e => this.updateAdvance(e)}),\n            ce('br'),\n            ce('text', null, 'Costs: '),\n            ce('input', {placeholder: 'Costs', onChange: e => this.updateCosts(e)}),\n            ce('br'),\n            ce('text', null, 'Recoupable: '),\n            ce('input', {type: 'checkbox', checked: 'true'}),\n            ce('br'),\n            ce('text', null, 'DSPs'),\n            ce('br'),\n            ce('table', {id: 'dspTable'}, \n              ce('thead', null, ce('tr', null, ce('th', null, \"Platform\"), ce('th', null, \"Include\"))),\n              ce('tbody', null, this.state.providers.map(provider => ce('tr', null, ce('td', null, ce('input', {placeholder: provider.name})), ce('td', null, ce('input', {type: 'checkbox', checked: provider.includeInCalculations, onChange: e => this.toggleMe(provider.id)})))))\n            ),\n            ce('br'),\n            //ce('button', {onClick: e => this.calculate()}, 'Calculate'),\n            //ce('br'),\n            ce('text', null, 'Total Revenue: '),\n            ce('br'),\n            ce('text', null, 'Gross Revenue: '),\n            ce('input', {value: this.state.grossRev}),\n            ce('br'),\n            ce('text', null, 'Total Money Needed to Recoupe: '),\n            ce('input', {value: 0}),\n            ce('br'),\n            ce('text', null, 'Unrecouped: '),\n            ce('br'),\n            ce('text', null, 'Label Earnings: '),\n            ce('input', {value: this.state.publisherShare}),\n            ce('text', null, 'Writer Earnings: '),\n            ce('input', {value: this.state.writerEarnings}),\n            ce('br'),\n            ce('text', null, 'TOTAL EARNINGS: '),\n            ce('input', {value: this.state.totalEarnings}),\n            ce('br')\n            \n        )-->*/\n\n    }\n    setInitialRoleState() {\n      /*this.artistButtonRef.current.setState({button: false});\n      this.writerButtonRef.current.setState({button: false});\n      this.bothButtonRef.current.setState({button: true});\n      */\n    }\n    getRoleButton(name) {\n         console.log(name);\n         console.log(this.artistButtonRef.current.state.button);\n         console.log(this.writerButtonRef.current.state.button);\n         console.log(this.bothButtonRef.current.state.button);\n\n         if(name === \"artist\" && !this.artistButtonRef.current.state.button) {\n            this.handleRoleButton(\"artist\");\n            this.writerButtonRef.current.setState({button: false});\n            this.bothButtonRef.current.setState({button: false});\n            //this.state.\n         } else if (name === \"writer\" && !this.writerButtonRef.current.state.button) {\n            this.handleRoleButton(\"writer\");\n            this.artistButtonRef.current.setState({button: false});\n            this.bothButtonRef.current.setState({button: false});\n         } else if (name === \"both\" && !this.bothButtonRef.current.state.button) {\n            this.handleRoleButton(\"both\");\n            this.writerButtonRef.current.setState({button: false});\n            this.artistButtonRef.current.setState({button: false});\n         }\n    }\n    getButtonClick(id) {\n      //console.log(\"clicked: \" + id);\n      //console.log(this.state.providers[id].ref.current.state);\n      if(this.state.providers[id].ref.current.state.button != null && this.state.providers[id].ref.current.state.button != this.state.providers[id].includeInCalculations) {\n        this.toggleMe(id);\n      }\n\n    }\n    getStateCosts() {\n      console.log(this.costsRef.current.state)\n      if(this.costsRef.current.state.value != \"\" && parseInt(this.costsRef.current.state.value) != this.state.costs) {\n        const e = parseInt(this.costsRef.current.state.value);\n        this.updateCosts(e);\n      }\n    }\n    getStateAdvance() {\n      console.log(this.advanceRef.current.state)\n      if(this.advanceRef.current.state.value != \"\" && parseInt(this.advanceRef.current.state.value) != this.state.advance) {\n          const e = parseInt(this.advanceRef.current.state.value);\n          this.updateAdvance(e);\n      }\n    }\n    getStatePubDeal() {\n      //console.log(\"getting state rec deal\");\n      if(this.pubTypeRef.current.state.selectedOption != null && this.pubTypeRef.current.state.selectedOption.value != this.state.publishingDealSelected) {\n        //console.log(this.dealTypeRef.current.state.selectedOption.value);\n        const e = this.pubTypeRef.current.state.selectedOption.value;\n        this.handlePublishingDealSelect(e);\n      }\n      //const node = this.dealTypeRef.current;\n      //console.log(\"Node: \" + node);\n    }\n    getStateRecDeal() {\n      //console.log(\"getting state rec deal\");\n      if(this.dealTypeRef.current.state.selectedOption != null && this.dealTypeRef.current.state.selectedOption.value != this.state.recordDealSelected) {\n        //console.log(this.dealTypeRef.current.state.selectedOption.value);\n        const e = this.dealTypeRef.current.state.selectedOption.value;\n        this.handleRecDealSelect(e);\n      }\n      //const node = this.dealTypeRef.current;\n      //console.log(\"Node: \" + node);\n    }\n    testMap() {\n      this.state.providers.map(provider => console.log(provider.name));\n      //this.state.providers.map(provider => ce('tr', null, ce('td', null, ce('text', null, provider.name))), ce('tr', null, ce('td', null, ce('input', {type: 'checkbox', checked: provider.includeInCalculations, onClick: e => this.toggleMe(provider.id)}))))\n    }\n\n    setInitialStates() {\n\n      this.setState({streamNumber: 1000000000,role: \"Writer & Artist\", recordDealSelected: \"Royalty\", publishingDealSelected: \"Full/Traditional\", advance: 0, costs: 0, grossRev: 0, publisherShare: 0, writerEarnings: 0, totalEarnings: 0});\n\n      console.log(this.state.providers)\n      this.calculate();\n    }\n\n    changeStreams(e) {\n        console.log(\"changed streams to: \" + e.target.value);\n        this.setState({streamNumber: e.target.value});\n        this.calculate();\n    }\n\n    updateAdvance(e) {\n      console.log(\"changed advance to: \" + e);\n      this.setState({advance: e});\n      this.calculate();\n    }\n\n    updateCosts(e) {\n        console.log(\"changed costs to: \" + e);\n        this.setState({costs: e});\n        this.calculate();\n    }\n\n    setSliderValue(val) {\n        this.setState( {sliderValue: val});\n        this.calculate();\n    }\n\n    \n\n    updateSlider(e) {\n        console.log(e.target.value)\n        //val = document.getElementById(\"splitSlider\").value()\n        this.setState( {sliderValue: e.target.value})\n        this.calculate();\n    }\n\n    buildPublishingDealSelect() {\n        let fullTrad = {\n            id: 0,\n            name: \"Full/Traditional\"\n        }\n        let coPublishing = {\n            id: 1,\n            name: \"Co-Publishing\"\n        }\n        let adminDeal = {\n            id: 2,\n            name: \"Admin Deal\"\n        }\n        let noDeal = {\n            id: 3,\n            name: \"No Deal\"\n        }\n        let deals = [fullTrad, coPublishing, adminDeal, noDeal]\n        this.setState( {publishDeal: deals})\n    }\n\n    handlePublishingDealSelect(e) {\n        console.log(e);\n        this.setState({publishingDealSelected: e});\n        this.calculate();\n    }\n\n\n    handleRoleButton(which) {\n        console.log(which);\n        this.setState({role: which})\n        this.calculate();\n    }\n\n   // handleRecDealSelect(e)\n\n    handleRecDealSelect(e) {\n        console.log(\"selecting Roles\");\n        console.log(e);\n        if(e === \"royalty\") {\n          this.setState({sliderValue: 20});\n        } else if (e === \"netProfit\") {\n          this.setState({sliderValue: 50});\n        } else if (e === \"distributionPercent\") {\n          this.setState({sliderValue: 70});\n        } else if (e === \"labelServices\") {\n          this.setState({sliderValue: 80});\n        }\n        //document.getElementById(\"splitSlider\").value = this.state.sliderValue;\n        //console.log(this.myRef.current);\n        //React.findDOMNode(this.refs.sliderRef).value = this.state.sliderValue;\n        console.log(\"sliderValue: \" + this.state.sliderValue);\n        this.setState({recordDealSelected: e})\n        this.calculate();\n    }\n\n    buildRecordDealSelect() {\n        //console.log(\"Roles!\");\n        let royalty = {\n            id: 0,\n            name: \"Royalty\"\n        };\n        let netProfit = {\n            id: 1,\n            name: \"Net Profit\"\n        };\n        let distributionPercent = {\n            id: 2,\n            name: \"Distribution Percent\"\n        };\n        let labelServices = {\n            id: 3,\n            name: \"Label Services\"\n        }\n\n        let rls = [royalty, netProfit, distributionPercent, labelServices];\n        this.setState( {recordDeal: rls} );\n    }\n\n    toggleMe(index) {\n      this.state.providers[index].includeInCalculations = !this.state.providers[index].includeInCalculations;\n      //console.log(dsps[index].name);\n      //console.log(dsps[index].includeInCalculations);\n      this.calculate();\n    }\n\n    /// MATH STUFF /////\n    calculate() {\n        this.getPublisherShare();\n\n        console.log(\"calculating\");\n        let artistShare;\n        let labelShare;\n        // Why are there double semi-colons?\n                   //prob a typo\n        let totalMoneyToRecoupe = parseFloat(this.state.advance) + parseFloat(this.state.costs);\n        //console.log(totalMoneyToRecoupe)\n        let grossRevenue= this.state.streamNumber * this.weightedAverageOfSelected();\n        //console.log(\"grossRevenue: \" + grossRevenue)\n        //checkDSPs();\n        //console.log(estStreams.value * avgPayout);\n        //console.log(estStreams.value * weightedAverageOfSelected());\n        if (this.state.recordDealSelected === \"royalty\") {\n            // Artist Split\n            if((grossRevenue * (parseFloat(this.state.sliderValue)/100)) <= totalMoneyToRecoupe){\n              console.log(\"unrecouped\");\n              artistShare = 0;\n            } else {\n              artistShare = (grossRevenue * (parseFloat(this.state.sliderValue)/100)) - totalMoneyToRecoupe;\n            }\n            labelShare = grossRevenue * (1-(parseFloat(this.state.sliderValue)/100));\n\n        } else if (this.state.recordDealSelected === \"netProfit\" || this.state.recordDealSelected === \"distributionPercent\" || this.state.recordDealSelected === \"Distribution Fee\") {\n            //net profit deals are generally guaranteed 50/50, distribution are generally 70/30 artist/label\n            let profit = (grossRevenue - this.state.costs);\n            // Artist Split\n            if(((profit * (parseFloat(this.state.sliderValue)/100)) - parseFloat(this.state.advance)) < 0){\n              console.log(\"unrecouped\");\n              artistShare = 0;\n            } else {\n              artistShare = (profit * (parseFloat(this.state.sliderValue)/100)) - parseFloat(this.state.advance);\n            }\n            // Label Split Net Profit, Distributions\n            if(this.state.recordDealSelected === \"netProfit\" || this.state.recordDealSelected === \"distributionPercent\") {\n                if(profit < 0){\n                    labelShare = 0;\n                } else {\n                    labelShare = (profit * (1-(parseFloat(this.state.sliderValue)/100)));\n                }\n            } else labelShare = grossRevenue - artistShare;\n\n            /* Nik Label Share for Net Profit, %Distribution Deals\n            if(profit < 0){\n              labelShare = 0;\n            } else {\n              labelShare = (profit * (1-(parseFloat(artistDeal.value)/100)));\n            }\n            */\n\n        } else if (this.state.recordDealSelected === \"labelServices\") {\n            // Artist Split\n            if((grossRevenue * (parseFloat(this.state.sliderValue)/100)) <= totalMoneyToRecoupe){\n              console.log(\"unrecouped\");\n              artistShare = 0;\n            } else {\n              artistShare = (grossRevenue * (parseFloat(this.state.sliderValue)/100)) - totalMoneyToRecoupe;\n            }\n            labelShare = grossRevenue * (1-(parseFloat(this.state.sliderValue)/100)) + this.state.costs;//extra menu items would be factored into costs\n        }\n\n        console.log(\"grossRevenue: \" + grossRevenue)\n        console.log(\"totRecoupe: \" + totalMoneyToRecoupe)\n        console.log(\"writerEarnings: \" + artistShare)\n        console.log(\"publisherShare: \" + labelShare)\n\n        this.setState({grossRev: grossRevenue, totRecoupe: totalMoneyToRecoupe, writerEarnings: artistShare, publisherShare: labelShare});\n\n        this.getTotalEarnings(artistShare);\n\n    }\n    getPublisherShare() {\n        //console.log(\"avgPubPayout: \" + avgPubPayout)\n\n        let pubGrossRevenue = avgPubPayout * this.state.streamNumber;\n        let pubPerformanceRevenue = pubGrossRevenue * .5;\n        let pubMechanicalRevenue = pubGrossRevenue * .5;\n        let pubPROAdminFee = pubPerformanceRevenue * .165;\n        let pubMechanicalAdminFee = pubMechanicalRevenue * .15;\n        let pubMechanicalRecordFee = (pubMechanicalRevenue - pubMechanicalAdminFee) * .3;\n\n        let publisherPercentage;\n\n        if(this.state.publishingDealSelected === \"Full/Traditional\") {\n            publisherPercentage = 1.0;\n            this.setState({publisherShare: ((pubPerformanceRevenue - pubPROAdminFee) * .5) * publisherPercentage});\n            this.setState({writerEarnings: ((pubPerformanceRevenue - pubPROAdminFee) * .5) + (((pubPerformanceRevenue - pubPROAdminFee) * .5) * (1- publisherPercentage)) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))});\n        } else if(this.state.publishingDealSelected === \"Co-Publishing\") {\n            publisherPercentage = 0.5;\n            this.setState({publisherShare: ((pubPerformanceRevenue - pubPROAdminFee) * .5) * publisherPercentage});\n            this.setState({writerEarnings: ((pubPerformanceRevenue - pubPROAdminFee) * .5) + (((pubPerformanceRevenue - pubPROAdminFee) * .5) * (1- publisherPercentage)) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))});\n        } else if(this.state.publishingDealSelected === \"Admin Deal\") {\n            publisherPercentage = 0.1;\n            this.setState({publisherShare: ((pubPerformanceRevenue - pubPROAdminFee) * .5) * publisherPercentage});\n            this.setState({writerEarnings: ((pubPerformanceRevenue - pubPROAdminFee) * .5) + (((pubPerformanceRevenue - pubPROAdminFee) * .5) * (1- publisherPercentage)) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))});\n        } else if(this.state.publishingDealSelected === \"No Deal\") {\n            publisherPercentage = 0.0;\n            this.setState({publisherShare: ((pubPerformanceRevenue - pubPROAdminFee) * .5) * publisherPercentage});\n            this.setState({writerEarnings: ((pubPerformanceRevenue - pubPROAdminFee) * .5) + (((pubPerformanceRevenue - pubPROAdminFee) * .5) * (1- publisherPercentage)) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))});\n        }\n    }\n\n    weightedAverageOfSelected() {\n\n        let sum = 0.0;\n        for(let i=0; i < this.state.providers.length; i++) {\n          if(this.state.providers[i].includeInCalculations) {\n                sum += (this.state.providers[i].payoutPerStream * this.state.providers[i].marketShareStreams)\n            }\n        }\n        console.log(sum)\n        let sumOfWeights = 0.0;\n        for(let i=0;i < this.state.providers.length; i++) {\n          if(this.state.providers[i].includeInCalculations) {\n            sumOfWeights += this.state.providers[i].marketShareStreams\n          }\n        }\n        if(sumOfWeights <= 0.0) return 0.0\n        //console.log(sum)\n        console.log(sum/sumOfWeights);\n        return sum/sumOfWeights;\n    }\n\n\n\n    getTotalEarnings(artistShare) {\n        if(this.state.role === \"both\") {\n            this.setState({totalEarnings: artistShare + parseFloat(this.state.writerEarnings)});\n        } else if(this.state.role === \"artist\") {\n            this.setState({totalEarnings: artistShare});\n        } else if(this.state.role === \"writer\") {\n            this.setState({totalEarnings: this.state.writerEarnings});\n        }\n    }\n\n\n}\n\n\nexport default CalcPage;\n"]},"metadata":{},"sourceType":"module"}