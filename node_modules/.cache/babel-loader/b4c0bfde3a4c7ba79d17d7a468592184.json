{"ast":null,"code":"import React from 'react';\nimport './App.css';\nimport SmallText from './components/SmallText.js';\nimport TextButton from './components/TextButton.js';\nconst ce = React.createElement; //average / approx payout for publishing for stream\n\nconst avgPubPayout = 0.0007174565191; //handling dsps\n\nlet spotify = {\n  id: 0,\n  name: \"Spotify\",\n  payoutPerStream: 0.00331,\n  marketShareStreams: .2922,\n  marketShareDollars: .4893,\n  includeInCalculations: true\n};\nlet apple = {\n  id: 1,\n  name: \"Apple Music\",\n  payoutPerStream: 0.00495,\n  marketShareStreams: .0995,\n  marketShareDollars: .2497,\n  includeInCalculations: true\n};\nlet youtube = {\n  id: 2,\n  name: \"Youtube Content ld\",\n  payoutPerStream: 0.00028,\n  marketShareStreams: .4858,\n  marketShareDollars: .0699,\n  includeInCalculations: true\n};\nlet amazon = {\n  id: 3,\n  name: \"Amazon Unlimited\",\n  payoutPerStream: 0.01175,\n  marketShareStreams: .0068,\n  marketShareDollars: .0404,\n  includeInCalculations: true\n};\nlet google = {\n  id: 4,\n  name: \"Google Play\",\n  payoutPerStream: 0.00543,\n  marketShareStreams: .0112,\n  marketShareDollars: .0308,\n  includeInCalculations: true\n};\nlet pandora = {\n  id: 5,\n  name: \"Pandora\",\n  payoutPerStream: 0.00155,\n  marketShareStreams: .0386,\n  marketShareDollars: .0303,\n  includeInCalculations: true\n};\nlet deezer = {\n  id: 6,\n  name: \"Deezer\",\n  payoutPerStream: 0.00567,\n  marketShareStreams: .0091,\n  marketShareDollars: .026,\n  includeInCalculations: true\n};\nlet amazonDig = {\n  id: 7,\n  name: \"Amazon Digital Services\",\n  payoutPerStream: 0.00395,\n  marketShareStreams: .0095,\n  marketShareDollars: .019,\n  includeInCalculations: true\n};\nlet tidal = {\n  id: 8,\n  name: \"TIDAL\",\n  payoutPerStream: 0.00927,\n  marketShareStreams: 0.0021,\n  marketShareDollars: 0.0098,\n  includeInCalculations: true\n};\nlet others = {\n  id: 9,\n  name: \"Napster / Rhapsody\",\n  payoutPerStream: 0.0111,\n  marketShareStreams: 0.0014,\n  marketShareDollars: 0.0080,\n  includeInCalculations: true\n};\n\nclass CalcPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      providers: [spotify, apple, youtube, amazon, google, pandora, deezer, amazonDig, tidal, others],\n      streamNumber: null,\n      role: null,\n      recordDeal: [],\n      publishDeal: [],\n      sliderValue: 50,\n      recordDealSelected: null,\n      publishingDealSelected: null,\n      advance: 0,\n      costs: 0,\n      grossRev: 0,\n      totRecoupe: 0,\n      publisherShare: 0,\n      writerEarnings: 0,\n      totalEarnings: 0\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"mounted\");\n    this.buildRecordDealSelect();\n    this.handleRoleButton(\"Writer & Artist\");\n    this.buildPublishingDealSelect();\n    this.setSliderValue(50);\n    this.testMap(); //this.buildDspsArr();\n\n    this.setInitialStates();\n  }\n\n  render() {\n    return ce('div', {\n      ref: 'this.myRef'\n    }, ce('h2', {\n      className: \"font\"\n    }, 'Welcome to the Revenue Calculator'), ce('input', {\n      id: \"estStreams\",\n      type: \"text\",\n      placeholder: \"Enter Est. Streams\",\n      onChange: e => this.changeStreams(e)\n    }), ce('br'), ce('text', null, 'Role: '),\n    /*ce('select', {onChange: e => this.handleRoleSelect(e)},\n        this.state.roles.map(role => ce('option', {key: role.id}, role.name))\n        ),*/\n    ce('TextButton', {\n      onClick: e => this.handleRoleButton(\"artist\")\n    }, 'Artist Only'), ce('button', {\n      onClick: e => this.handleRoleButton(\"writer\")\n    }, 'Writer Only'), ce('button', {\n      onClick: e => this.handleRoleButton(\"both\")\n    }, 'Writer & Artist'), ce('br'), ce('text', null, 'Record Deal Type: '), ce('select', {\n      onChange: e => this.handleRecDealSelect(e)\n    }, this.state.recordDeal.map(deal => ce('option', {\n      key: deal.id\n    }, deal.name))), ce('br'), ce('text', null, 'Publishing Deal Type: '), ce('select', {\n      onChange: e => this.handlePublishingDealSelect(e)\n    }, this.state.publishDeal.map(deal => ce('option', {\n      key: deal.id\n    }, deal.name))), ce('br'), ce('text', null, 'Deal Split: '), ce('input', {\n      type: 'range',\n      ref: 'sliderRef',\n      min: '1',\n      max: '100',\n      id: 'splitSlider',\n      onChange: e => this.updateSlider(e)\n    }), ce('text', null, 'Guaranteed Income: '), ce('input', {\n      id: \"fromAdvance\",\n      placeholder: \"From Advance\",\n      onChange: e => this.updateAdvance(e)\n    }), ce('br'), ce('text', null, 'Costs: '), ce('input', {\n      placeholder: 'Costs',\n      onChange: e => this.updateCosts(e)\n    }), ce('br'), ce('text', null, 'Recoupable: '), ce('input', {\n      type: 'checkbox',\n      checked: 'true'\n    }), ce('br'), ce('text', null, 'DSPs'), ce('br'), ce('table', {\n      id: 'dspTable'\n    }, ce('thead', null, ce('tr', null, ce('th', null, \"Platform\"), ce('th', null, \"Include\"))), ce('tbody', null, this.state.providers.map(provider => ce('tr', null, ce('td', null, ce('input', {\n      placeholder: provider.name\n    })), ce('td', null, ce('input', {\n      type: 'checkbox',\n      checked: provider.includeInCalculations,\n      onChange: e => this.toggleMe(provider.id)\n    })))))), ce('br'), //ce('button', {onClick: e => this.calculate()}, 'Calculate'),\n    //ce('br'),\n    ce('text', null, 'Total Revenue: '), ce('br'), ce('text', null, 'Gross Revenue: '), ce('input', {\n      value: this.state.grossRev\n    }), ce('br'), ce('text', null, 'Total Money Needed to Recoupe: '), ce('input', {\n      value: 0\n    }), ce('br'), ce('text', null, 'Unrecouped: '), ce('br'), ce('text', null, 'Label Earnings: '), ce('input', {\n      value: this.state.publisherShare\n    }), ce('text', null, 'Writer Earnings: '), ce('input', {\n      value: this.state.writerEarnings\n    }), ce('br'), ce('text', null, 'TOTAL EARNINGS: '), ce('input', {\n      value: this.state.totalEarnings\n    }), ce('br'));\n  }\n\n  testMap() {\n    this.state.providers.map(provider => console.log(provider.name)); //this.state.providers.map(provider => ce('tr', null, ce('td', null, ce('text', null, provider.name))), ce('tr', null, ce('td', null, ce('input', {type: 'checkbox', checked: provider.includeInCalculations, onClick: e => this.toggleMe(provider.id)}))))\n  }\n\n  setInitialStates() {\n    this.setState({\n      streamNumber: 1000000000,\n      role: \"Writer & Artist\",\n      recordDealSelected: \"Royalty\",\n      publishingDealSelected: \"Full/Traditional\",\n      advance: 0,\n      costs: 0,\n      grossRev: 0,\n      publisherShare: 0,\n      writerEarnings: 0,\n      totalEarnings: 0\n    });\n    console.log(this.state.providers);\n    this.calculate();\n  }\n\n  changeStreams(e) {\n    console.log(\"changed streams to: \" + e.target.value);\n    this.setState({\n      streamNumber: e.target.value\n    });\n    this.calculate();\n  }\n\n  updateAdvance(e) {\n    console.log(\"changed advance to: \" + e.target.value);\n    this.setState({\n      advance: e.target.value\n    });\n    this.calculate();\n  }\n\n  updateCosts(e) {\n    console.log(\"changed costs to: \" + e.target.value);\n    this.setState({\n      costs: e.target.value\n    });\n    this.calculate();\n  }\n\n  setSliderValue(val) {\n    this.setState({\n      sliderValue: val\n    });\n    this.calculate();\n  }\n\n  updateSlider(e) {\n    console.log(e.target.value); //val = document.getElementById(\"splitSlider\").value()\n\n    this.setState({\n      sliderValue: e.target.value\n    });\n    this.calculate();\n  }\n\n  buildPublishingDealSelect() {\n    let fullTrad = {\n      id: 0,\n      name: \"Full/Traditional\"\n    };\n    let coPublishing = {\n      id: 1,\n      name: \"Co-Publishing\"\n    };\n    let adminDeal = {\n      id: 2,\n      name: \"Admin Deal\"\n    };\n    let noDeal = {\n      id: 3,\n      name: \"No Deal\"\n    };\n    let deals = [fullTrad, coPublishing, adminDeal, noDeal];\n    this.setState({\n      publishDeal: deals\n    });\n  }\n\n  handlePublishingDealSelect(e) {\n    console.log(e.target.value);\n    this.setState({\n      publishingDealSelected: e.target.value\n    });\n    this.calculate();\n  }\n\n  handleRoleButton(which) {\n    console.log(which);\n    this.setState({\n      role: which\n    });\n    this.calculate();\n  } // handleRecDealSelect(e)\n\n\n  handleRecDealSelect(e) {\n    //console.log(\"selecting Roles\");\n    console.log(e.target.value);\n\n    if (e.target.value === \"Royalty\") {\n      this.setState({\n        sliderValue: 20\n      });\n    } else if (e.target.value === \"Net Profit\") {\n      this.setState({\n        sliderValue: 50\n      });\n    } else if (e.target.value === \"Distribution Percent\") {\n      this.setState({\n        sliderValue: 70\n      });\n    } else if (e.target.value === \"Label Services\") {\n      this.setState({\n        sliderValue: 80\n      });\n    } //document.getElementById(\"splitSlider\").value = this.state.sliderValue;\n    //console.log(this.myRef.current);\n    //React.findDOMNode(this.refs.sliderRef).value = this.state.sliderValue;\n\n\n    console.log(\"sliderValue: \" + this.state.sliderValue);\n    this.setState({\n      recordDealSelected: e.target.value\n    });\n    this.calculate();\n  }\n\n  buildRecordDealSelect() {\n    //console.log(\"Roles!\");\n    let royalty = {\n      id: 0,\n      name: \"Royalty\"\n    };\n    let netProfit = {\n      id: 1,\n      name: \"Net Profit\"\n    };\n    let distributionPercent = {\n      id: 2,\n      name: \"Distribution Percent\"\n    };\n    let labelServices = {\n      id: 3,\n      name: \"Label Services\"\n    };\n    let rls = [royalty, netProfit, distributionPercent, labelServices];\n    this.setState({\n      recordDeal: rls\n    });\n  } ///////// DSP Stuff ///////\n\n\n  buildDspsArr() {\n    //handling dsps\n    let spotify = {\n      id: 0,\n      name: \"Spotify\",\n      payoutPerStream: 0.00331,\n      marketShareStreams: .2922,\n      marketShareDollars: .4893,\n      includeInCalculations: true\n    };\n    let apple = {\n      id: 1,\n      name: \"Apple Music\",\n      payoutPerStream: 0.00495,\n      marketShareStreams: .0995,\n      marketShareDollars: .2497,\n      includeInCalculations: true\n    };\n    let youtube = {\n      id: 2,\n      name: \"Youtube Content ld\",\n      payoutPerStream: 0.00028,\n      marketShareStreams: .4858,\n      marketShareDollars: .0699,\n      includeInCalculations: true\n    };\n    let amazon = {\n      id: 3,\n      name: \"Amazon Unlimited\",\n      payoutPerStream: 0.01175,\n      marketShareStreams: .0068,\n      marketShareDollars: .0404,\n      includeInCalculations: true\n    };\n    let google = {\n      id: 4,\n      name: \"Google Play\",\n      payoutPerStream: 0.00543,\n      marketShareStreams: .0112,\n      marketShareDollars: .0308,\n      includeInCalculations: true\n    };\n    let pandora = {\n      id: 5,\n      name: \"Pandora\",\n      payoutPerStream: 0.00155,\n      marketShareStreams: .0386,\n      marketShareDollars: .0303,\n      includeInCalculations: true\n    };\n    let deezer = {\n      id: 6,\n      name: \"Deezer\",\n      payoutPerStream: 0.00567,\n      marketShareStreams: .0091,\n      marketShareDollars: .026,\n      includeInCalculations: true\n    };\n    let amazonDig = {\n      id: 7,\n      name: \"Amazon Digital Services\",\n      payoutPerStream: 0.00395,\n      marketShareStreams: .0095,\n      marketShareDollars: .019,\n      includeInCalculations: true\n    };\n    let tidal = {\n      id: 8,\n      name: \"TIDAL\",\n      payoutPerStream: 0.00927,\n      marketShareStreams: 0.0021,\n      marketShareDollars: 0.0098,\n      includeInCalculations: true\n    };\n    let others = {\n      id: 9,\n      name: \"Napster / Rhapsody\",\n      payoutPerStream: 0.0111,\n      marketShareStreams: 0.0014,\n      marketShareDollars: 0.0080,\n      includeInCalculations: true\n    };\n    let dsps = [spotify, apple, youtube, amazon, google, pandora, deezer, amazonDig, tidal, others];\n    console.log(dsps);\n    this.setState({\n      providers: dsps\n    });\n  }\n\n  toggleMe(index) {\n    this.state.providers[index].includeInCalculations = !this.state.providers[index].includeInCalculations; //console.log(dsps[index].name);\n    //console.log(dsps[index].includeInCalculations);\n\n    this.calculate();\n  } /// MATH STUFF /////\n\n\n  calculate() {\n    this.getPublisherShare();\n    console.log(\"calculating\");\n    let artistShare;\n    let labelShare; // Why are there double semi-colons?\n    //prob a typo\n\n    let totalMoneyToRecoupe = parseFloat(this.state.advance) + parseFloat(this.state.costs);\n    console.log(totalMoneyToRecoupe);\n    let grossRevenue = this.state.streamNumber * this.weightedAverageOfSelected();\n    console.log(\"grossRevenue: \" + grossRevenue); //checkDSPs();\n    //console.log(estStreams.value * avgPayout);\n    //console.log(estStreams.value * weightedAverageOfSelected());\n\n    if (this.state.recordDealSelected === \"Royalty\") {\n      // Artist Split\n      if (grossRevenue * (parseFloat(this.state.sliderValue) / 100) <= totalMoneyToRecoupe) {\n        console.log(\"unrecouped\");\n        artistShare = 0;\n      } else {\n        artistShare = grossRevenue * (parseFloat(this.state.sliderValue) / 100) - totalMoneyToRecoupe;\n      }\n\n      labelShare = grossRevenue * (1 - parseFloat(this.state.sliderValue) / 100);\n    } else if (this.state.recordDealSelected === \"Net Profit\" || this.state.recordDealSelected === \"Distribution Percent\" || this.state.recordDealSelected === \"Distribution Fee\") {\n      //net profit deals are generally guaranteed 50/50, distribution are generally 70/30 artist/label\n      let profit = grossRevenue - this.state.costs; // Artist Split\n\n      if (profit * (parseFloat(this.state.sliderValue) / 100) - parseFloat(this.state.advance) < 0) {\n        console.log(\"unrecouped\");\n        artistShare = 0;\n      } else {\n        artistShare = profit * (parseFloat(this.state.sliderValue) / 100) - parseFloat(this.state.advance);\n      } // Label Split Net Profit, Distributions\n\n\n      if (this.state.recordDealSelected === \"Net Profit\" || this.state.recordDealSelected === \"Distribution Percent\") {\n        if (profit < 0) {\n          labelShare = 0;\n        } else {\n          labelShare = profit * (1 - parseFloat(this.state.sliderValue) / 100);\n        }\n      } else labelShare = grossRevenue - artistShare;\n      /* Nik Label Share for Net Profit, %Distribution Deals\n      if(profit < 0){\n        labelShare = 0;\n      } else {\n        labelShare = (profit * (1-(parseFloat(artistDeal.value)/100)));\n      }\n      */\n\n    } else if (this.state.recordDealSelected === \"Label Services\") {\n      // Artist Split\n      if (grossRevenue * (parseFloat(this.state.sliderValue) / 100) <= totalMoneyToRecoupe) {\n        console.log(\"unrecouped\");\n        artistShare = 0;\n      } else {\n        artistShare = grossRevenue * (parseFloat(this.state.sliderValue) / 100) - totalMoneyToRecoupe;\n      }\n\n      labelShare = grossRevenue * (1 - parseFloat(this.state.sliderValue) / 100) + this.state.costs; //extra menu items would be factored into costs\n    }\n\n    console.log(\"grossRevenue: \" + grossRevenue);\n    console.log(\"totRecoupe: \" + totalMoneyToRecoupe);\n    console.log(\"writerEarnings: \" + artistShare);\n    console.log(\"publisherShare: \" + labelShare);\n    this.setState({\n      grossRev: grossRevenue,\n      totRecoupe: totalMoneyToRecoupe,\n      writerEarnings: artistShare,\n      publisherShare: labelShare\n    });\n    this.getTotalEarnings(artistShare);\n  }\n\n  getPublisherShare() {\n    //console.log(\"avgPubPayout: \" + avgPubPayout)\n    let pubGrossRevenue = avgPubPayout * this.state.streamNumber;\n    let pubPerformanceRevenue = pubGrossRevenue * .5;\n    let pubMechanicalRevenue = pubGrossRevenue * .5;\n    let pubPROAdminFee = pubPerformanceRevenue * .165;\n    let pubMechanicalAdminFee = pubMechanicalRevenue * .15;\n    let pubMechanicalRecordFee = (pubMechanicalRevenue - pubMechanicalAdminFee) * .3;\n    let publisherPercentage;\n\n    if (this.state.publishingDealSelected === \"Full/Traditional\") {\n      publisherPercentage = 1.0;\n      this.setState({\n        publisherShare: (pubPerformanceRevenue - pubPROAdminFee) * .5 * publisherPercentage\n      });\n      this.setState({\n        writerEarnings: (pubPerformanceRevenue - pubPROAdminFee) * .5 + (pubPerformanceRevenue - pubPROAdminFee) * .5 * (1 - publisherPercentage) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))\n      });\n    } else if (this.state.publishingDealSelected === \"Co-Publishing\") {\n      publisherPercentage = 0.5;\n      this.setState({\n        publisherShare: (pubPerformanceRevenue - pubPROAdminFee) * .5 * publisherPercentage\n      });\n      this.setState({\n        writerEarnings: (pubPerformanceRevenue - pubPROAdminFee) * .5 + (pubPerformanceRevenue - pubPROAdminFee) * .5 * (1 - publisherPercentage) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))\n      });\n    } else if (this.state.publishingDealSelected === \"Admin Deal\") {\n      publisherPercentage = 0.1;\n      this.setState({\n        publisherShare: (pubPerformanceRevenue - pubPROAdminFee) * .5 * publisherPercentage\n      });\n      this.setState({\n        writerEarnings: (pubPerformanceRevenue - pubPROAdminFee) * .5 + (pubPerformanceRevenue - pubPROAdminFee) * .5 * (1 - publisherPercentage) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))\n      });\n    } else if (this.state.publishingDealSelected === \"No Deal\") {\n      publisherPercentage = 0.0;\n      this.setState({\n        publisherShare: (pubPerformanceRevenue - pubPROAdminFee) * .5 * publisherPercentage\n      });\n      this.setState({\n        writerEarnings: (pubPerformanceRevenue - pubPROAdminFee) * .5 + (pubPerformanceRevenue - pubPROAdminFee) * .5 * (1 - publisherPercentage) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))\n      });\n    }\n  }\n\n  weightedAverageOfSelected() {\n    let sum = 0.0;\n\n    for (let i = 0; i < this.state.providers.length; i++) {\n      if (this.state.providers[i].includeInCalculations) {\n        sum += this.state.providers[i].payoutPerStream * this.state.providers[i].marketShareStreams;\n      }\n    }\n\n    let sumOfWeights = 0.0;\n\n    for (let i = 0; i < this.state.providers.length; i++) {\n      sumOfWeights += this.state.providers[i].marketShareStreams;\n    }\n\n    console.log(sum / sumOfWeights);\n    return sum / sumOfWeights;\n  }\n\n  getTotalEarnings(artistShare) {\n    if (this.state.role === \"both\") {\n      this.setState({\n        totalEarnings: artistShare + parseFloat(this.state.writerEarnings)\n      });\n    } else if (this.state.role === \"artist\") {\n      this.setState({\n        totalEarnings: artistShare\n      });\n    } else if (this.state.role === \"writer\") {\n      this.setState({\n        totalEarnings: this.state.writerEarnings\n      });\n    }\n  }\n\n}\n\nexport default CalcPage;","map":{"version":3,"sources":["/Users/samvincent/Desktop/MusicStreamingCalculator/src/CalcPage.js"],"names":["React","SmallText","TextButton","ce","createElement","avgPubPayout","spotify","id","name","payoutPerStream","marketShareStreams","marketShareDollars","includeInCalculations","apple","youtube","amazon","google","pandora","deezer","amazonDig","tidal","others","CalcPage","Component","constructor","props","myRef","createRef","state","providers","streamNumber","role","recordDeal","publishDeal","sliderValue","recordDealSelected","publishingDealSelected","advance","costs","grossRev","totRecoupe","publisherShare","writerEarnings","totalEarnings","componentDidMount","console","log","buildRecordDealSelect","handleRoleButton","buildPublishingDealSelect","setSliderValue","testMap","setInitialStates","render","ref","className","type","placeholder","onChange","e","changeStreams","onClick","handleRecDealSelect","map","deal","key","handlePublishingDealSelect","min","max","updateSlider","updateAdvance","updateCosts","checked","provider","toggleMe","value","setState","calculate","target","val","fullTrad","coPublishing","adminDeal","noDeal","deals","which","royalty","netProfit","distributionPercent","labelServices","rls","buildDspsArr","dsps","index","getPublisherShare","artistShare","labelShare","totalMoneyToRecoupe","parseFloat","grossRevenue","weightedAverageOfSelected","profit","getTotalEarnings","pubGrossRevenue","pubPerformanceRevenue","pubMechanicalRevenue","pubPROAdminFee","pubMechanicalAdminFee","pubMechanicalRecordFee","publisherPercentage","sum","i","length","sumOfWeights"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport SmallText from './components/SmallText.js';\nimport TextButton from './components/TextButton.js';\n\n\n\nconst ce = React.createElement;\n\n//average / approx payout for publishing for stream\nconst avgPubPayout = 0.0007174565191\n\n        //handling dsps\n        let spotify = {\n          id: 0,\n          name: \"Spotify\",\n          payoutPerStream: 0.00331,\n          marketShareStreams: .2922,\n            marketShareDollars: .4893,\n            includeInCalculations: true\n        };\n        let apple = {\n          id: 1,\n          name: \"Apple Music\",\n          payoutPerStream: 0.00495,\n          marketShareStreams: .0995,\n            marketShareDollars: .2497,\n            includeInCalculations: true\n        };\n        let youtube = {\n          id: 2,\n          name: \"Youtube Content ld\",\n          payoutPerStream: 0.00028,\n          marketShareStreams: .4858,\n            marketShareDollars: .0699,\n            includeInCalculations: true\n        };\n        let amazon = {\n          id: 3,\n          name: \"Amazon Unlimited\",\n          payoutPerStream: 0.01175,\n          marketShareStreams: .0068,\n            marketShareDollars: .0404,\n            includeInCalculations: true\n        };\n        let google = {\n          id: 4,\n          name: \"Google Play\",\n          payoutPerStream: 0.00543,\n          marketShareStreams: .0112,\n            marketShareDollars: .0308,\n            includeInCalculations: true\n        };\n        let pandora = {\n          id: 5,\n          name: \"Pandora\",\n          payoutPerStream: 0.00155,\n          marketShareStreams: .0386,\n            marketShareDollars: .0303,\n            includeInCalculations: true\n        };\n        let deezer = {\n          id: 6,\n          name: \"Deezer\",\n          payoutPerStream: 0.00567,\n          marketShareStreams: .0091,\n            marketShareDollars: .026,\n            includeInCalculations: true\n        };\n        let amazonDig = {\n          id: 7,\n          name: \"Amazon Digital Services\",\n          payoutPerStream: 0.00395,\n          marketShareStreams: .0095,\n            marketShareDollars: .019,\n            includeInCalculations: true\n        };\n        let tidal = {\n          id: 8,\n          name: \"TIDAL\",\n          payoutPerStream: 0.00927,\n          marketShareStreams: 0.0021,\n            marketShareDollars: 0.0098,\n            includeInCalculations: true\n        };\n        let others = {\n          id: 9,\n          name: \"Napster / Rhapsody\",\n          payoutPerStream: 0.0111,\n          marketShareStreams: 0.0014,\n            marketShareDollars: 0.0080,\n            includeInCalculations: true\n        };\n\n\nclass CalcPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n\n        this.state = {\n            providers: [spotify, apple, youtube, amazon, google, pandora, deezer, amazonDig, tidal, others],\n            streamNumber: null,\n            role: null,\n            recordDeal: [],\n            publishDeal: [],\n            sliderValue: 50,\n            recordDealSelected: null,\n            publishingDealSelected: null,\n            advance: 0,\n            costs: 0,\n            grossRev: 0,\n            totRecoupe: 0,\n            publisherShare: 0,\n            writerEarnings: 0,\n            totalEarnings: 0\n        };\n\n    }\n\n    componentDidMount() {\n        console.log(\"mounted\");\n        this.buildRecordDealSelect();\n        this.handleRoleButton(\"Writer & Artist\");\n        this.buildPublishingDealSelect();\n        this.setSliderValue(50);\n        this.testMap();\n        //this.buildDspsArr();\n        this.setInitialStates();\n    }\n\n\n\n    render() {\n      return ce('div', {ref: 'this.myRef'},\n        ce('h2', {className: \"font\"}, 'Welcome to the Revenue Calculator'),\n            ce('input', {id: \"estStreams\", type: \"text\", placeholder: \"Enter Est. Streams\", onChange: e => this.changeStreams(e)}),\n            ce('br'),\n            ce('text', null, 'Role: '),\n            /*ce('select', {onChange: e => this.handleRoleSelect(e)},\n                this.state.roles.map(role => ce('option', {key: role.id}, role.name))\n                ),*/\n            ce('TextButton', {onClick: e => this.handleRoleButton(\"artist\")}, 'Artist Only'),\n            ce('button', {onClick: e => this.handleRoleButton(\"writer\")}, 'Writer Only'),\n            ce('button', {onClick: e => this.handleRoleButton(\"both\")}, 'Writer & Artist'),\n            ce('br'),\n            ce('text', null, 'Record Deal Type: '),\n            ce('select', {onChange: e => this.handleRecDealSelect(e)},\n                this.state.recordDeal.map(deal => ce('option', {key: deal.id}, deal.name))\n                ),\n            ce('br'),\n            ce('text', null, 'Publishing Deal Type: '),\n            ce('select', {onChange: e => this.handlePublishingDealSelect(e)},\n                this.state.publishDeal.map(deal => ce('option', {key: deal.id}, deal.name))\n                ),\n            ce('br'),\n            ce('text', null, 'Deal Split: '),\n            ce('input', {type: 'range', ref: 'sliderRef', min: '1', max: '100', id: 'splitSlider', onChange: e => this.updateSlider(e)}),\n            ce('text', null, 'Guaranteed Income: '),\n            ce('input', {id: \"fromAdvance\", placeholder: \"From Advance\", onChange: e => this.updateAdvance(e)}),\n            ce('br'),\n            ce('text', null, 'Costs: '),\n            ce('input', {placeholder: 'Costs', onChange: e => this.updateCosts(e)}),\n            ce('br'),\n            ce('text', null, 'Recoupable: '),\n            ce('input', {type: 'checkbox', checked: 'true'}),\n            ce('br'),\n            ce('text', null, 'DSPs'),\n            ce('br'),\n            ce('table', {id: 'dspTable'}, \n              ce('thead', null, ce('tr', null, ce('th', null, \"Platform\"), ce('th', null, \"Include\"))),\n              ce('tbody', null, this.state.providers.map(provider => ce('tr', null, ce('td', null, ce('input', {placeholder: provider.name})), ce('td', null, ce('input', {type: 'checkbox', checked: provider.includeInCalculations, onChange: e => this.toggleMe(provider.id)})))))\n            ),\n            ce('br'),\n            //ce('button', {onClick: e => this.calculate()}, 'Calculate'),\n            //ce('br'),\n            ce('text', null, 'Total Revenue: '),\n            ce('br'),\n            ce('text', null, 'Gross Revenue: '),\n            ce('input', {value: this.state.grossRev}),\n            ce('br'),\n            ce('text', null, 'Total Money Needed to Recoupe: '),\n            ce('input', {value: 0}),\n            ce('br'),\n            ce('text', null, 'Unrecouped: '),\n            ce('br'),\n            ce('text', null, 'Label Earnings: '),\n            ce('input', {value: this.state.publisherShare}),\n            ce('text', null, 'Writer Earnings: '),\n            ce('input', {value: this.state.writerEarnings}),\n            ce('br'),\n            ce('text', null, 'TOTAL EARNINGS: '),\n            ce('input', {value: this.state.totalEarnings}),\n            ce('br')\n            \n        )\n\n    }\n\n\n    testMap() {\n      this.state.providers.map(provider => console.log(provider.name));\n      //this.state.providers.map(provider => ce('tr', null, ce('td', null, ce('text', null, provider.name))), ce('tr', null, ce('td', null, ce('input', {type: 'checkbox', checked: provider.includeInCalculations, onClick: e => this.toggleMe(provider.id)}))))\n    }\n\n    setInitialStates() {\n\n      this.setState({streamNumber: 1000000000,role: \"Writer & Artist\", recordDealSelected: \"Royalty\", publishingDealSelected: \"Full/Traditional\", advance: 0, costs: 0, grossRev: 0, publisherShare: 0, writerEarnings: 0, totalEarnings: 0});\n\n      console.log(this.state.providers)\n      this.calculate();\n    }\n\n    changeStreams(e) {\n        console.log(\"changed streams to: \" + e.target.value);\n        this.setState({streamNumber: e.target.value});\n        this.calculate();\n    }\n\n    updateAdvance(e) {\n      console.log(\"changed advance to: \" + e.target.value);\n      this.setState({advance: e.target.value});\n      this.calculate();\n    }\n\n    updateCosts(e) {\n        console.log(\"changed costs to: \" + e.target.value);\n        this.setState({costs: e.target.value});\n        this.calculate();\n    }\n\n    setSliderValue(val) {\n        this.setState( {sliderValue: val});\n        this.calculate();\n    }\n\n    \n\n    updateSlider(e) {\n        console.log(e.target.value)\n        //val = document.getElementById(\"splitSlider\").value()\n        this.setState( {sliderValue: e.target.value})\n        this.calculate();\n    }\n\n    buildPublishingDealSelect() {\n        let fullTrad = {\n            id: 0,\n            name: \"Full/Traditional\"\n        }\n        let coPublishing = {\n            id: 1,\n            name: \"Co-Publishing\"\n        }\n        let adminDeal = {\n            id: 2,\n            name: \"Admin Deal\"\n        }\n        let noDeal = {\n            id: 3,\n            name: \"No Deal\"\n        }\n        let deals = [fullTrad, coPublishing, adminDeal, noDeal]\n        this.setState( {publishDeal: deals})\n    }\n\n    handlePublishingDealSelect(e) {\n        console.log(e.target.value);\n        this.setState({publishingDealSelected: e.target.value});\n        this.calculate();\n    }\n\n\n    handleRoleButton(which) {\n        console.log(which);\n        this.setState({role: which})\n        this.calculate();\n    }\n\n   // handleRecDealSelect(e)\n\n    handleRecDealSelect(e) {\n        //console.log(\"selecting Roles\");\n        console.log(e.target.value);\n        if(e.target.value === \"Royalty\") {\n          this.setState({sliderValue: 20});\n        } else if (e.target.value === \"Net Profit\") {\n          this.setState({sliderValue: 50});\n        } else if (e.target.value === \"Distribution Percent\") {\n          this.setState({sliderValue: 70});\n        } else if (e.target.value === \"Label Services\") {\n          this.setState({sliderValue: 80});\n        }\n        //document.getElementById(\"splitSlider\").value = this.state.sliderValue;\n        //console.log(this.myRef.current);\n        //React.findDOMNode(this.refs.sliderRef).value = this.state.sliderValue;\n        console.log(\"sliderValue: \" + this.state.sliderValue);\n        this.setState({recordDealSelected: e.target.value})\n        this.calculate();\n    }\n\n    buildRecordDealSelect() {\n        //console.log(\"Roles!\");\n        let royalty = {\n            id: 0,\n            name: \"Royalty\"\n        };\n        let netProfit = {\n            id: 1,\n            name: \"Net Profit\"\n        };\n        let distributionPercent = {\n            id: 2,\n            name: \"Distribution Percent\"\n        };\n        let labelServices = {\n            id: 3,\n            name: \"Label Services\"\n        }\n\n        let rls = [royalty, netProfit, distributionPercent, labelServices];\n        this.setState( {recordDeal: rls} );\n    }\n\n    ///////// DSP Stuff ///////\n\n    buildDspsArr() {\n\n        //handling dsps\n        let spotify = {\n          id: 0,\n          name: \"Spotify\",\n          payoutPerStream: 0.00331,\n          marketShareStreams: .2922,\n            marketShareDollars: .4893,\n            includeInCalculations: true\n        };\n        let apple = {\n          id: 1,\n          name: \"Apple Music\",\n          payoutPerStream: 0.00495,\n          marketShareStreams: .0995,\n            marketShareDollars: .2497,\n            includeInCalculations: true\n        };\n        let youtube = {\n          id: 2,\n          name: \"Youtube Content ld\",\n          payoutPerStream: 0.00028,\n          marketShareStreams: .4858,\n            marketShareDollars: .0699,\n            includeInCalculations: true\n        };\n        let amazon = {\n          id: 3,\n          name: \"Amazon Unlimited\",\n          payoutPerStream: 0.01175,\n          marketShareStreams: .0068,\n            marketShareDollars: .0404,\n            includeInCalculations: true\n        };\n        let google = {\n          id: 4,\n          name: \"Google Play\",\n          payoutPerStream: 0.00543,\n          marketShareStreams: .0112,\n            marketShareDollars: .0308,\n            includeInCalculations: true\n        };\n        let pandora = {\n          id: 5,\n          name: \"Pandora\",\n          payoutPerStream: 0.00155,\n          marketShareStreams: .0386,\n            marketShareDollars: .0303,\n            includeInCalculations: true\n        };\n        let deezer = {\n          id: 6,\n          name: \"Deezer\",\n          payoutPerStream: 0.00567,\n          marketShareStreams: .0091,\n            marketShareDollars: .026,\n            includeInCalculations: true\n        };\n        let amazonDig = {\n          id: 7,\n          name: \"Amazon Digital Services\",\n          payoutPerStream: 0.00395,\n          marketShareStreams: .0095,\n            marketShareDollars: .019,\n            includeInCalculations: true\n        };\n        let tidal = {\n          id: 8,\n          name: \"TIDAL\",\n          payoutPerStream: 0.00927,\n          marketShareStreams: 0.0021,\n            marketShareDollars: 0.0098,\n            includeInCalculations: true\n        };\n        let others = {\n          id: 9,\n          name: \"Napster / Rhapsody\",\n          payoutPerStream: 0.0111,\n          marketShareStreams: 0.0014,\n            marketShareDollars: 0.0080,\n            includeInCalculations: true\n        };\n        let dsps = [spotify, apple, youtube, amazon, google, pandora, deezer, amazonDig, tidal, others];\n        console.log(dsps)\n\n        this.setState( {providers: dsps} );\n\n    }\n\n    toggleMe(index) {\n      this.state.providers[index].includeInCalculations = !this.state.providers[index].includeInCalculations;\n      //console.log(dsps[index].name);\n      //console.log(dsps[index].includeInCalculations);\n      this.calculate();\n    }\n\n    /// MATH STUFF /////\n    calculate() {\n        this.getPublisherShare();\n\n        console.log(\"calculating\");\n        let artistShare;\n        let labelShare;\n        // Why are there double semi-colons?\n                   //prob a typo\n        let totalMoneyToRecoupe = parseFloat(this.state.advance) + parseFloat(this.state.costs);\n        console.log(totalMoneyToRecoupe)\n        let grossRevenue= this.state.streamNumber * this.weightedAverageOfSelected();\n        console.log(\"grossRevenue: \" + grossRevenue)\n        //checkDSPs();\n        //console.log(estStreams.value * avgPayout);\n        //console.log(estStreams.value * weightedAverageOfSelected());\n        if (this.state.recordDealSelected === \"Royalty\") {\n            // Artist Split\n            if((grossRevenue * (parseFloat(this.state.sliderValue)/100)) <= totalMoneyToRecoupe){\n              console.log(\"unrecouped\");\n              artistShare = 0;\n            } else {\n              artistShare = (grossRevenue * (parseFloat(this.state.sliderValue)/100)) - totalMoneyToRecoupe;\n            }\n            labelShare = grossRevenue * (1-(parseFloat(this.state.sliderValue)/100));\n\n        } else if (this.state.recordDealSelected === \"Net Profit\" || this.state.recordDealSelected === \"Distribution Percent\" || this.state.recordDealSelected === \"Distribution Fee\") {\n            //net profit deals are generally guaranteed 50/50, distribution are generally 70/30 artist/label\n            let profit = (grossRevenue - this.state.costs);\n            // Artist Split\n            if(((profit * (parseFloat(this.state.sliderValue)/100)) - parseFloat(this.state.advance)) < 0){\n              console.log(\"unrecouped\");\n              artistShare = 0;\n            } else {\n              artistShare = (profit * (parseFloat(this.state.sliderValue)/100)) - parseFloat(this.state.advance);\n            }\n            // Label Split Net Profit, Distributions\n            if(this.state.recordDealSelected === \"Net Profit\" || this.state.recordDealSelected === \"Distribution Percent\") {\n                if(profit < 0){\n                    labelShare = 0;\n                } else {\n                    labelShare = (profit * (1-(parseFloat(this.state.sliderValue)/100)));\n                }\n            } else labelShare = grossRevenue - artistShare;\n\n            /* Nik Label Share for Net Profit, %Distribution Deals\n            if(profit < 0){\n              labelShare = 0;\n            } else {\n              labelShare = (profit * (1-(parseFloat(artistDeal.value)/100)));\n            }\n            */\n\n        } else if (this.state.recordDealSelected === \"Label Services\") {\n            // Artist Split\n            if((grossRevenue * (parseFloat(this.state.sliderValue)/100)) <= totalMoneyToRecoupe){\n              console.log(\"unrecouped\");\n              artistShare = 0;\n            } else {\n              artistShare = (grossRevenue * (parseFloat(this.state.sliderValue)/100)) - totalMoneyToRecoupe;\n            }\n            labelShare = grossRevenue * (1-(parseFloat(this.state.sliderValue)/100)) + this.state.costs;//extra menu items would be factored into costs\n        }\n\n        console.log(\"grossRevenue: \" + grossRevenue)\n        console.log(\"totRecoupe: \" + totalMoneyToRecoupe)\n        console.log(\"writerEarnings: \" + artistShare)\n        console.log(\"publisherShare: \" + labelShare)\n\n        this.setState({grossRev: grossRevenue, totRecoupe: totalMoneyToRecoupe, writerEarnings: artistShare, publisherShare: labelShare});\n\n        this.getTotalEarnings(artistShare);\n\n    }\n    getPublisherShare() {\n        //console.log(\"avgPubPayout: \" + avgPubPayout)\n\n        let pubGrossRevenue = avgPubPayout * this.state.streamNumber;\n        let pubPerformanceRevenue = pubGrossRevenue * .5;\n        let pubMechanicalRevenue = pubGrossRevenue * .5;\n        let pubPROAdminFee = pubPerformanceRevenue * .165;\n        let pubMechanicalAdminFee = pubMechanicalRevenue * .15;\n        let pubMechanicalRecordFee = (pubMechanicalRevenue - pubMechanicalAdminFee) * .3;\n\n        let publisherPercentage;\n\n        if(this.state.publishingDealSelected === \"Full/Traditional\") {\n            publisherPercentage = 1.0;\n            this.setState({publisherShare: ((pubPerformanceRevenue - pubPROAdminFee) * .5) * publisherPercentage});\n            this.setState({writerEarnings: ((pubPerformanceRevenue - pubPROAdminFee) * .5) + (((pubPerformanceRevenue - pubPROAdminFee) * .5) * (1- publisherPercentage)) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))});\n        } else if(this.state.publishingDealSelected === \"Co-Publishing\") {\n            publisherPercentage = 0.5;\n            this.setState({publisherShare: ((pubPerformanceRevenue - pubPROAdminFee) * .5) * publisherPercentage});\n            this.setState({writerEarnings: ((pubPerformanceRevenue - pubPROAdminFee) * .5) + (((pubPerformanceRevenue - pubPROAdminFee) * .5) * (1- publisherPercentage)) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))});\n        } else if(this.state.publishingDealSelected === \"Admin Deal\") {\n            publisherPercentage = 0.1;\n            this.setState({publisherShare: ((pubPerformanceRevenue - pubPROAdminFee) * .5) * publisherPercentage});\n            this.setState({writerEarnings: ((pubPerformanceRevenue - pubPROAdminFee) * .5) + (((pubPerformanceRevenue - pubPROAdminFee) * .5) * (1- publisherPercentage)) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))});\n        } else if(this.state.publishingDealSelected === \"No Deal\") {\n            publisherPercentage = 0.0;\n            this.setState({publisherShare: ((pubPerformanceRevenue - pubPROAdminFee) * .5) * publisherPercentage});\n            this.setState({writerEarnings: ((pubPerformanceRevenue - pubPROAdminFee) * .5) + (((pubPerformanceRevenue - pubPROAdminFee) * .5) * (1- publisherPercentage)) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))});\n        }\n    }\n\n    weightedAverageOfSelected() {\n        let sum = 0.0;\n        for(let i=0; i < this.state.providers.length; i++) {\n          if(this.state.providers[i].includeInCalculations) {\n                sum += (this.state.providers[i].payoutPerStream * this.state.providers[i].marketShareStreams)\n            }\n        }\n        let sumOfWeights = 0.0;\n        for(let i=0;i < this.state.providers.length; i++) {\n            sumOfWeights += this.state.providers[i].marketShareStreams\n        }\n        console.log(sum/sumOfWeights);\n        return sum/sumOfWeights;\n    }\n\n\n\n    getTotalEarnings(artistShare) {\n        if(this.state.role === \"both\") {\n            this.setState({totalEarnings: artistShare + parseFloat(this.state.writerEarnings)});\n        } else if(this.state.role === \"artist\") {\n            this.setState({totalEarnings: artistShare});\n        } else if(this.state.role === \"writer\") {\n            this.setState({totalEarnings: this.state.writerEarnings});\n        }\n    }\n\n\n}\n\n\nexport default CalcPage;\n"]},"metadata":{},"sourceType":"module"}