{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/samvincent/Desktop/MusicStreamingCalculator/src/CalcPage.js\";\nimport React from 'react';\nimport './App.css';\nimport SmallText from './components/SmallText.js';\nimport TextButton from './components/TextButton.js';\nimport TabGroup from './components/ButtonGroup.js';\nimport SingleDropDown from './components/SingleDropDown.js';\nimport NumberInput from './components/NumberInput.js';\nimport DspButton from './components/DspButton.js';\nconst labelDealOptions = [{\n  value: 'royalty',\n  label: 'Royalty'\n}, {\n  value: 'netProfit',\n  label: 'Net Profit'\n}, {\n  value: 'distributionPercent',\n  label: 'Distribution (%)'\n}, {\n  value: 'distributionFee',\n  label: 'Distribution (fee)'\n}, {\n  value: 'labelServices',\n  label: 'Label Services'\n}];\nconst pubDealOptions = [{\n  value: 'Full/Traditional',\n  label: 'Full/Traditional'\n}, {\n  value: 'Co-Publishing',\n  label: 'Co-publising'\n}, {\n  value: 'Admin',\n  label: 'Admin'\n}, {\n  value: 'No Deal',\n  label: 'No Deal'\n}];\nconst marketingSplitOptions = [{\n  value: 0.0,\n  label: '0%'\n}, {\n  value: 0.5,\n  label: '50%'\n}, {\n  value: 1.0,\n  label: '100%'\n}];\nconst labelServicesOptions = [{\n  value: 'steamDistribution',\n  label: 'Steam Distribution'\n}, {\n  value: 'avertising',\n  label: 'Avertising'\n}, {\n  value: 'analytics',\n  label: 'Analytics'\n}, {\n  value: 'royaltyAccounting',\n  label: 'Royalty Accounting'\n}, {\n  value: 'splitPayments',\n  label: 'Split Payments'\n}];\nconst roleTypes = [\"Recording Artist Only\", \"Writer Only\", \"Both\"];\nconst ce = React.createElement; //average / approx payout for publishing for stream\n\nconst avgPubPayout = 0.0007174565191; //handling dsps\n\nlet spotify = {\n  id: 0,\n  name: \"Spotify\",\n  payoutPerStream: 0.00331,\n  marketShareStreams: .2922,\n  marketShareDollars: .4893,\n  includeInCalculations: true\n};\nlet apple = {\n  id: 1,\n  name: \"Apple Music\",\n  payoutPerStream: 0.00495,\n  marketShareStreams: .0995,\n  marketShareDollars: .2497,\n  includeInCalculations: true\n};\nlet youtube = {\n  id: 2,\n  name: \"Youtube Content ld\",\n  payoutPerStream: 0.00028,\n  marketShareStreams: .4858,\n  marketShareDollars: .0699,\n  includeInCalculations: true\n};\nlet amazon = {\n  id: 3,\n  name: \"Amazon Unlimited\",\n  payoutPerStream: 0.01175,\n  marketShareStreams: .0068,\n  marketShareDollars: .0404,\n  includeInCalculations: true\n};\nlet google = {\n  id: 4,\n  name: \"Google Play\",\n  payoutPerStream: 0.00543,\n  marketShareStreams: .0112,\n  marketShareDollars: .0308,\n  includeInCalculations: true\n};\nlet pandora = {\n  id: 5,\n  name: \"Pandora\",\n  payoutPerStream: 0.00155,\n  marketShareStreams: .0386,\n  marketShareDollars: .0303,\n  includeInCalculations: true\n};\nlet deezer = {\n  id: 6,\n  name: \"Deezer\",\n  payoutPerStream: 0.00567,\n  marketShareStreams: .0091,\n  marketShareDollars: .026,\n  includeInCalculations: true\n};\nlet amazonDig = {\n  id: 7,\n  name: \"Amazon Digital Services\",\n  payoutPerStream: 0.00395,\n  marketShareStreams: .0095,\n  marketShareDollars: .019,\n  includeInCalculations: true\n};\nlet tidal = {\n  id: 8,\n  name: \"TIDAL\",\n  payoutPerStream: 0.00927,\n  marketShareStreams: 0.0021,\n  marketShareDollars: 0.0098,\n  includeInCalculations: true\n};\nlet others = {\n  id: 9,\n  name: \"Napster / Rhapsody\",\n  payoutPerStream: 0.0111,\n  marketShareStreams: 0.0014,\n  marketShareDollars: 0.0080,\n  includeInCalculations: true\n}; //console.log(act)\n\nclass CalcPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callbackFunction = childData => {\n      console.log(\"setting state: \" + childData);\n      this.setState({\n        recordDealSelected: childData\n      });\n    };\n\n    this.dealTypeRef = /*#__PURE__*/React.createRef();\n    this.pubTypeRef = /*#__PURE__*/React.createRef();\n    this.advanceRef = /*#__PURE__*/React.createRef();\n    this.costsRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      providers: [spotify, apple, youtube, amazon, google, pandora, deezer, amazonDig, tidal, others],\n      streamNumber: null,\n      role: null,\n      recordDeal: [],\n      publishDeal: [],\n      sliderValue: 50,\n      recordDealSelected: null,\n      publishingDealSelected: null,\n      advance: 0,\n      costs: 0,\n      grossRev: 0,\n      totRecoupe: 0,\n      publisherShare: 0,\n      writerEarnings: 0,\n      totalEarnings: 0\n    };\n  }\n\n  componentDidMount() {\n    //console.log(\"mounted\");\n    this.buildRecordDealSelect();\n    this.handleRoleButton(\"Writer & Artist\");\n    this.buildPublishingDealSelect();\n    this.setSliderValue(50);\n    this.testMap(); //this.buildDspsArr();\n\n    this.setInitialStates();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Welcome to the revenue calculator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Est Streams\",\n        onChange: e => this.changeStreams(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n        text: \"Role: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(TabGroup //parentCallBack = {this.callbackFunction}\n      //onChange = {e => this.handleRoleButton(\"test\"/*active*/)}\n      , {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", this.state.role, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n        text: \"Record Deal Type: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SingleDropDown, {\n        ref: this.dealTypeRef,\n        options: labelDealOptions,\n        onChange: e => this.getStateRecDeal(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n        text: \"Publishing Deal Type: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SingleDropDown, {\n        ref: this.pubTypeRef,\n        options: pubDealOptions,\n        onChange: e => this.getStatePubDeal(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n        text: \"Deal Split: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n        text: \"Guaranteed Income: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(NumberInput, {\n        ref: this.advanceRef,\n        id: \"numInput\",\n        label: \"From Advance\",\n        locked: false,\n        active: false,\n        onChange: e => this.getStateAdvance(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n        text: \"Costs: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(NumberInput, {\n        ref: this.costsRef,\n        id: \"costInput\",\n        label: \"Costs\",\n        locked: false,\n        active: false,\n        onChange: e => this.getStateCosts(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n        text: \"Recoupable: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n        text: \"DSPs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(DspButton, {\n          text: this.state.providers[0].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 12\n    }, this);\n    /*<!--\n    return ce('div', {ref: 'this.myRef'},\n      ce('h2', {className: \"font\"}, 'Welcome to the Revenue Calculator'),\n          ce('input', {id: \"estStreams\", type: \"text\", placeholder: \"Enter Est. Streams\", onChange: e => this.changeStreams(e)}),\n          ce('br'),\n          ce('text', null, 'Role: '),\n          /*ce('select', {onChange: e => this.handleRoleSelect(e)},\n              this.state.roles.map(role => ce('option', {key: role.id}, role.name))\n              ),*/\n\n    /*\n    ce('button', {onClick: e => this.handleRoleButton(\"artist\")}, 'Artist Only'),\n    ce('button', {onClick: e => this.handleRoleButton(\"writer\")}, 'Writer Only'),\n    ce('button', {onClick: e => this.handleRoleButton(\"both\")}, 'Writer & Artist'),\n    ce('br'),\n    ce('text', null, 'Record Deal Type: '),\n    ce('select', {onChange: e => this.handleRecDealSelect(e)},\n    this.state.recordDeal.map(deal => ce('option', {key: deal.id}, deal.name))\n    ),\n    ce('br'),\n    ce('text', null, 'Publishing Deal Type: '),\n    ce('select', {onChange: e => this.handlePublishingDealSelect(e)},\n    this.state.publishDeal.map(deal => ce('option', {key: deal.id}, deal.name))\n    ),\n    ce('br'),\n    ce('text', null, 'Deal Split: '),\n    ce('input', {type: 'range', ref: 'sliderRef', min: '1', max: '100', id: 'splitSlider', onChange: e => this.updateSlider(e)}),\n    ce('text', null, 'Guaranteed Income: '),\n    ce('input', {id: \"fromAdvance\", placeholder: \"From Advance\", onChange: e => this.updateAdvance(e)}),\n    ce('br'),\n    ce('text', null, 'Costs: '),\n    ce('input', {placeholder: 'Costs', onChange: e => this.updateCosts(e)}),\n    ce('br'),\n    ce('text', null, 'Recoupable: '),\n    ce('input', {type: 'checkbox', checked: 'true'}),\n    ce('br'),\n    ce('text', null, 'DSPs'),\n    ce('br'),\n    ce('table', {id: 'dspTable'}, \n    ce('thead', null, ce('tr', null, ce('th', null, \"Platform\"), ce('th', null, \"Include\"))),\n    ce('tbody', null, this.state.providers.map(provider => ce('tr', null, ce('td', null, ce('input', {placeholder: provider.name})), ce('td', null, ce('input', {type: 'checkbox', checked: provider.includeInCalculations, onChange: e => this.toggleMe(provider.id)})))))\n    ),\n    ce('br'),\n    //ce('button', {onClick: e => this.calculate()}, 'Calculate'),\n    //ce('br'),\n    ce('text', null, 'Total Revenue: '),\n    ce('br'),\n    ce('text', null, 'Gross Revenue: '),\n    ce('input', {value: this.state.grossRev}),\n    ce('br'),\n    ce('text', null, 'Total Money Needed to Recoupe: '),\n    ce('input', {value: 0}),\n    ce('br'),\n    ce('text', null, 'Unrecouped: '),\n    ce('br'),\n    ce('text', null, 'Label Earnings: '),\n    ce('input', {value: this.state.publisherShare}),\n    ce('text', null, 'Writer Earnings: '),\n    ce('input', {value: this.state.writerEarnings}),\n    ce('br'),\n    ce('text', null, 'TOTAL EARNINGS: '),\n    ce('input', {value: this.state.totalEarnings}),\n    ce('br')\n     )-->*/\n  }\n\n  getStateCosts() {\n    console.log(this.costsRef.current.state);\n\n    if (this.costsRef.current.state.value != \"\" && parseInt(this.costsRef.current.state.value) != this.state.costs) {\n      const e = parseInt(this.costsRef.current.state.value);\n      this.updateCosts(e);\n    }\n  }\n\n  getStateAdvance() {\n    console.log(this.advanceRef.current.state);\n\n    if (this.advanceRef.current.state.value != \"\" && parseInt(this.advanceRef.current.state.value) != this.state.advance) {\n      const e = parseInt(this.advanceRef.current.state.value);\n      this.updateAdvance(e);\n    }\n  }\n\n  getStatePubDeal() {\n    //console.log(\"getting state rec deal\");\n    if (this.pubTypeRef.current.state.selectedOption != null && this.pubTypeRef.current.state.selectedOption.value != this.state.publishingDealSelected) {\n      //console.log(this.dealTypeRef.current.state.selectedOption.value);\n      const e = this.pubTypeRef.current.state.selectedOption.value;\n      this.handlePublishingDealSelect(e);\n    } //const node = this.dealTypeRef.current;\n    //console.log(\"Node: \" + node);\n\n  }\n\n  getStateRecDeal() {\n    //console.log(\"getting state rec deal\");\n    if (this.dealTypeRef.current.state.selectedOption != null && this.dealTypeRef.current.state.selectedOption.value != this.state.recordDealSelected) {\n      //console.log(this.dealTypeRef.current.state.selectedOption.value);\n      const e = this.dealTypeRef.current.state.selectedOption.value;\n      this.handleRecDealSelect(e);\n    } //const node = this.dealTypeRef.current;\n    //console.log(\"Node: \" + node);\n\n  }\n\n  testMap() {\n    this.state.providers.map(provider => console.log(provider.name)); //this.state.providers.map(provider => ce('tr', null, ce('td', null, ce('text', null, provider.name))), ce('tr', null, ce('td', null, ce('input', {type: 'checkbox', checked: provider.includeInCalculations, onClick: e => this.toggleMe(provider.id)}))))\n  }\n\n  setInitialStates() {\n    this.setState({\n      streamNumber: 1000000000,\n      role: \"Writer & Artist\",\n      recordDealSelected: \"Royalty\",\n      publishingDealSelected: \"Full/Traditional\",\n      advance: 0,\n      costs: 0,\n      grossRev: 0,\n      publisherShare: 0,\n      writerEarnings: 0,\n      totalEarnings: 0\n    });\n    console.log(this.state.providers);\n    this.calculate();\n  }\n\n  changeStreams(e) {\n    console.log(\"changed streams to: \" + e.target.value);\n    this.setState({\n      streamNumber: e.target.value\n    });\n    this.calculate();\n  }\n\n  updateAdvance(e) {\n    console.log(\"changed advance to: \" + e);\n    this.setState({\n      advance: e\n    });\n    this.calculate();\n  }\n\n  updateCosts(e) {\n    console.log(\"changed costs to: \" + e);\n    this.setState({\n      costs: e\n    });\n    this.calculate();\n  }\n\n  setSliderValue(val) {\n    this.setState({\n      sliderValue: val\n    });\n    this.calculate();\n  }\n\n  updateSlider(e) {\n    console.log(e.target.value); //val = document.getElementById(\"splitSlider\").value()\n\n    this.setState({\n      sliderValue: e.target.value\n    });\n    this.calculate();\n  }\n\n  buildPublishingDealSelect() {\n    let fullTrad = {\n      id: 0,\n      name: \"Full/Traditional\"\n    };\n    let coPublishing = {\n      id: 1,\n      name: \"Co-Publishing\"\n    };\n    let adminDeal = {\n      id: 2,\n      name: \"Admin Deal\"\n    };\n    let noDeal = {\n      id: 3,\n      name: \"No Deal\"\n    };\n    let deals = [fullTrad, coPublishing, adminDeal, noDeal];\n    this.setState({\n      publishDeal: deals\n    });\n  }\n\n  handlePublishingDealSelect(e) {\n    console.log(e);\n    this.setState({\n      publishingDealSelected: e\n    });\n    this.calculate();\n  }\n\n  handleRoleButton(which) {\n    console.log(which);\n    this.setState({\n      role: which\n    });\n    this.calculate();\n  } // handleRecDealSelect(e)\n\n\n  handleRecDealSelect(e) {\n    console.log(\"selecting Roles\");\n    console.log(e);\n\n    if (e === \"royalty\") {\n      this.setState({\n        sliderValue: 20\n      });\n    } else if (e === \"netProfit\") {\n      this.setState({\n        sliderValue: 50\n      });\n    } else if (e === \"distributionPercent\") {\n      this.setState({\n        sliderValue: 70\n      });\n    } else if (e === \"labelServices\") {\n      this.setState({\n        sliderValue: 80\n      });\n    } //document.getElementById(\"splitSlider\").value = this.state.sliderValue;\n    //console.log(this.myRef.current);\n    //React.findDOMNode(this.refs.sliderRef).value = this.state.sliderValue;\n\n\n    console.log(\"sliderValue: \" + this.state.sliderValue);\n    this.setState({\n      recordDealSelected: e\n    });\n    this.calculate();\n  }\n\n  buildRecordDealSelect() {\n    //console.log(\"Roles!\");\n    let royalty = {\n      id: 0,\n      name: \"Royalty\"\n    };\n    let netProfit = {\n      id: 1,\n      name: \"Net Profit\"\n    };\n    let distributionPercent = {\n      id: 2,\n      name: \"Distribution Percent\"\n    };\n    let labelServices = {\n      id: 3,\n      name: \"Label Services\"\n    };\n    let rls = [royalty, netProfit, distributionPercent, labelServices];\n    this.setState({\n      recordDeal: rls\n    });\n  } ///////// DSP Stuff ///////\n\n  /*buildDspsArr() {\n       //handling dsps\n      let spotify = {\n        id: 0,\n        name: \"Spotify\",\n        payoutPerStream: 0.00331,\n        marketShareStreams: .2922,\n          marketShareDollars: .4893,\n          includeInCalculations: true\n      };\n      let apple = {\n        id: 1,\n        name: \"Apple Music\",\n        payoutPerStream: 0.00495,\n        marketShareStreams: .0995,\n          marketShareDollars: .2497,\n          includeInCalculations: true\n      };\n      let youtube = {\n        id: 2,\n        name: \"Youtube Content ld\",\n        payoutPerStream: 0.00028,\n        marketShareStreams: .4858,\n          marketShareDollars: .0699,\n          includeInCalculations: true\n      };\n      let amazon = {\n        id: 3,\n        name: \"Amazon Unlimited\",\n        payoutPerStream: 0.01175,\n        marketShareStreams: .0068,\n          marketShareDollars: .0404,\n          includeInCalculations: true\n      };\n      let google = {\n        id: 4,\n        name: \"Google Play\",\n        payoutPerStream: 0.00543,\n        marketShareStreams: .0112,\n          marketShareDollars: .0308,\n          includeInCalculations: true\n      };\n      let pandora = {\n        id: 5,\n        name: \"Pandora\",\n        payoutPerStream: 0.00155,\n        marketShareStreams: .0386,\n          marketShareDollars: .0303,\n          includeInCalculations: true\n      };\n      let deezer = {\n        id: 6,\n        name: \"Deezer\",\n        payoutPerStream: 0.00567,\n        marketShareStreams: .0091,\n          marketShareDollars: .026,\n          includeInCalculations: true\n      };\n      let amazonDig = {\n        id: 7,\n        name: \"Amazon Digital Services\",\n        payoutPerStream: 0.00395,\n        marketShareStreams: .0095,\n          marketShareDollars: .019,\n          includeInCalculations: true\n      };\n      let tidal = {\n        id: 8,\n        name: \"TIDAL\",\n        payoutPerStream: 0.00927,\n        marketShareStreams: 0.0021,\n          marketShareDollars: 0.0098,\n          includeInCalculations: true\n      };\n      let others = {\n        id: 9,\n        name: \"Napster / Rhapsody\",\n        payoutPerStream: 0.0111,\n        marketShareStreams: 0.0014,\n          marketShareDollars: 0.0080,\n          includeInCalculations: true\n      };\n      let dsps = [spotify, apple, youtube, amazon, google, pandora, deezer, amazonDig, tidal, others];\n      console.log(dsps)\n       this.setState( {providers: dsps} );\n   }*/\n\n\n  toggleMe(index) {\n    this.state.providers[index].includeInCalculations = !this.state.providers[index].includeInCalculations; //console.log(dsps[index].name);\n    //console.log(dsps[index].includeInCalculations);\n\n    this.calculate();\n  } /// MATH STUFF /////\n\n\n  calculate() {\n    this.getPublisherShare();\n    console.log(\"calculating\");\n    let artistShare;\n    let labelShare; // Why are there double semi-colons?\n    //prob a typo\n\n    let totalMoneyToRecoupe = parseFloat(this.state.advance) + parseFloat(this.state.costs);\n    console.log(totalMoneyToRecoupe);\n    let grossRevenue = this.state.streamNumber * this.weightedAverageOfSelected();\n    console.log(\"grossRevenue: \" + grossRevenue); //checkDSPs();\n    //console.log(estStreams.value * avgPayout);\n    //console.log(estStreams.value * weightedAverageOfSelected());\n\n    if (this.state.recordDealSelected === \"royalty\") {\n      // Artist Split\n      if (grossRevenue * (parseFloat(this.state.sliderValue) / 100) <= totalMoneyToRecoupe) {\n        console.log(\"unrecouped\");\n        artistShare = 0;\n      } else {\n        artistShare = grossRevenue * (parseFloat(this.state.sliderValue) / 100) - totalMoneyToRecoupe;\n      }\n\n      labelShare = grossRevenue * (1 - parseFloat(this.state.sliderValue) / 100);\n    } else if (this.state.recordDealSelected === \"netProfit\" || this.state.recordDealSelected === \"distributionPercent\" || this.state.recordDealSelected === \"Distribution Fee\") {\n      //net profit deals are generally guaranteed 50/50, distribution are generally 70/30 artist/label\n      let profit = grossRevenue - this.state.costs; // Artist Split\n\n      if (profit * (parseFloat(this.state.sliderValue) / 100) - parseFloat(this.state.advance) < 0) {\n        console.log(\"unrecouped\");\n        artistShare = 0;\n      } else {\n        artistShare = profit * (parseFloat(this.state.sliderValue) / 100) - parseFloat(this.state.advance);\n      } // Label Split Net Profit, Distributions\n\n\n      if (this.state.recordDealSelected === \"netProfit\" || this.state.recordDealSelected === \"distributionPercent\") {\n        if (profit < 0) {\n          labelShare = 0;\n        } else {\n          labelShare = profit * (1 - parseFloat(this.state.sliderValue) / 100);\n        }\n      } else labelShare = grossRevenue - artistShare;\n      /* Nik Label Share for Net Profit, %Distribution Deals\n      if(profit < 0){\n        labelShare = 0;\n      } else {\n        labelShare = (profit * (1-(parseFloat(artistDeal.value)/100)));\n      }\n      */\n\n    } else if (this.state.recordDealSelected === \"labelServices\") {\n      // Artist Split\n      if (grossRevenue * (parseFloat(this.state.sliderValue) / 100) <= totalMoneyToRecoupe) {\n        console.log(\"unrecouped\");\n        artistShare = 0;\n      } else {\n        artistShare = grossRevenue * (parseFloat(this.state.sliderValue) / 100) - totalMoneyToRecoupe;\n      }\n\n      labelShare = grossRevenue * (1 - parseFloat(this.state.sliderValue) / 100) + this.state.costs; //extra menu items would be factored into costs\n    }\n\n    console.log(\"grossRevenue: \" + grossRevenue);\n    console.log(\"totRecoupe: \" + totalMoneyToRecoupe);\n    console.log(\"writerEarnings: \" + artistShare);\n    console.log(\"publisherShare: \" + labelShare);\n    this.setState({\n      grossRev: grossRevenue,\n      totRecoupe: totalMoneyToRecoupe,\n      writerEarnings: artistShare,\n      publisherShare: labelShare\n    });\n    this.getTotalEarnings(artistShare);\n  }\n\n  getPublisherShare() {\n    //console.log(\"avgPubPayout: \" + avgPubPayout)\n    let pubGrossRevenue = avgPubPayout * this.state.streamNumber;\n    let pubPerformanceRevenue = pubGrossRevenue * .5;\n    let pubMechanicalRevenue = pubGrossRevenue * .5;\n    let pubPROAdminFee = pubPerformanceRevenue * .165;\n    let pubMechanicalAdminFee = pubMechanicalRevenue * .15;\n    let pubMechanicalRecordFee = (pubMechanicalRevenue - pubMechanicalAdminFee) * .3;\n    let publisherPercentage;\n\n    if (this.state.publishingDealSelected === \"Full/Traditional\") {\n      publisherPercentage = 1.0;\n      this.setState({\n        publisherShare: (pubPerformanceRevenue - pubPROAdminFee) * .5 * publisherPercentage\n      });\n      this.setState({\n        writerEarnings: (pubPerformanceRevenue - pubPROAdminFee) * .5 + (pubPerformanceRevenue - pubPROAdminFee) * .5 * (1 - publisherPercentage) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))\n      });\n    } else if (this.state.publishingDealSelected === \"Co-Publishing\") {\n      publisherPercentage = 0.5;\n      this.setState({\n        publisherShare: (pubPerformanceRevenue - pubPROAdminFee) * .5 * publisherPercentage\n      });\n      this.setState({\n        writerEarnings: (pubPerformanceRevenue - pubPROAdminFee) * .5 + (pubPerformanceRevenue - pubPROAdminFee) * .5 * (1 - publisherPercentage) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))\n      });\n    } else if (this.state.publishingDealSelected === \"Admin Deal\") {\n      publisherPercentage = 0.1;\n      this.setState({\n        publisherShare: (pubPerformanceRevenue - pubPROAdminFee) * .5 * publisherPercentage\n      });\n      this.setState({\n        writerEarnings: (pubPerformanceRevenue - pubPROAdminFee) * .5 + (pubPerformanceRevenue - pubPROAdminFee) * .5 * (1 - publisherPercentage) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))\n      });\n    } else if (this.state.publishingDealSelected === \"No Deal\") {\n      publisherPercentage = 0.0;\n      this.setState({\n        publisherShare: (pubPerformanceRevenue - pubPROAdminFee) * .5 * publisherPercentage\n      });\n      this.setState({\n        writerEarnings: (pubPerformanceRevenue - pubPROAdminFee) * .5 + (pubPerformanceRevenue - pubPROAdminFee) * .5 * (1 - publisherPercentage) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))\n      });\n    }\n  }\n\n  weightedAverageOfSelected() {\n    let sum = 0.0;\n\n    for (let i = 0; i < this.state.providers.length; i++) {\n      if (this.state.providers[i].includeInCalculations) {\n        sum += this.state.providers[i].payoutPerStream * this.state.providers[i].marketShareStreams;\n      }\n    }\n\n    let sumOfWeights = 0.0;\n\n    for (let i = 0; i < this.state.providers.length; i++) {\n      sumOfWeights += this.state.providers[i].marketShareStreams;\n    }\n\n    console.log(sum / sumOfWeights);\n    return sum / sumOfWeights;\n  }\n\n  getTotalEarnings(artistShare) {\n    if (this.state.role === \"both\") {\n      this.setState({\n        totalEarnings: artistShare + parseFloat(this.state.writerEarnings)\n      });\n    } else if (this.state.role === \"artist\") {\n      this.setState({\n        totalEarnings: artistShare\n      });\n    } else if (this.state.role === \"writer\") {\n      this.setState({\n        totalEarnings: this.state.writerEarnings\n      });\n    }\n  }\n\n}\n\nexport default CalcPage;","map":{"version":3,"sources":["/Users/samvincent/Desktop/MusicStreamingCalculator/src/CalcPage.js"],"names":["React","SmallText","TextButton","TabGroup","SingleDropDown","NumberInput","DspButton","labelDealOptions","value","label","pubDealOptions","marketingSplitOptions","labelServicesOptions","roleTypes","ce","createElement","avgPubPayout","spotify","id","name","payoutPerStream","marketShareStreams","marketShareDollars","includeInCalculations","apple","youtube","amazon","google","pandora","deezer","amazonDig","tidal","others","CalcPage","Component","constructor","props","callbackFunction","childData","console","log","setState","recordDealSelected","dealTypeRef","createRef","pubTypeRef","advanceRef","costsRef","state","providers","streamNumber","role","recordDeal","publishDeal","sliderValue","publishingDealSelected","advance","costs","grossRev","totRecoupe","publisherShare","writerEarnings","totalEarnings","componentDidMount","buildRecordDealSelect","handleRoleButton","buildPublishingDealSelect","setSliderValue","testMap","setInitialStates","render","e","changeStreams","getStateRecDeal","getStatePubDeal","getStateAdvance","getStateCosts","current","parseInt","updateCosts","updateAdvance","selectedOption","handlePublishingDealSelect","handleRecDealSelect","map","provider","calculate","target","val","updateSlider","fullTrad","coPublishing","adminDeal","noDeal","deals","which","royalty","netProfit","distributionPercent","labelServices","rls","toggleMe","index","getPublisherShare","artistShare","labelShare","totalMoneyToRecoupe","parseFloat","grossRevenue","weightedAverageOfSelected","profit","getTotalEarnings","pubGrossRevenue","pubPerformanceRevenue","pubMechanicalRevenue","pubPROAdminFee","pubMechanicalAdminFee","pubMechanicalRecordFee","publisherPercentage","sum","i","length","sumOfWeights"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport SmallText from './components/SmallText.js';\nimport TextButton from './components/TextButton.js';\nimport TabGroup from './components/ButtonGroup.js';\nimport SingleDropDown from './components/SingleDropDown.js';\nimport NumberInput from './components/NumberInput.js';\nimport DspButton from './components/DspButton.js';\n\nconst labelDealOptions = [\n  { value: 'royalty', label: 'Royalty' },\n  { value: 'netProfit', label: 'Net Profit' },\n  { value: 'distributionPercent', label: 'Distribution (%)' },\n  { value: 'distributionFee', label: 'Distribution (fee)' },\n  { value: 'labelServices', label: 'Label Services' }\n]\n\nconst pubDealOptions = [\n  { value: 'Full/Traditional', label: 'Full/Traditional' },\n  { value: 'Co-Publishing', label: 'Co-publising' },\n  { value: 'Admin', label: 'Admin' },\n  { value: 'No Deal', label: 'No Deal' }\n]\n\nconst marketingSplitOptions = [\n  { value: 0.0, label: '0%' },\n  { value: 0.5, label: '50%' },\n  { value: 1.0, label: '100%' }\n]\n\nconst labelServicesOptions = [\n  { value: 'steamDistribution', label: 'Steam Distribution' },\n  { value: 'avertising', label: 'Avertising' },\n  { value: 'analytics', label: 'Analytics' },\n  { value: 'royaltyAccounting', label: 'Royalty Accounting' },\n  { value: 'splitPayments', label: 'Split Payments' },\n]\n\nconst roleTypes = [\"Recording Artist Only\", \"Writer Only\", \"Both\"];\n\nconst ce = React.createElement;\n\n//average / approx payout for publishing for stream\nconst avgPubPayout = 0.0007174565191\n\n        //handling dsps\n        let spotify = {\n          id: 0,\n          name: \"Spotify\",\n          payoutPerStream: 0.00331,\n          marketShareStreams: .2922,\n            marketShareDollars: .4893,\n            includeInCalculations: true\n        };\n        let apple = {\n          id: 1,\n          name: \"Apple Music\",\n          payoutPerStream: 0.00495,\n          marketShareStreams: .0995,\n            marketShareDollars: .2497,\n            includeInCalculations: true\n        };\n        let youtube = {\n          id: 2,\n          name: \"Youtube Content ld\",\n          payoutPerStream: 0.00028,\n          marketShareStreams: .4858,\n            marketShareDollars: .0699,\n            includeInCalculations: true\n        };\n        let amazon = {\n          id: 3,\n          name: \"Amazon Unlimited\",\n          payoutPerStream: 0.01175,\n          marketShareStreams: .0068,\n            marketShareDollars: .0404,\n            includeInCalculations: true\n        };\n        let google = {\n          id: 4,\n          name: \"Google Play\",\n          payoutPerStream: 0.00543,\n          marketShareStreams: .0112,\n            marketShareDollars: .0308,\n            includeInCalculations: true\n        };\n        let pandora = {\n          id: 5,\n          name: \"Pandora\",\n          payoutPerStream: 0.00155,\n          marketShareStreams: .0386,\n            marketShareDollars: .0303,\n            includeInCalculations: true\n        };\n        let deezer = {\n          id: 6,\n          name: \"Deezer\",\n          payoutPerStream: 0.00567,\n          marketShareStreams: .0091,\n            marketShareDollars: .026,\n            includeInCalculations: true\n        };\n        let amazonDig = {\n          id: 7,\n          name: \"Amazon Digital Services\",\n          payoutPerStream: 0.00395,\n          marketShareStreams: .0095,\n            marketShareDollars: .019,\n            includeInCalculations: true\n        };\n        let tidal = {\n          id: 8,\n          name: \"TIDAL\",\n          payoutPerStream: 0.00927,\n          marketShareStreams: 0.0021,\n            marketShareDollars: 0.0098,\n            includeInCalculations: true\n        };\n        let others = {\n          id: 9,\n          name: \"Napster / Rhapsody\",\n          payoutPerStream: 0.0111,\n          marketShareStreams: 0.0014,\n            marketShareDollars: 0.0080,\n            includeInCalculations: true\n        };\n\n//console.log(act)\n\nclass CalcPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.dealTypeRef = React.createRef();\n        this.pubTypeRef = React.createRef();\n        this.advanceRef = React.createRef();\n        this.costsRef = React.createRef();\n\n        this.state = {\n            providers: [spotify, apple, youtube, amazon, google, pandora, deezer, amazonDig, tidal, others],\n            streamNumber: null,\n            role: null,\n            recordDeal: [],\n            publishDeal: [],\n            sliderValue: 50,\n            recordDealSelected: null,\n            publishingDealSelected: null,\n            advance: 0,\n            costs: 0,\n            grossRev: 0,\n            totRecoupe: 0,\n            publisherShare: 0,\n            writerEarnings: 0,\n            totalEarnings: 0\n        };\n\n    }\n\n    callbackFunction = (childData) => {\n      console.log(\"setting state: \" + childData);\n      this.setState({recordDealSelected: childData})\n    }\n\n\n    componentDidMount() {\n        //console.log(\"mounted\");\n        this.buildRecordDealSelect();\n        this.handleRoleButton(\"Writer & Artist\");\n        this.buildPublishingDealSelect();\n        this.setSliderValue(50);\n        this.testMap();\n        //this.buildDspsArr();\n        this.setInitialStates();\n    }\n\n\n    render() {\n      return (\n           <div>\n              <h2>Welcome to the revenue calculator</h2>\n              <input \n                type = \"text\"\n                placeholder = \"Enter Est Streams\"\n                onChange = {e => this.changeStreams(e)}\n              />\n              <br />\n              <SmallText text=\"Role: \"/>\n              <TabGroup\n                 //parentCallBack = {this.callbackFunction}\n                 //onChange = {e => this.handleRoleButton(\"test\"/*active*/)}\n              />\n              <p> {this.state.role} </p>\n              <br />\n              <SmallText text=\"Record Deal Type: \"/>\n              <SingleDropDown ref={this.dealTypeRef}\n                  \n                  options={labelDealOptions}\n                  onChange = {e => this.getStateRecDeal(e)}\n              />\n              <br />\n              <SmallText text=\"Publishing Deal Type: \"/>\n              <SingleDropDown ref={this.pubTypeRef}\n                  options={pubDealOptions}\n                  onChange = {e => this.getStatePubDeal(e)}\n              />\n              <br />\n              <SmallText text=\"Deal Split: \"/>\n\n              <br />\n              <SmallText text=\"Guaranteed Income: \"/>\n              <NumberInput ref={this.advanceRef}\n                id= {\"numInput\"} \n                label = \"From Advance\"\n                locked = {false}\n                active = {false}\n                onChange = {e => this.getStateAdvance(e)}\n              />\n              <br />\n              <SmallText text=\"Costs: \"/>\n              <NumberInput ref={this.costsRef} \n                id = {\"costInput\"}\n                label = \"Costs\"\n                locked = {false}\n                active = {false}\n                onChange = {e => this.getStateCosts(e)}\n              />\n              <br />\n              <SmallText text=\"Recoupable: \"/>\n              <input\n                 type=\"checkbox\"\n              />\n              <br />\n              <SmallText text=\"DSPs\"/>\n              <div>\n                 <DspButton text={this.state.providers[0].name} />\n              </div>\n           </div>\n        );\n\n\n\n      /*<!--\n      return ce('div', {ref: 'this.myRef'},\n        ce('h2', {className: \"font\"}, 'Welcome to the Revenue Calculator'),\n            ce('input', {id: \"estStreams\", type: \"text\", placeholder: \"Enter Est. Streams\", onChange: e => this.changeStreams(e)}),\n            ce('br'),\n            ce('text', null, 'Role: '),\n            /*ce('select', {onChange: e => this.handleRoleSelect(e)},\n                this.state.roles.map(role => ce('option', {key: role.id}, role.name))\n                ),*//*\n            ce('button', {onClick: e => this.handleRoleButton(\"artist\")}, 'Artist Only'),\n            ce('button', {onClick: e => this.handleRoleButton(\"writer\")}, 'Writer Only'),\n            ce('button', {onClick: e => this.handleRoleButton(\"both\")}, 'Writer & Artist'),\n            ce('br'),\n            ce('text', null, 'Record Deal Type: '),\n            ce('select', {onChange: e => this.handleRecDealSelect(e)},\n                this.state.recordDeal.map(deal => ce('option', {key: deal.id}, deal.name))\n                ),\n            ce('br'),\n            ce('text', null, 'Publishing Deal Type: '),\n            ce('select', {onChange: e => this.handlePublishingDealSelect(e)},\n                this.state.publishDeal.map(deal => ce('option', {key: deal.id}, deal.name))\n                ),\n            ce('br'),\n            ce('text', null, 'Deal Split: '),\n            ce('input', {type: 'range', ref: 'sliderRef', min: '1', max: '100', id: 'splitSlider', onChange: e => this.updateSlider(e)}),\n            ce('text', null, 'Guaranteed Income: '),\n            ce('input', {id: \"fromAdvance\", placeholder: \"From Advance\", onChange: e => this.updateAdvance(e)}),\n            ce('br'),\n            ce('text', null, 'Costs: '),\n            ce('input', {placeholder: 'Costs', onChange: e => this.updateCosts(e)}),\n            ce('br'),\n            ce('text', null, 'Recoupable: '),\n            ce('input', {type: 'checkbox', checked: 'true'}),\n            ce('br'),\n            ce('text', null, 'DSPs'),\n            ce('br'),\n            ce('table', {id: 'dspTable'}, \n              ce('thead', null, ce('tr', null, ce('th', null, \"Platform\"), ce('th', null, \"Include\"))),\n              ce('tbody', null, this.state.providers.map(provider => ce('tr', null, ce('td', null, ce('input', {placeholder: provider.name})), ce('td', null, ce('input', {type: 'checkbox', checked: provider.includeInCalculations, onChange: e => this.toggleMe(provider.id)})))))\n            ),\n            ce('br'),\n            //ce('button', {onClick: e => this.calculate()}, 'Calculate'),\n            //ce('br'),\n            ce('text', null, 'Total Revenue: '),\n            ce('br'),\n            ce('text', null, 'Gross Revenue: '),\n            ce('input', {value: this.state.grossRev}),\n            ce('br'),\n            ce('text', null, 'Total Money Needed to Recoupe: '),\n            ce('input', {value: 0}),\n            ce('br'),\n            ce('text', null, 'Unrecouped: '),\n            ce('br'),\n            ce('text', null, 'Label Earnings: '),\n            ce('input', {value: this.state.publisherShare}),\n            ce('text', null, 'Writer Earnings: '),\n            ce('input', {value: this.state.writerEarnings}),\n            ce('br'),\n            ce('text', null, 'TOTAL EARNINGS: '),\n            ce('input', {value: this.state.totalEarnings}),\n            ce('br')\n            \n        )-->*/\n\n    }\n    getStateCosts() {\n      console.log(this.costsRef.current.state)\n      if(this.costsRef.current.state.value != \"\" && parseInt(this.costsRef.current.state.value) != this.state.costs) {\n        const e = parseInt(this.costsRef.current.state.value);\n        this.updateCosts(e);\n      }\n    }\n    getStateAdvance() {\n      console.log(this.advanceRef.current.state)\n      if(this.advanceRef.current.state.value != \"\" && parseInt(this.advanceRef.current.state.value) != this.state.advance) {\n          const e = parseInt(this.advanceRef.current.state.value);\n          this.updateAdvance(e);\n      }\n    }\n    getStatePubDeal() {\n      //console.log(\"getting state rec deal\");\n      if(this.pubTypeRef.current.state.selectedOption != null && this.pubTypeRef.current.state.selectedOption.value != this.state.publishingDealSelected) {\n        //console.log(this.dealTypeRef.current.state.selectedOption.value);\n        const e = this.pubTypeRef.current.state.selectedOption.value;\n        this.handlePublishingDealSelect(e);\n      }\n      //const node = this.dealTypeRef.current;\n      //console.log(\"Node: \" + node);\n    }\n    getStateRecDeal() {\n      //console.log(\"getting state rec deal\");\n      if(this.dealTypeRef.current.state.selectedOption != null && this.dealTypeRef.current.state.selectedOption.value != this.state.recordDealSelected) {\n        //console.log(this.dealTypeRef.current.state.selectedOption.value);\n        const e = this.dealTypeRef.current.state.selectedOption.value;\n        this.handleRecDealSelect(e);\n      }\n      //const node = this.dealTypeRef.current;\n      //console.log(\"Node: \" + node);\n    }\n    testMap() {\n      this.state.providers.map(provider => console.log(provider.name));\n      //this.state.providers.map(provider => ce('tr', null, ce('td', null, ce('text', null, provider.name))), ce('tr', null, ce('td', null, ce('input', {type: 'checkbox', checked: provider.includeInCalculations, onClick: e => this.toggleMe(provider.id)}))))\n    }\n\n    setInitialStates() {\n\n      this.setState({streamNumber: 1000000000,role: \"Writer & Artist\", recordDealSelected: \"Royalty\", publishingDealSelected: \"Full/Traditional\", advance: 0, costs: 0, grossRev: 0, publisherShare: 0, writerEarnings: 0, totalEarnings: 0});\n\n      console.log(this.state.providers)\n      this.calculate();\n    }\n\n    changeStreams(e) {\n        console.log(\"changed streams to: \" + e.target.value);\n        this.setState({streamNumber: e.target.value});\n        this.calculate();\n    }\n\n    updateAdvance(e) {\n      console.log(\"changed advance to: \" + e);\n      this.setState({advance: e});\n      this.calculate();\n    }\n\n    updateCosts(e) {\n        console.log(\"changed costs to: \" + e);\n        this.setState({costs: e});\n        this.calculate();\n    }\n\n    setSliderValue(val) {\n        this.setState( {sliderValue: val});\n        this.calculate();\n    }\n\n    \n\n    updateSlider(e) {\n        console.log(e.target.value)\n        //val = document.getElementById(\"splitSlider\").value()\n        this.setState( {sliderValue: e.target.value})\n        this.calculate();\n    }\n\n    buildPublishingDealSelect() {\n        let fullTrad = {\n            id: 0,\n            name: \"Full/Traditional\"\n        }\n        let coPublishing = {\n            id: 1,\n            name: \"Co-Publishing\"\n        }\n        let adminDeal = {\n            id: 2,\n            name: \"Admin Deal\"\n        }\n        let noDeal = {\n            id: 3,\n            name: \"No Deal\"\n        }\n        let deals = [fullTrad, coPublishing, adminDeal, noDeal]\n        this.setState( {publishDeal: deals})\n    }\n\n    handlePublishingDealSelect(e) {\n        console.log(e);\n        this.setState({publishingDealSelected: e});\n        this.calculate();\n    }\n\n\n    handleRoleButton(which) {\n        console.log(which);\n        this.setState({role: which})\n        this.calculate();\n    }\n\n   // handleRecDealSelect(e)\n\n    handleRecDealSelect(e) {\n        console.log(\"selecting Roles\");\n        console.log(e);\n        if(e === \"royalty\") {\n          this.setState({sliderValue: 20});\n        } else if (e === \"netProfit\") {\n          this.setState({sliderValue: 50});\n        } else if (e === \"distributionPercent\") {\n          this.setState({sliderValue: 70});\n        } else if (e === \"labelServices\") {\n          this.setState({sliderValue: 80});\n        }\n        //document.getElementById(\"splitSlider\").value = this.state.sliderValue;\n        //console.log(this.myRef.current);\n        //React.findDOMNode(this.refs.sliderRef).value = this.state.sliderValue;\n        console.log(\"sliderValue: \" + this.state.sliderValue);\n        this.setState({recordDealSelected: e})\n        this.calculate();\n    }\n\n    buildRecordDealSelect() {\n        //console.log(\"Roles!\");\n        let royalty = {\n            id: 0,\n            name: \"Royalty\"\n        };\n        let netProfit = {\n            id: 1,\n            name: \"Net Profit\"\n        };\n        let distributionPercent = {\n            id: 2,\n            name: \"Distribution Percent\"\n        };\n        let labelServices = {\n            id: 3,\n            name: \"Label Services\"\n        }\n\n        let rls = [royalty, netProfit, distributionPercent, labelServices];\n        this.setState( {recordDeal: rls} );\n    }\n\n    ///////// DSP Stuff ///////\n\n    /*buildDspsArr() {\n\n        //handling dsps\n        let spotify = {\n          id: 0,\n          name: \"Spotify\",\n          payoutPerStream: 0.00331,\n          marketShareStreams: .2922,\n            marketShareDollars: .4893,\n            includeInCalculations: true\n        };\n        let apple = {\n          id: 1,\n          name: \"Apple Music\",\n          payoutPerStream: 0.00495,\n          marketShareStreams: .0995,\n            marketShareDollars: .2497,\n            includeInCalculations: true\n        };\n        let youtube = {\n          id: 2,\n          name: \"Youtube Content ld\",\n          payoutPerStream: 0.00028,\n          marketShareStreams: .4858,\n            marketShareDollars: .0699,\n            includeInCalculations: true\n        };\n        let amazon = {\n          id: 3,\n          name: \"Amazon Unlimited\",\n          payoutPerStream: 0.01175,\n          marketShareStreams: .0068,\n            marketShareDollars: .0404,\n            includeInCalculations: true\n        };\n        let google = {\n          id: 4,\n          name: \"Google Play\",\n          payoutPerStream: 0.00543,\n          marketShareStreams: .0112,\n            marketShareDollars: .0308,\n            includeInCalculations: true\n        };\n        let pandora = {\n          id: 5,\n          name: \"Pandora\",\n          payoutPerStream: 0.00155,\n          marketShareStreams: .0386,\n            marketShareDollars: .0303,\n            includeInCalculations: true\n        };\n        let deezer = {\n          id: 6,\n          name: \"Deezer\",\n          payoutPerStream: 0.00567,\n          marketShareStreams: .0091,\n            marketShareDollars: .026,\n            includeInCalculations: true\n        };\n        let amazonDig = {\n          id: 7,\n          name: \"Amazon Digital Services\",\n          payoutPerStream: 0.00395,\n          marketShareStreams: .0095,\n            marketShareDollars: .019,\n            includeInCalculations: true\n        };\n        let tidal = {\n          id: 8,\n          name: \"TIDAL\",\n          payoutPerStream: 0.00927,\n          marketShareStreams: 0.0021,\n            marketShareDollars: 0.0098,\n            includeInCalculations: true\n        };\n        let others = {\n          id: 9,\n          name: \"Napster / Rhapsody\",\n          payoutPerStream: 0.0111,\n          marketShareStreams: 0.0014,\n            marketShareDollars: 0.0080,\n            includeInCalculations: true\n        };\n        let dsps = [spotify, apple, youtube, amazon, google, pandora, deezer, amazonDig, tidal, others];\n        console.log(dsps)\n\n        this.setState( {providers: dsps} );\n\n    }*/\n\n    toggleMe(index) {\n      this.state.providers[index].includeInCalculations = !this.state.providers[index].includeInCalculations;\n      //console.log(dsps[index].name);\n      //console.log(dsps[index].includeInCalculations);\n      this.calculate();\n    }\n\n    /// MATH STUFF /////\n    calculate() {\n        this.getPublisherShare();\n\n        console.log(\"calculating\");\n        let artistShare;\n        let labelShare;\n        // Why are there double semi-colons?\n                   //prob a typo\n        let totalMoneyToRecoupe = parseFloat(this.state.advance) + parseFloat(this.state.costs);\n        console.log(totalMoneyToRecoupe)\n        let grossRevenue= this.state.streamNumber * this.weightedAverageOfSelected();\n        console.log(\"grossRevenue: \" + grossRevenue)\n        //checkDSPs();\n        //console.log(estStreams.value * avgPayout);\n        //console.log(estStreams.value * weightedAverageOfSelected());\n        if (this.state.recordDealSelected === \"royalty\") {\n            // Artist Split\n            if((grossRevenue * (parseFloat(this.state.sliderValue)/100)) <= totalMoneyToRecoupe){\n              console.log(\"unrecouped\");\n              artistShare = 0;\n            } else {\n              artistShare = (grossRevenue * (parseFloat(this.state.sliderValue)/100)) - totalMoneyToRecoupe;\n            }\n            labelShare = grossRevenue * (1-(parseFloat(this.state.sliderValue)/100));\n\n        } else if (this.state.recordDealSelected === \"netProfit\" || this.state.recordDealSelected === \"distributionPercent\" || this.state.recordDealSelected === \"Distribution Fee\") {\n            //net profit deals are generally guaranteed 50/50, distribution are generally 70/30 artist/label\n            let profit = (grossRevenue - this.state.costs);\n            // Artist Split\n            if(((profit * (parseFloat(this.state.sliderValue)/100)) - parseFloat(this.state.advance)) < 0){\n              console.log(\"unrecouped\");\n              artistShare = 0;\n            } else {\n              artistShare = (profit * (parseFloat(this.state.sliderValue)/100)) - parseFloat(this.state.advance);\n            }\n            // Label Split Net Profit, Distributions\n            if(this.state.recordDealSelected === \"netProfit\" || this.state.recordDealSelected === \"distributionPercent\") {\n                if(profit < 0){\n                    labelShare = 0;\n                } else {\n                    labelShare = (profit * (1-(parseFloat(this.state.sliderValue)/100)));\n                }\n            } else labelShare = grossRevenue - artistShare;\n\n            /* Nik Label Share for Net Profit, %Distribution Deals\n            if(profit < 0){\n              labelShare = 0;\n            } else {\n              labelShare = (profit * (1-(parseFloat(artistDeal.value)/100)));\n            }\n            */\n\n        } else if (this.state.recordDealSelected === \"labelServices\") {\n            // Artist Split\n            if((grossRevenue * (parseFloat(this.state.sliderValue)/100)) <= totalMoneyToRecoupe){\n              console.log(\"unrecouped\");\n              artistShare = 0;\n            } else {\n              artistShare = (grossRevenue * (parseFloat(this.state.sliderValue)/100)) - totalMoneyToRecoupe;\n            }\n            labelShare = grossRevenue * (1-(parseFloat(this.state.sliderValue)/100)) + this.state.costs;//extra menu items would be factored into costs\n        }\n\n        console.log(\"grossRevenue: \" + grossRevenue)\n        console.log(\"totRecoupe: \" + totalMoneyToRecoupe)\n        console.log(\"writerEarnings: \" + artistShare)\n        console.log(\"publisherShare: \" + labelShare)\n\n        this.setState({grossRev: grossRevenue, totRecoupe: totalMoneyToRecoupe, writerEarnings: artistShare, publisherShare: labelShare});\n\n        this.getTotalEarnings(artistShare);\n\n    }\n    getPublisherShare() {\n        //console.log(\"avgPubPayout: \" + avgPubPayout)\n\n        let pubGrossRevenue = avgPubPayout * this.state.streamNumber;\n        let pubPerformanceRevenue = pubGrossRevenue * .5;\n        let pubMechanicalRevenue = pubGrossRevenue * .5;\n        let pubPROAdminFee = pubPerformanceRevenue * .165;\n        let pubMechanicalAdminFee = pubMechanicalRevenue * .15;\n        let pubMechanicalRecordFee = (pubMechanicalRevenue - pubMechanicalAdminFee) * .3;\n\n        let publisherPercentage;\n\n        if(this.state.publishingDealSelected === \"Full/Traditional\") {\n            publisherPercentage = 1.0;\n            this.setState({publisherShare: ((pubPerformanceRevenue - pubPROAdminFee) * .5) * publisherPercentage});\n            this.setState({writerEarnings: ((pubPerformanceRevenue - pubPROAdminFee) * .5) + (((pubPerformanceRevenue - pubPROAdminFee) * .5) * (1- publisherPercentage)) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))});\n        } else if(this.state.publishingDealSelected === \"Co-Publishing\") {\n            publisherPercentage = 0.5;\n            this.setState({publisherShare: ((pubPerformanceRevenue - pubPROAdminFee) * .5) * publisherPercentage});\n            this.setState({writerEarnings: ((pubPerformanceRevenue - pubPROAdminFee) * .5) + (((pubPerformanceRevenue - pubPROAdminFee) * .5) * (1- publisherPercentage)) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))});\n        } else if(this.state.publishingDealSelected === \"Admin Deal\") {\n            publisherPercentage = 0.1;\n            this.setState({publisherShare: ((pubPerformanceRevenue - pubPROAdminFee) * .5) * publisherPercentage});\n            this.setState({writerEarnings: ((pubPerformanceRevenue - pubPROAdminFee) * .5) + (((pubPerformanceRevenue - pubPROAdminFee) * .5) * (1- publisherPercentage)) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))});\n        } else if(this.state.publishingDealSelected === \"No Deal\") {\n            publisherPercentage = 0.0;\n            this.setState({publisherShare: ((pubPerformanceRevenue - pubPROAdminFee) * .5) * publisherPercentage});\n            this.setState({writerEarnings: ((pubPerformanceRevenue - pubPROAdminFee) * .5) + (((pubPerformanceRevenue - pubPROAdminFee) * .5) * (1- publisherPercentage)) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))});\n        }\n    }\n\n    weightedAverageOfSelected() {\n        let sum = 0.0;\n        for(let i=0; i < this.state.providers.length; i++) {\n          if(this.state.providers[i].includeInCalculations) {\n                sum += (this.state.providers[i].payoutPerStream * this.state.providers[i].marketShareStreams)\n            }\n        }\n        let sumOfWeights = 0.0;\n        for(let i=0;i < this.state.providers.length; i++) {\n            sumOfWeights += this.state.providers[i].marketShareStreams\n        }\n        console.log(sum/sumOfWeights);\n        return sum/sumOfWeights;\n    }\n\n\n\n    getTotalEarnings(artistShare) {\n        if(this.state.role === \"both\") {\n            this.setState({totalEarnings: artistShare + parseFloat(this.state.writerEarnings)});\n        } else if(this.state.role === \"artist\") {\n            this.setState({totalEarnings: artistShare});\n        } else if(this.state.role === \"writer\") {\n            this.setState({totalEarnings: this.state.writerEarnings});\n        }\n    }\n\n\n}\n\n\nexport default CalcPage;\n"]},"metadata":{},"sourceType":"module"}