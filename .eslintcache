<<<<<<< HEAD
[{"/Users/nikhil/Desktop/MusicStreamingCalculator/src/index.js":"1","/Users/nikhil/Desktop/MusicStreamingCalculator/src/App.js":"2","/Users/nikhil/Desktop/MusicStreamingCalculator/src/reportWebVitals.js":"3","/Users/nikhil/Desktop/MusicStreamingCalculator/src/DesktopVersion.js":"4","/Users/nikhil/Desktop/MusicStreamingCalculator/src/MobileVersion.js":"5","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/NumberInput.js":"6","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SmallText.js":"7","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/TitleText.js":"8","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SingleDropDown.js":"9","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/MultiDropDown.js":"10","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/MarketingCostDropDown.js":"11","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SelectButton.js":"12","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/RadialChart.js":"13","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/DealSplitSlider.js":"14","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/StreamSlider.js":"15","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/Accordion.js":"16","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/Checkbox.js":"17","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/ToolTip.js":"18","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SwitchButton.js":"19","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/BarChart.js":"20"},{"size":500,"mtime":1608662017608,"results":"21","hashOfConfig":"22"},{"size":587,"mtime":1608674405139,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1608662017609,"results":"24","hashOfConfig":"22"},{"size":45697,"mtime":1609335852618,"results":"25","hashOfConfig":"22"},{"size":45801,"mtime":1609336820226,"results":"26","hashOfConfig":"22"},{"size":1843,"mtime":1608662017606,"results":"27","hashOfConfig":"22"},{"size":256,"mtime":1608662017607,"results":"28","hashOfConfig":"22"},{"size":208,"mtime":1608662017607,"results":"29","hashOfConfig":"22"},{"size":863,"mtime":1609335852645,"results":"30","hashOfConfig":"22"},{"size":770,"mtime":1609335852635,"results":"31","hashOfConfig":"22"},{"size":1329,"mtime":1609335852634,"results":"32","hashOfConfig":"22"},{"size":748,"mtime":1609335852636,"results":"33","hashOfConfig":"22"},{"size":2049,"mtime":1608662017606,"results":"34","hashOfConfig":"22"},{"size":3719,"mtime":1609335852632,"results":"35","hashOfConfig":"22"},{"size":3172,"mtime":1609335852649,"results":"36","hashOfConfig":"22"},{"size":800,"mtime":1608921601920,"results":"37","hashOfConfig":"22"},{"size":418,"mtime":1608674405133,"results":"38","hashOfConfig":"22"},{"size":774,"mtime":1608662017608,"results":"39","hashOfConfig":"22"},{"size":652,"mtime":1608738306804,"results":"40","hashOfConfig":"22"},{"size":1177,"mtime":1609335617207,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xbyk7m",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nikhil/Desktop/MusicStreamingCalculator/src/index.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/App.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/reportWebVitals.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/DesktopVersion.js",["82","83","84","85","86","87","88","89","90","91","92"],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/MobileVersion.js",["93","94","95","96","97","98","99","100","101","102","103","104"],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/NumberInput.js",["105","106","107"],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SmallText.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/TitleText.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SingleDropDown.js",["108"],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/MultiDropDown.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/MarketingCostDropDown.js",["109"],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SelectButton.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/RadialChart.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/DealSplitSlider.js",["110","111"],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/StreamSlider.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/Accordion.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/Checkbox.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/ToolTip.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SwitchButton.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/BarChart.js",[],{"ruleId":"112","severity":1,"message":"113","line":484,"column":54,"nodeType":"114","messageId":"115","endLine":484,"endColumn":56},{"ruleId":"116","severity":1,"message":"117","line":734,"column":7,"nodeType":"118","endLine":734,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":736,"column":7,"nodeType":"118","endLine":736,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":738,"column":7,"nodeType":"118","endLine":738,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":744,"column":7,"nodeType":"118","endLine":744,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":746,"column":7,"nodeType":"118","endLine":746,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":748,"column":7,"nodeType":"118","endLine":748,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":753,"column":7,"nodeType":"118","endLine":753,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":755,"column":7,"nodeType":"118","endLine":755,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":757,"column":7,"nodeType":"118","endLine":757,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":882,"column":5,"nodeType":"118","endLine":882,"endColumn":32},{"ruleId":"119","severity":1,"message":"120","line":16,"column":8,"nodeType":"121","messageId":"122","endLine":16,"endColumn":16},{"ruleId":"112","severity":1,"message":"113","line":472,"column":54,"nodeType":"114","messageId":"115","endLine":472,"endColumn":56},{"ruleId":"116","severity":1,"message":"117","line":725,"column":7,"nodeType":"118","endLine":725,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":727,"column":7,"nodeType":"118","endLine":727,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":729,"column":7,"nodeType":"118","endLine":729,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":735,"column":7,"nodeType":"118","endLine":735,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":737,"column":7,"nodeType":"118","endLine":737,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":739,"column":7,"nodeType":"118","endLine":739,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":744,"column":7,"nodeType":"118","endLine":744,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":746,"column":7,"nodeType":"118","endLine":746,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":748,"column":7,"nodeType":"118","endLine":748,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":873,"column":5,"nodeType":"118","endLine":873,"endColumn":32},{"ruleId":"119","severity":1,"message":"123","line":2,"column":10,"nodeType":"121","messageId":"122","endLine":2,"endColumn":16},{"ruleId":"119","severity":1,"message":"124","line":3,"column":9,"nodeType":"121","messageId":"122","endLine":3,"endColumn":25},{"ruleId":"119","severity":1,"message":"125","line":3,"column":27,"nodeType":"121","messageId":"122","endLine":3,"endColumn":33},{"ruleId":"119","severity":1,"message":"126","line":3,"column":8,"nodeType":"121","messageId":"122","endLine":3,"endColumn":14},{"ruleId":"119","severity":1,"message":"126","line":3,"column":8,"nodeType":"121","messageId":"122","endLine":3,"endColumn":14},{"ruleId":"119","severity":1,"message":"127","line":2,"column":41,"nodeType":"121","messageId":"122","endLine":2,"endColumn":46},{"ruleId":"119","severity":1,"message":"128","line":97,"column":24,"nodeType":"121","messageId":"122","endLine":97,"endColumn":30},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-unused-vars","'Checkbox' is defined but never used.","Identifier","unusedVar","'render' is defined but never used.","'TransitionMotion' is defined but never used.","'spring' is defined but never used.","'styled' is defined but never used.","'Ticks' is defined but never used.","'update' is assigned a value but never used."]
=======
[{"/Users/nikhil/Desktop/MusicStreamingCalculator/src/index.js":"1","/Users/nikhil/Desktop/MusicStreamingCalculator/src/reportWebVitals.js":"2","/Users/nikhil/Desktop/MusicStreamingCalculator/src/App.js":"3","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/ButtonGroup.js":"4","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/BarChart.js":"5","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SmallText.js":"6","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/MultiDropDown.js":"7","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/DealSplitSlider.js":"8","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/StreamSlider.js":"9","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SwitchButton.js":"10","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SingleDropDown.js":"11","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/RadialChart.js":"12","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/NumberInput.js":"13","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/TitleText.js":"14","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/ButtonGroupTest.js":"15","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/Accordion.js":"16","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/Checkbox.js":"17","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/MarketingCostDropDown.js":"18","/Users/nikhil/Desktop/MusicStreamingCalculator/src/DesktopVersion.js":"19","/Users/nikhil/Desktop/MusicStreamingCalculator/src/MobileVersion.js":"20","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/ToolTip.js":"21","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SelectButton.js":"22"},{"size":500,"mtime":1608662017608,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1608662017609,"results":"25","hashOfConfig":"24"},{"size":587,"mtime":1608674405139,"results":"26","hashOfConfig":"24"},{"size":930,"mtime":1608050503437,"results":"27","hashOfConfig":"24"},{"size":1067,"mtime":1608737845403,"results":"28","hashOfConfig":"24"},{"size":256,"mtime":1608662017607,"results":"29","hashOfConfig":"24"},{"size":770,"mtime":1608988491527,"results":"30","hashOfConfig":"24"},{"size":3719,"mtime":1609263121783,"results":"31","hashOfConfig":"24"},{"size":3172,"mtime":1609277524295,"results":"32","hashOfConfig":"24"},{"size":652,"mtime":1608738306804,"results":"33","hashOfConfig":"24"},{"size":863,"mtime":1608989316994,"results":"34","hashOfConfig":"24"},{"size":2049,"mtime":1608662017606,"results":"35","hashOfConfig":"24"},{"size":1843,"mtime":1608662017606,"results":"36","hashOfConfig":"24"},{"size":208,"mtime":1608662017607,"results":"37","hashOfConfig":"24"},{"size":2047,"mtime":1608659051219,"results":"38","hashOfConfig":"24"},{"size":800,"mtime":1608921601920,"results":"39","hashOfConfig":"24"},{"size":418,"mtime":1608674405133,"results":"40","hashOfConfig":"24"},{"size":1329,"mtime":1608988889947,"results":"41","hashOfConfig":"24"},{"size":44164,"mtime":1609331477605,"results":"42","hashOfConfig":"24"},{"size":44110,"mtime":1608987246323,"results":"43","hashOfConfig":"24"},{"size":774,"mtime":1608662017608,"results":"44","hashOfConfig":"24"},{"size":748,"mtime":1608987231850,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"xbyk7m",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/Users/nikhil/Desktop/MusicStreamingCalculator/src/index.js",[],["97","98"],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/reportWebVitals.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/App.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/ButtonGroup.js",[],["99","100"],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/BarChart.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SmallText.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/MultiDropDown.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/DealSplitSlider.js",["101","102"],"import React, { Component } from 'react';\nimport { Slider, Rail, Handles, Tracks, Ticks } from 'react-compound-slider';\nimport SmallText from './SmallText.js';\n\nconst sliderStyle = {\n  position: 'relative',\n  width: '100%',\n  // height: 80,\n  // touchAction: 'none',\n}\n\nconst railStyle = {\n  position: 'absolute',\n  width: '100%',\n  height: 10,\n  marginTop: 35,\n  borderRadius: 5,\n  backgroundColor: '#CBDCFC',\n  zIndex: 0\n}\n\nconst domain = [0, 100]\nconst defaultValues = [25]\n\nexport function Handle({\n  handle: { id, value, percent },\n  getHandleProps\n}) {\n  return (\n    <div\n      style={{\n        left: `${percent}%`,\n        position: 'absolute',\n        marginLeft: -15,\n        marginTop: 25,\n        zIndex: 2,\n        width: 30,\n        height: 30,\n        border: 0,\n        textAlign: 'center',\n        cursor: 'pointer',\n        borderRadius: '50%',\n        backgroundColor: '#1971ff',\n        color: '#333',\n      }}\n      {...getHandleProps(id)}\n    >\n      <div style={{fontSize: 14, marginTop: 5, fontWeight: '600', color: 'white'}}>\n        {value}\n      </div>\n    </div>\n  )\n}\n\nfunction Track({ source, target, getTrackProps }) {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        height: 10,\n        zIndex: 1,\n        marginTop: 35,\n        backgroundColor: '#3665d6',\n        borderRadius: 5,\n        cursor: 'pointer',\n        left: `${source.percent}%`,\n        width: `${target.percent - source.percent}%`,\n      }}\n      {...getTrackProps() /* this will set up events if you want it to be clickeable (optional) */}\n    />\n  )\n}\n\n\nexport class DealSplitSlider extends Component {\n  state = {\n    values: defaultValues.slice(),\n    update: defaultValues.slice(),\n  }\n\n  componentDidUpdate() {\n    if (this.props.onChange) {\n      this.props.onChange(this.state);\n    }\n  }\n\n  onUpdate = update => {\n    this.setState({ update })\n  }\n\n  onChange = values => {\n    this.setState({ values })\n  }\n\n  render() {\n    const {\n      state: { values, update},\n    } = this\n\n    return (\n      <div>\n        <div style={{ height: 70, width: '100%' }}>\n          <Slider\n          rootStyle={sliderStyle}\n          domain={domain}\n          onUpdate={this.onUpdate}\n          onChange={this.onChange}\n          values={values}\n          mode={1}\n          step={1}\n          >\n          <Rail>\n            {({ getRailProps }) => (<div style={railStyle} {...getRailProps()} />)}\n          </Rail>\n          <Handles>\n            {({ handles, getHandleProps }) => (\n            <div className=\"slider-handles\">\n              {handles.map(handle => (\n              <Handle\n              key={handle.id}\n              handle={handle}\n              getHandleProps={getHandleProps}\n              />\n              ))}\n            </div>)}\n          </Handles>\n          <Tracks right={false}>\n            {({ tracks, getTrackProps }) => (\n              <div className=\"slider-tracks\">\n                {tracks.map(({ id, source, target }) => (\n                <Track\n                key={id}\n                source={source}\n                target={target}\n                getTrackProps={getTrackProps}\n                />))}\n              </div>)}\n          </Tracks>\n          </Slider>\n        </div>\n        <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between', margin: '-20px 2% 0'}}>\n          <SmallText text={`Artist:  ${parseInt(values)}%`} style={{textAlign: 'left', fontSize: '16px', fontWeight: 'bold', lineHeight: '1.09'}}/>\n          <SmallText text={`${100-parseInt(values)}% :Label`} style={{textAlign: 'left', fontSize: '16px', fontWeight: 'bold', lineHeight: '1.09',}}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default DealSplitSlider;\n","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/StreamSlider.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SwitchButton.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SingleDropDown.js",["103"],"import React from 'react';\nimport Select from 'react-select';\nimport styled from \"styled-components\";\n\nclass SingleDropDown extends React.Component {\n\n  state = {\n    // selectedOption: this.props.selectedOption,\n    selectedOption: null\n  };\n\n  handleChange = selectedOption => {\n    this.setState({ selectedOption });\n  };\n\n\n  componentDidUpdate() {\n    if (this.props.onChange) {\n      this.props.onChange(this.state);\n    }\n  }\n\n\n  render() {\n    const { selectedOption } = this.state;\n\n    const customStyles = {\n    menu: (provided, state) => ({\n      ...provided,\n      zIndex: 10\n    })\n  }\n\n    return (\n      <Select\n        styles={customStyles}\n        value={selectedOption}\n        onChange={this.handleChange}\n        options={this.props.options}\n        defaultValue={this.props.defaultValue}\n      />\n    );\n  }\n}\n\nexport default SingleDropDown;\n","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/RadialChart.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/NumberInput.js",["104","105","106"],"import React from \"react\";\nimport { render } from \"react-dom\";\nimport {TransitionMotion, spring } from 'react-motion';\nimport \"../stylesheets/NumberInput.css\";\nimport NumberFormat from 'react-number-format';\n\nclass NumberInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      active: (props.locked && props.active) || false,\n      // FIX THIS VALUE TO HAVE INPUT BE TRUE... RN \"\" is so 1 is \"\" then 12 is \"1\"\n      value: props.value || \"\",\n      error: props.error || \"\",\n      label: props.label || \"Label\"\n    };\n  }\n  componentDidUpdate() {\n    if (this.props.onChange) {\n      this.props.onChange(this.state);\n    }\n  }\n\n  changeValue(event) {\n    const value = event.target.value;\n    this.setState({ value, error: 0 });\n  }\n\n  handleKeyPress(event) {\n    // console.log(this.state.value)\n  }\n\n  render() {\n    const { active, value, error, label} = this.state;\n    const { predicted, locked } = this.props;\n    const fieldClassName = `field ${(locked ? active : active || value) &&\n      \"active\"} ${locked && !active && \"locked\"}`;\n\n    return (\n      <div className={fieldClassName}>\n        {active &&\n          value &&\n          predicted &&\n          predicted.includes(value) && <p className=\"predicted\">{predicted}</p>}\n        <NumberFormat\n          type=\"text\"\n          value={value}\n          placeholder={label}\n          maxLength={11}\n          onChange={this.changeValue.bind(this)}\n          onKeyPress={this.handleKeyPress.bind(this)}\n          onFocus={() => !locked && this.setState({ active: true })}\n          onBlur={() => !locked && this.setState({ active: false })}\n          isNumericString={true}\n        />\n        <label htmlFor={0} className={error && \"error\"}>\n          {error || label}\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default NumberInput;\n","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/TitleText.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/ButtonGroupTest.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/Accordion.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/Checkbox.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/MarketingCostDropDown.js",["107"],"import React from 'react';\nimport Select from 'react-select';\nimport styled from \"styled-components\";\n\nclass MarketingDropDown extends React.Component {\n\n  state = {\n    selectedOption: this.props.selectedOption,\n  };\n\n  handleChange = selectedOption => {\n    this.setState({ selectedOption });\n  };\n\n\n  componentDidUpdate() {\n    if (this.props.onChange) {\n      this.props.onChange(this.state);\n    }\n  }\n\n\n  render() {\n    const { selectedOption } = this.state;\n\n    const customStyles = {\n      menu: (provided, state) => ({\n        ...provided,\n        zIndex: 10\n      }),\n      singleValue: (provided, state) => ({\n        ...provided,\n        fontSize: '12px',\n        color: 'black'\n      }),\n      placeholder: (provided, state) => ({\n        ...provided,\n        fontSize: '10px'\n      }),\n      indicatorsContainer: (base) => ({\n        ...base,\n        padding: 0\n      }),\n      dropdownIndicator: base => ({\n          ...base,\n          padding: 0\n      }),\n      clearIndicator: base => ({\n          ...base,\n          padding: 0\n      }),\n    }\n\n    return (\n      <Select\n        styles={customStyles}\n        value={selectedOption}\n        onChange={this.handleChange}\n        options={this.props.options}\n        defaultValue={this.props.defaultValue}\n      />\n    );\n  }\n}\n\nexport default MarketingDropDown;\n","/Users/nikhil/Desktop/MusicStreamingCalculator/src/DesktopVersion.js",["108","109","110","111","112","113","114","115","116","117"],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/MobileVersion.js",["118","119","120","121","122","123","124","125","126","127","128"],"import React from 'react';\nimport NumberFormat from 'react-number-format';\nimport './App.css';\nimport SmallText from './components/SmallText.js';\nimport TitleText from './components/TitleText.js';\nimport SelectButton from './components/SelectButton.js';\nimport NumberInput from './components/NumberInput.js';\nimport SingleDropDown from './components/SingleDropDown.js';\nimport MarketingDropDown from './components/MarketingCostDropDown.js';\nimport MultiDropDown from './components/MultiDropDown.js';\nimport BarChart from './components/BarChart.js';\nimport RadialChart from './components/RadialChart.js';\nimport DealSplitSlider from './components/DealSplitSlider.js';\nimport StreamSlider from './components/StreamSlider.js';\nimport Accordion from './components/Accordion.js';\nimport Checkbox from './components/Checkbox.js';\nimport ToolTip from './components/ToolTip.js';\nimport SwitchButton from './components/SwitchButton.js';\n\nimport './stylesheets/MobilePage.css';\n\nconst labelDealOptions = [\n  { value: 'royalty', label: 'Royalty' },\n  { value: 'netProfit', label: 'Net Profit' },\n  { value: 'distributionPercent', label: 'Distribution (%)' },\n  { value: 'distributionFee', label: 'Distribution (fee)' },\n  { value: 'labelServices', label: 'Label Services' }\n]\n\nconst pubDealOptions = [\n  { value: 'Full/Traditional', label: 'Full/Traditional' },\n  { value: 'Co-Publishing', label: 'Co-publising' },\n  { value: 'Admin', label: 'Admin' },\n  { value: 'No Deal', label: 'No Deal' }\n]\n\nconst marketingSplitOptions = [\n  { value: 0.0, label: '0%' },\n  { value: 0.5, label: '50%' },\n  { value: 1.0, label: '100%' }\n]\n\nlet recArtist = {\n  name: \"Recording Artist Only\",\n  id: \"artist\",\n  ref: React.createRef(),\n  selected: false\n}\nlet recWriter = {\n  name: \"Writer Only\",\n  id: \"writer\",\n  ref: React.createRef(),\n  selected: false\n}\nlet recBoth = {\n  name: \"Both\",\n  id: \"both\",\n  ref: React.createRef(),\n  selected: true\n}\nconst roleTypes = [recArtist, recWriter, recBoth];\n\n//average / approx payout for publishing for stream\nconst avgPubPayout = 0.0007174565191\n\n//handling dsps\nlet spotify = {\n  id: 0,\n  ref: React.createRef(),\n  name: \"Spotify\",\n  payoutPerStream: 0.00331,\n  marketShareStreams: .2922,\n    marketShareDollars: .4893,\n    includeInCalculations: true\n};\nlet apple = {\n  id: 1,\n  ref: React.createRef(),\n  name: \"Apple Music\",\n  payoutPerStream: 0.00495,\n  marketShareStreams: .0995,\n    marketShareDollars: .2497,\n    includeInCalculations: true\n};\nlet youtube = {\n  id: 2,\n  ref: React.createRef(),\n  name: \"Youtube Content ld\",\n  payoutPerStream: 0.00028,\n  marketShareStreams: .4858,\n    marketShareDollars: .0699,\n    includeInCalculations: true\n};\nlet amazon = {\n  id: 3,\n  ref: React.createRef(),\n  name: \"Amazon Unlimited\",\n  payoutPerStream: 0.01175,\n  marketShareStreams: .0068,\n    marketShareDollars: .0404,\n    includeInCalculations: true\n};\nlet google = {\n  id: 4,\n  ref: React.createRef(),\n  name: \"Google Play\",\n  payoutPerStream: 0.00543,\n  marketShareStreams: .0112,\n    marketShareDollars: .0308,\n    includeInCalculations: true\n};\nlet pandora = {\n  id: 5,\n  ref: React.createRef(),\n  name: \"Pandora\",\n  payoutPerStream: 0.00155,\n  marketShareStreams: .0386,\n    marketShareDollars: .0303,\n    includeInCalculations: true\n};\nlet deezer = {\n  id: 6,\n  name: \"Deezer\",\n  ref: React.createRef(),\n  payoutPerStream: 0.00567,\n  marketShareStreams: .0091,\n    marketShareDollars: .026,\n    includeInCalculations: true\n};\nlet amazonDig = {\n  id: 7,\n  ref: React.createRef(),\n  name: \"Amazon Digital Services\",\n  payoutPerStream: 0.00395,\n  marketShareStreams: .0095,\n    marketShareDollars: .019,\n    includeInCalculations: true\n};\nlet tidal = {\n  id: 8,\n  ref: React.createRef(),\n  name: \"TIDAL\",\n  payoutPerStream: 0.00927,\n  marketShareStreams: 0.0021,\n    marketShareDollars: 0.0098,\n    includeInCalculations: true\n};\n\nclass MobileVersion extends React.Component{\n    constructor(props) {\n        super(props);\n        this.dealTypeRef = React.createRef();\n        this.tabGroupRef = React.createRef();\n        this.pubTypeRef = React.createRef();\n        this.advanceRef = React.createRef();\n        this.artistButtonRef = React.createRef();\n        this.writerButtonRef = React.createRef();\n        this.bothButtonRef = React.createRef();\n        this.moneyGoalInputRef = React.createRef();\n        this.costsRecordingRef = React.createRef();\n        this.costsMarketingRef = React.createRef();\n        this.costsDistributionRef = React.createRef();\n        this.costsMiscRef = React.createRef();\n        this.dealSliderRef = React.createRef();\n        this.estStreamsRef = React.createRef();\n        this.streamsSliderRef = React.createRef();\n        this.marketingDropDownRef = React.createRef();\n        this.labelServicesSelectedRef = React.createRef();\n\n        this.state = {\n            providers: [spotify, apple, youtube, amazon, google, pandora, deezer, amazonDig, tidal],\n            streamNumber: 0,\n            role: null,\n            recordDeal: [],\n            publishDeal: [],\n            labelServices: [],\n            sliderValue: 50,\n            recordDealSelected: null,\n            publishingDealSelected: null,\n            advance: 0,\n            grossRecordingRev: 0,\n            moneyGoalChecked: false,\n            autoRecoupChecked: false,\n            recordingCostChecked: true,\n            distributionCostChecked: true,\n            miscCostChecked: true,\n            grossPubRev: 0,\n            grossTotalRev: 0,\n            totRecoupe: 0,\n            labelShare: 0,\n            labelPublishingShare: 0,\n            publisherShare: 0,\n            artistRecordEarnings: 0,\n            labelServicesCosts: 0,\n            artistUnrecoupedAmount: 0,\n            artistWriterEarnings: 0,\n            artistTotalEarnings: 0,\n            recoupStreamsNeeds: 0,\n            marketingValSelected: 0.0,\n            moneyGoalInput: 0,\n            moneyGoalStreamsNeeded: 0,\n            seriesBar: [{\n              name: 'From Recording',\n              data: [0, 0, 0]\n            }, {\n              name: 'From Writing',\n              data: [0, 0, 0]\n            },{\n              name: 'From Advance',\n              data: [0, 0, 0]\n            }\n          ],\n          seriesRadial: [],\n          roleTypes: roleTypes,\n          costsTotal: 0,\n          costsRecording: 0,\n          costsMarketing: 0,\n          costsDistribution: 0,\n          costsMisc: 0,\n        };\n\n    }\n\n    componentDidMount() {\n        this.buildRecordDealSelect();\n        this.handleRoleButton();\n        this.buildPublishingDealSelect();\n        this.buildLabelServicesSelect();\n        this.setSliderValue(50);\n        this.calculate();\n    }\n\n\n    render() {\n      return (\n        <div>\n          <div style={{padding: '2%', display: 'flex', flexDirection: 'column', backgroundColor: '#f5f5f5'}}>\n              <div style={{textAlign: 'center'}}>\n                <TitleText className=\"title-text\" text=\"What's My Stream?\" />\n              </div>\n              <Accordion\n                  title=\"About You\"\n                  body={\n                  <div style={{flexDirection: 'column', backgroundColor: '#fff'}}>\n                      <div>\n                        <SmallText text=\"Your Role\" style={{textAlign: 'center', fontSize: '18px', fontWeight: 'bold', lineHeight: '1.09', color: '#323747'}}/>\n                        <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'center'}}>\n                          {this.state.roleTypes.map(type => (\n                            <SelectButton ref={type.ref}\n                              key={type.id}\n                              onChange={e => this.handleMyClick(type.id)}\n                              text={type.name}\n                            />))}\n                          </div>\n                      </div>\n                    <div>\n                      {this.state.role !== \"writer\" &&\n                        <div style={{margin: '3% 0% 4% 0%', borderTop: 'thin dotted #b3d0ff'}}>\n                          <div>\n                            <SmallText text=\"Record Deal Type\" style={{ fontSize: '18px', fontWeight: 'bold', lineHeight: '1.09', textAlign: 'left', color: '#323747',marginBottom:'5px' }}/>\n                            <SingleDropDown\n                                ref={this.dealTypeRef}\n                                options={labelDealOptions}\n                                onChange = {e => this.getStateRecDeal(e)}/>\n                          </div>\n                          <div>\n                            {this.state.recordDealSelected === \"labelServices\" &&\n                              <div>\n                                <SmallText text=\"Label Services\" style={{ fontSize: '18px', fontWeight: 'bold', lineHeight: '1.09', textAlign: 'left', color: '#323747',marginBottom:'5px' }}/>\n                                <MultiDropDown ref={this.labelServicesSelectedRef}\n                                  options={this.state.labelServices}\n                                  default={this.state.labelServices[0]}\n                                  onChange={e => this.changeLabelServicesDropDown(e)}\n                                />\n                              </div>\n                            }\n                          </div>\n                          <SmallText text=\"Record Deal Split\" style={{ textAlign: 'center', fontSize: '16px', fontWeight: 'bold', lineHeight: '1.09', color: '#323747',marginBottom:'3px' }}/>\n                          <DealSplitSlider ref={this.dealSliderRef}\n                              onChange = {e => this.doSliderStuff(e)}/>\n                          <SmallText text=\"Record Deal Advance\" style={{ textAlign: 'center', fontSize: '16px', fontWeight: 'bold', lineHeight: '1.09', color: '#323747'}}/>\n                          <div style={{justifyContent: 'center'}}>\n                            <NumberInput ref={this.advanceRef}\n                              id= {\"numInput\"}\n                              pattern=\"[0-9]*\"\n                              label = \"Advance on Earnings\"\n                              locked = {false}\n                              active = {false}\n                              onChange = {e => this.getStateAdvance(e)}/>\n                          </div>\n                        </div>\n                      }\n                      {this.state.role !== \"artist\" &&\n                        <div style={{borderTop: 'thin dotted #b3d0ff', marginBottom: '5%'}}>\n                          <SmallText text=\"Publishing Deal Type\" style={{ fontSize: '18px', fontWeight: 'bold', lineHeight: '1.09', textAlign: 'left', color: '#323747',marginBottom:'5px' }}/>\n                          <SingleDropDown\n                              ref={this.pubTypeRef}\n                              options={pubDealOptions}\n                              onChange = {e => this.getStatePubDeal(e)}\n                          />\n                        </div>\n                      }\n                    </div>\n                  </div>\n                  }/>\n\n                <Accordion\n                    title=\"About Your Song\"\n                    body={\n\n                      <div style={{flexDirection: 'column', backgroundColor: '#fff'}}>\n                          <div style={{alignItems: 'center', borderBottom: 'thin dotted #b3d0ff', paddingBottom: '2.5%'}}>\n                            <SmallText text=\"Estimated Streams\" style={{textAlign: 'center', fontSize: '18px', fontWeight: 'bold', lineHeight: '1.09', color: '#323747'}}/>\n                            <NumberInput ref={this.estStreamsRef}\n                               id={0}\n                               pattern=\"[0-9]*\"\n                               label=\"Estimated Streams\"\n                               locked={false}\n                               active={false}\n                               onChange={e => this.changeStreams(e)}/>\n                            <StreamSlider ref={this.streamsSliderRef} values={[this.state.streamNumber]} domain={[0, (this.state.streamNumber+1)*2]} onChange={e => this.updateStreamSlider(e)}/>\n                            <div>\n                              <Accordion\n                                  title=\"Which DSPs Are Included?\"\n                                  body={\n                                    <div style={{display: 'flex', flexWrap: 'wrap', justifyContent: 'center', flexDirection: 'row'}}>\n                                      {this.state.providers.map((provider) =>\n                                      <SelectButton\n                                        ref={provider.ref}\n                                        key={provider.id}\n                                        text={provider.name}\n                                        onChange = {e => this.getButtonClick(provider.id)}/>)}\n                                    </div>}/>\n                            </div>\n                          </div>\n\n                          <div style={{borderBottom: 'thin dotted #b3d0ff', paddingBottom: '2.5%'}}>\n                            <NumberFormat value={`${this.state.costsTotal.toFixed(0)}`} displayType={'text'} thousandSeparator={true} prefix={'$'} renderText={value => <div style={{fontSize: '24px', fontWeight: 'bold', lineHeight: '1.09', textAlign: 'center', color: '#323747', marginTop: '2%', marginBottom: '5%'}}>{`Costs: ${value}`}</div>} />\n                            <div style={{justifyContent:'center'}}>\n                                <div style={{display: 'flex', flexDirection: 'row', marginBottom: '3%'}}>\n                                    <NumberInput\n                                      id= {\"costsRecording\"}\n                                      pattern=\"[0-9]*\"\n                                      ref = {this.costsRecordingRef}\n                                      label=\"Recording Costs\"\n                                      locked={false}\n                                      active={false}\n                                      onChange = {e => this.getStateCostsRecording(e)}/>\n                                    <div>\n                                      <SmallText text=\"Recoupable\" style={{fontSize: '10px', margin: '-8px 0px 2px 2px'}}/>\n                                      <SwitchButton onChange={e => this.changeCheckboxes(\"recording\")} checked={this.state.recordingCostChecked} />\n                                    </div>\n                                </div>\n                                <div style={{display: 'flex', flexDirection: 'row', marginBottom: '3%', paddingRight: '2%'}}>\n                                    <NumberInput\n                                      id= {\"costsMarketing\"}\n                                      pattern=\"[0-9]*\"\n                                      ref = {this.costsMarketingRef}\n                                      label=\"Marketing Costs\"\n                                      locked={false}\n                                      active={false}\n                                      onChange = {e => this.getStateCostsMarketing(e)}/>\n                                  <div style={{marginLeft: '2%', width: '46%'}}>\n                                    <MarketingDropDown\n                                      ref={this.marketingDropDownRef}\n                                      options={marketingSplitOptions}\n                                      defaultValue={marketingSplitOptions[0]}\n                                      onChange={e => this.calcMarketingCosts()}\n                                      />\n                                  </div>\n                                </div>\n                                <div style={{display: 'flex', flexDirection: 'row', marginBottom: '3%'}}>\n                                    <NumberInput\n                                      id= {\"costsDistribution\"}\n                                      pattern=\"[0-9]*\"\n                                      ref = {this.costsDistributionRef}\n                                      label=\"Distribution Costs\"\n                                      locked={false}\n                                      active={false}\n                                      onChange = {e => this.getStateCostsDistribution(e)}/>\n                                    <div>\n                                      <SwitchButton onChange={e => this.changeCheckboxes(\"distribution\")}  checked={this.state.distributionCostChecked}/>\n                                    </div>\n                                </div>\n                                <div style={{display: 'flex', flexDirection: 'row'}}>\n                                    <NumberInput\n                                      id= {\"costsMisc\"}\n                                      pattern=\"[0-9]*\"\n                                      ref = {this.costsMiscRef}\n                                      label=\"Misc. Costs\"\n                                      locked={false}\n                                      active={false}\n                                      onChange = {e => this.getStateCostsMisc(e)}/>\n                                    <div>\n                                      <SwitchButton onChange={e => this.changeCheckboxes(\"misc\")}  checked={this.state.miscCostChecked}/>\n                                    </div>\n                                </div>\n                            </div>\n                          </div>\n                      </div>\n\n              }/>\n\n\n              <Accordion\n                title=\"Advanced Calculations\"\n                body={\n                  <div>\n                    <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'center'}}>\n                      <div style={{flexDirection: 'column', width: '50%', paddingRight: '3%', borderRight: 'thin solid #252c78'}}>\n                        <SmallText text=\"Auto Recoup\" style={{ fontSize: '15px', fontWeight: '600', lineHeight: '1.09', textAlign: 'center', color: '#323747', marginTop: 'auto', marginBottom: 0 }}/>\n                        <SwitchButton onChange={e => this.handleAutoRecoup()} />\n                        <NumberFormat value={`${this.state.recoupStreamsNeeds.toFixed(0)}`} displayType={'text'} thousandSeparator={true} renderText={value => <div style={{ fontSize: '16px', fontWeight: '500', lineHeight: '1.09', textAlign: 'center', color: '#323747', padding: '5% 0% 5% 0%'}}>{`Streams Needed: ${value}`}</div>} />\n                      </div>\n                      <div style={{flexDirection: 'column', paddingLeft: '3%', justifyContent: 'center', width: '50%'}}>\n                        <ToolTip content=\"Advance is included in revenue earned\" direction=\"top\">\n                          <SmallText text=\"Money Goal\" style={{ fontSize: '15px', fontWeight: '600', lineHeight: '1.09', textAlign: 'center', color: '#323747', marginTop: 'auto', marginBottom: 0 }}/>\n                        </ToolTip>\n                        <SwitchButton onChange={e => this.handleMoneyGoalCheckbox()}/>\n                        <NumberInput\n                          id= {\"moneyGoalInput\"}\n                          pattern=\"[0-9]*\"\n                          ref = {this.moneyGoalInputRef}\n                          label=\"I want to Make...\"\n                          locked={false}\n                          active={false}\n                          onChange = {e => this.getStateMoneyGoalInput(e)}/>\n                        <NumberFormat value={`${this.state.moneyGoalStreamsNeeded.toFixed(0)}`} displayType={'text'} thousandSeparator={true} renderText={value => <div style={{ fontSize: '16px', fontWeight: '500', lineHeight: '1.09', textAlign: 'center', color: '#323747', marginTop: '3%'}}>{`Streams Needed: ${value}`}</div>} />\n                      </div>\n                    </div>\n                  </div>\n                }/>\n\n\n                  <div className=\"mobile-results-container\">\n                    <div>\n                      <div>\n                        <SmallText className=\"subtitle\" text=\"Your Results\" />\n                        <NumberFormat value={`${this.state.artistTotalEarnings.toFixed(0)}`} displayType={'text'} thousandSeparator={true} prefix={'$'} renderText={value => <div style={{ fontSize: '26px', fontWeight: 'bold', lineHeight: '1.09', textAlign: 'center', color: '#323747', marginBottom: 0, marginTop: '3%' }}>{`You've Earned: ${value}`}</div>} />\n                        <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'center'}}>\n                          <div style={{display: 'flex', flexDirection: 'column', justifyContent: 'center'}}>\n                            <NumberFormat value={`${this.state.grossTotalRev.toFixed(0)}`} displayType={'text'} thousandSeparator={true} prefix={'$'} renderText={value => <div style={{ fontSize: '20px', fontWeight: '500', lineHeight: '1.09', textAlign: 'center', color: '#323747', marginBottom: '10%'}}>{`Total Revenue Generated: ${value}`}</div>} />\n                            <NumberFormat value={`${this.state.totRecoupe.toFixed(0)}`} displayType={'text'} thousandSeparator={true} prefix={'$'} renderText={value => <div style={{ fontSize: '18px', fontWeight: '500', lineHeight: '1.09', textAlign: 'center', color: '#323747' }}>{`Total Recoupable Money: ${value}`}</div>} />\n                          </div>\n                          <RadialChart series={this.state.seriesRadial} height={200} width={150}/>\n                        </div>\n                      </div>\n                      <div>\n                        <BarChart series={this.state.seriesBar}/>\n                      </div>\n                    </div>\n                  </div>\n\n          </div>\n          <div className=\"footer\">\n            <div style={{width: '95%'}}>\n              <SmallText className=\"subtitle\" text=\"About This Tool:\" style={{}}/>\n              <SmallText text=\"This Streaming Calculator was made to model music streaming revenue, and give more clarity on where streaming revenue goes. This tool should be used as a guide only. These figures are an estimate and do not guarantee earnings.\"/>\n              <a href={'https://nikhilanand3.medium.com/simulating-music-streaming-revenue-59ec1ad1db6'} target={'blank'}>See Our Full Write-up Here</a>\n              <p>Created By: <a href={'https://www.linkedin.com/in/nikhil-anand-/'} target={'blank'}>Nikhil Anand,</a> <a href={'mailto:svincent3@berklee.edu'} target={'blank'}>Sam Vincent,</a> <a href={'https://www.linkedin.com/in/alperrin/'} target={'blank'}>Alexandre Perrin,</a> & <a href={'https://www.linkedin.com/in/pete-dyson-70b61b21/'} target={'blank'}>Pete Dyson</a></p>\n            </div>\n          </div>\n        </div>\n\n        )\n    }\n\n  changeLabelServicesDropDown(e) {\n\n    let lblCosts = 0;\n    if(e.selectedOption !== null) {\n      for(let i=0; i<e.selectedOption.length; i++) {\n        lblCosts += e.selectedOption[i].amt;\n      }\n    }\n    if(this.state.labelServicesCosts !== lblCosts) {\n      this.setState({labelServicesCosts: lblCosts}, () => {this.calculate();})\n    }\n\n  }\n\n  handleMoneyGoalCheckbox() {\n    this.setState({moneyGoalChecked: !this.state.moneyGoalChecked}, () => {\n      this.calculate();\n    })\n  }\n\n  handleAutoRecoup() {\n    this.setState({autoRecoupChecked: !this.state.autoRecoupChecked}, () => {\n      this.calculate();\n    })\n  }\n\n  calcMarketingCosts() {\n    if(this.marketingDropDownRef.current.state.selectedOption !== null && this.state.marketingValSelected !== this.marketingDropDownRef.current.state.selectedOption.value) {\n      this.setState({marketingValSelected: this.marketingDropDownRef.current.state.selectedOption.value}, () => {this.calcTotalCosts();})\n    }\n  }\n\n  changeCheckboxes(whichOne) {\n\n    if(whichOne === \"recording\") {\n      this.setState({recordingCostChecked: !this.state.recordingCostChecked}, () => {this.calculate();})\n    }\n    if(whichOne === \"distribution\") {\n      this.setState({distributionCostChecked: !this.state.distributionCostChecked}, () => {this.calculate();})\n    }\n    if(whichOne === \"misc\") {\n      this.setState({miscCostChecked: !this.state.miscCostChecked}, () => {this.calculate();})\n    }\n  }\n\n  updateStreamSlider(e) {\n    if(this.state.streamNumber !== this.streamsSliderRef.current.state.values[0] && this.streamsSliderRef.current.state.values[0] !== this.estStreamsRef.current.state.value) {\n      const state = this.streamsSliderRef.current.state.values[0];\n      this.estStreamsRef.current.setState({value: state});\n        this.setState({streamNumber: state}, () =>\n        {this.calculate()})\n    }\n  }\n\n  getRoleButton(name){\n\n       if(name === \"artist\" && !this.artistButtonRef.current.state.button) {\n          this.handleRoleButton(\"artist\");\n          this.writerButtonRef.current.setState({button: false});\n          this.bothButtonRef.current.setState({button: false});\n          //this.state.\n       } else if (name === \"writer\" && !this.writerButtonRef.current.state.button) {\n          this.handleRoleButton(\"writer\");\n          this.artistButtonRef.current.setState({button: false});\n          this.bothButtonRef.current.setState({button: false});\n       } else if (name === \"both\" && !this.bothButtonRef.current.state.button) {\n          this.handleRoleButton(\"both\");\n          this.writerButtonRef.current.setState({button: false});\n          this.artistButtonRef.current.setState({button: false});\n       }\n  }\n\n  getButtonClick(id){\n\n    if(this.state.providers[id].ref.current.state.button !== null && this.state.providers[id].ref.current.state.button !== this.state.providers[id].includeInCalculations) {\n      this.toggleMe(id);\n    }\n\n  }\n\n  calcTotalCosts(){\n    let costsTotal = 0;\n\n    if(this.state.recordingCostChecked) costsTotal += this.state.costsRecording;\n    if(this.state.distributionCostChecked) costsTotal += this.state.costsDistribution;\n    if(this.state.miscCostChecked) costsTotal += this.state.costsMisc;\n    if(this.marketingDropDownRef.current.state.selectedOption === null) {\n      costsTotal += this.state.costsMarketing;\n    }\n    else costsTotal += (this.state.costsMarketing * this.marketingDropDownRef.current.state.selectedOption.value)\n\n    if(this.state.recordDealSelected === \"labelServices\") {\n      costsTotal += this.state.labelServicesCosts;\n    }\n\n    //costsTotal = parseFloat(this.state.costsRecording) + parseFloat(this.state.costsMarketing) + parseFloat(this.state.costsDistribution) + parseFloat(this.state.costsMisc);\n\n    this.setState({\n      costsTotal: costsTotal\n    },() => {this.updateRecoupable();\n    })\n\n\n  }\n\n  updateRecoupable(){\n    let ret = this.state.costsTotal + this.state.advance;\n    this.setState({totRecoupe: ret})\n\n  }\n\n  getStateCostsRecording(){\n\n    if(this.costsRecordingRef.current.state.value !== \"\" && parseInt(this.costsRecordingRef.current.state.value) !== this.state.costsRecording) {\n      const e = parseInt(this.costsRecordingRef.current.state.value);\n      this.updateCostsRecording(e);\n    }\n  }\n\n  updateCostsRecording(e){\n\n      this.setState({costsRecording: e}, () => {\n          this.calculate();\n      });\n  }\n\n  getStateCostsMarketing(){\n\n    if(this.costsMarketingRef.current.state.value !== \"\" && parseInt(this.costsMarketingRef.current.state.value) !== this.state.costsMarketing) {\n      const e = parseInt(this.costsMarketingRef.current.state.value);\n      this.updateCostsMarketing(e);\n    }\n  }\n\n  updateCostsMarketing(e){\n\n      this.setState({costsMarketing: e}, () => {\n          this.calculate();\n      });\n  }\n\n  getStateCostsDistribution(){\n\n    if(this.costsDistributionRef.current.state.value !== \"\" && parseInt(this.costsDistributionRef.current.state.value) !== this.state.costsDistribution) {\n      const e = parseInt(this.costsDistributionRef.current.state.value);\n      this.updateCostsDistribution(e);\n    }\n  }\n\n  updateCostsDistribution(e){\n\n      this.setState({costsDistribution: e}, () => {\n          this.calculate();\n      });\n  }\n\n  getStateCostsMisc(){\n\n    if(this.costsMiscRef.current.state.value !== \"\" && parseInt(this.costsMiscRef.current.state.value) !== this.state.costsMisc) {\n      const e = parseInt(this.costsMiscRef.current.state.value);\n      this.updateCostsMisc(e);\n    }\n  }\n\n  updateCostsMisc(e){\n\n      this.setState({costsMisc: e}, () => {\n          this.calculate();\n      });\n  }\n\n  getStateAdvance(){\n\n    if(this.advanceRef.current.state.value !== \"\" && parseInt(this.advanceRef.current.state.value) !== this.state.advance) {\n        const e = parseInt(this.advanceRef.current.state.value);\n        this.updateAdvance(e);\n    }\n  }\n\n  getStatePubDeal(){\n\n    if(this.pubTypeRef.current.state.selectedOption !== null && this.pubTypeRef.current.state.selectedOption.value !== this.state.publishingDealSelected) {\n      const e = this.pubTypeRef.current.state.selectedOption.value;\n      this.handlePublishingDealSelect(e);\n    }\n    //const node = this.dealTypeRef.current;\n  }\n\n  getStateRecDeal(){\n\n    if(this.dealTypeRef.current.state.selectedOption !== null && this.dealTypeRef.current.state.selectedOption.value !== this.state.recordDealSelected) {\n      const e = this.dealTypeRef.current.state.selectedOption.value;\n      this.handleRecDealSelect(e);\n    }\n    //const node = this.dealTypeRef.current;\n  }\n\n  handleMyClick(id){\n\n    //this.setState({role: id});\n    if(id===\"artist\" && this.state.roleTypes[0].selected !== this.state.roleTypes[0].ref.current.state.button) {\n      this.state.roleTypes[0].selected = true;\n      this.state.roleTypes[0].ref.current.setState({button: true});\n      this.state.roleTypes[1].selected = false;\n      this.state.roleTypes[1].ref.current.setState({button: false});\n      this.state.roleTypes[2].selected = false;\n      this.state.roleTypes[2].ref.current.setState({button: false});\n      this.setState({role: \"artist\"}, () => {this.calculate()});\n\n    }\n    if(id===\"writer\" && this.state.roleTypes[1].selected !== this.state.roleTypes[1].ref.current.state.button) {\n      this.state.roleTypes[0].selected = false;\n      this.state.roleTypes[0].ref.current.setState({button: false});\n      this.state.roleTypes[1].selected = true;\n      this.state.roleTypes[1].ref.current.setState({button: true});\n      this.state.roleTypes[2].selected = false;\n      this.state.roleTypes[2].ref.current.setState({button: false});\n      this.setState({role: \"writer\"}, () => {this.calculate()});\n    }\n    if(id===\"both\" && this.state.roleTypes[2].selected !== this.state.roleTypes[2].ref.current.state.button) {\n      this.state.roleTypes[0].selected = false;\n      this.state.roleTypes[0].ref.current.setState({button: false});\n      this.state.roleTypes[1].selected = false;\n      this.state.roleTypes[1].ref.current.setState({button: false});\n      this.state.roleTypes[2].selected = true;\n      this.state.roleTypes[2].ref.current.setState({button: true});\n      this.setState({role: \"both\"}, () => {this.calculate()});\n    }\n  }\n\n  changeStreams(e){\n\n      if(this.estStreamsRef.current.state.value !== \"\" && parseInt(this.estStreamsRef.current.state.value) !== this.state.streamNumber) {\n          const l = parseInt(this.estStreamsRef.current.state.value);\n          this.updateStreams(l);\n      }\n  }\n\n  updateStreams(e){\n      this.setState({streamNumber: e}, () => {\n          this.streamsSliderRef.current.setState({values: [e]})\n          this.estStreamsRef.current.setState({value: e}, () => {this.calculate();})\n      });\n  }\n\n  updateAdvance(e){\n\n      this.setState({advance: e}, () => {\n          this.calculate();\n      });\n   }\n\n  setSliderValue(val){\n      this.setState( {sliderValue: val});\n      this.calculate();\n  }\n\n  updateSlider(e){\n\n      //val = document.getElementById(\"splitSlider\").value()\n      this.setState( {sliderValue: e.target.value})\n      this.calculate();\n  }\n\n  buildPublishingDealSelect(){\n      let fullTrad = {\n          id: 0,\n          name: \"Full/Traditional\"\n      }\n      let coPublishing = {\n          id: 1,\n          name: \"Co-Publishing\"\n      }\n      let adminDeal = {\n          id: 2,\n          name: \"Admin Deal\"\n      }\n      let noDeal = {\n          id: 3,\n          name: \"No Deal\"\n      }\n      let deals = [fullTrad, coPublishing, adminDeal, noDeal]\n      this.setState( {publishDeal: deals})\n  }\n\n  handlePublishingDealSelect(e){\n\n      this.setState({publishingDealSelected: e}, () => {this.calculate()});\n  }\n\n  handleRoleButton(which){\n\n      this.setState({role: which})\n      this.calculate();\n  }\n\n  handleRecDealSelect(e){\n\n     if(e === \"royalty\") {\n       this.setState({sliderValue: 20});\n       this.changeSliderVal(20);\n     } else if (e === \"netProfit\") {\n       this.setState({sliderValue: 50});\n       this.changeSliderVal(50);\n     } else if (e === \"distributionPercent\") {\n       this.setState({sliderValue: 70});\n       this.changeSliderVal(70);\n     } else if (e === \"distributionFee\") {\n       this.setState({sliderValue: 100});\n       this.changeSliderVal(100);\n     } else if (e === \"labelServices\") {\n       this.setState({sliderValue: 80});\n       this.changeSliderVal(80);\n     }\n     this.setState({recordDealSelected: e}, () => {this.calculate()})\n  }\n\n  changeSliderVal(val){\n      this.dealSliderRef.current.setState({values: [val]});\n  }\n\n  doSliderStuff(e){\n    if(this.dealSliderRef.current.state.values !== null && this.dealSliderRef.current.state.values[0] !== this.state.sliderValue) {\n      this.setState({sliderValue: this.dealSliderRef.current.state.values[0]}, () => {this.calculate();});\n    }\n  }\n\n  buildRecordDealSelect(){\n    let royalty = {\n        id: 0,\n        name: \"Royalty\"\n    };\n    let netProfit = {\n        id: 1,\n        name: \"Net Profit\"\n    };\n    let distributionPercent = {\n        id: 2,\n        name: \"Distribution Percent\"\n    };\n    let labelServices = {\n        id: 3,\n        name: \"Label Services\"\n    }\n    let rls = [royalty, netProfit, distributionPercent, labelServices];\n    this.setState( {recordDeal: rls} );\n  }\n\n  toggleMe(index){\n    this.state.providers[index].includeInCalculations = !this.state.providers[index].includeInCalculations;\n    this.calculate();\n  }\n\n  calculate(){\n      this.calcTotalCosts();\n      this.getPublisherShare();\n      let artistRecordShare = 0;\n      let labelShare = 0;\n      let artistUnrecoupedAmount = 0;\n      let totalCosts = parseFloat(this.state.costsRecording) + parseFloat(this.state.costsMarketing) + parseFloat(this.state.costsDistribution) + parseFloat(this.state.costsMisc);\n      let totalMoneyToRecoupe = parseFloat(this.state.advance) + totalCosts;\n      let grossRevenue = 0;\n      if(!this.state.autoRecoupChecked && !this.state.moneyGoalChecked) grossRevenue = this.state.streamNumber * this.weightedAverageOfSelected();\n      if (this.state.autoRecoupChecked) grossRevenue = this.state.recoupStreamsNeeds * this.weightedAverageOfSelected();\n      if (this.state.moneyGoalChecked) grossRevenue = this.state.moneyGoalStreamsNeeded * this.weightedAverageOfSelected();\n\n      if (this.state.recordDealSelected === \"royalty\") {\n          // Artist Split\n          if((grossRevenue * (parseFloat(this.state.sliderValue)/100)) <= totalMoneyToRecoupe){\n            artistRecordShare = 0;\n            artistUnrecoupedAmount = Math.abs((grossRevenue * (parseFloat(this.state.sliderValue)/100)) - totalMoneyToRecoupe);\n          } else {\n            artistRecordShare = (grossRevenue * (parseFloat(this.state.sliderValue)/100)) - totalMoneyToRecoupe;\n          }\n          labelShare = grossRevenue * (1-(parseFloat(this.state.sliderValue)/100));\n\n      } else if (this.state.recordDealSelected === \"netProfit\" || this.state.recordDealSelected === \"distributionPercent\" || this.state.recordDealSelected === \"Distribution Fee\") {\n          let profit = (grossRevenue - this.state.costsTotal);\n          // Artist Split\n          if(((profit * (parseFloat(this.state.sliderValue)/100)) - parseFloat(this.state.advance)) < 0){\n            artistRecordShare = 0;\n            artistUnrecoupedAmount = Math.abs(((grossRevenue - totalCosts)*(parseFloat(this.state.sliderValue)/100)) - parseFloat(this.state.advance));\n          } else {\n            artistRecordShare = (profit * (parseFloat(this.state.sliderValue)/100)) - parseFloat(this.state.advance);\n          }\n          // Label Split Net Profit, Distributions\n          if(this.state.recordDealSelected === \"netProfit\" || this.state.recordDealSelected === \"distributionPercent\") {\n              if(profit < 0){\n                  labelShare = 0;\n              } else {\n                  labelShare = (profit * (1-(parseFloat(this.state.sliderValue)/100)));\n              }\n          } else labelShare = grossRevenue - artistRecordShare;\n\n\n      } else if (this.state.recordDealSelected === \"labelServices\") {\n          // Artist Split\n          if((grossRevenue * (parseFloat(this.state.sliderValue)/100)) <= totalMoneyToRecoupe){\n            artistRecordShare = 0;\n          } else {\n            artistRecordShare = (grossRevenue * (parseFloat(this.state.sliderValue)/100)) - totalMoneyToRecoupe;\n          }\n          labelShare = grossRevenue * (1-(parseFloat(this.state.sliderValue)/100)) + this.state.costsTotal;//extra menu items would be factored into costs\n      }\n\n      this.setState({\n        grossRecordingRev: grossRevenue,\n        totRecoupe: totalMoneyToRecoupe,\n        artistRecordEarnings: artistRecordShare,\n        labelShare: labelShare,\n        artistUnrecoupedAmount: artistUnrecoupedAmount,\n        }, () => {\n\n          this.getArtistTotalEarnings();\n          this.getGrossTotalEarnings();\n          this.updateGraphs();\n          this.percentRecouped();\n          this.autoRecoup();\n          this.moneyGoal();\n        });\n\n\n  }\n\n  updateGraphs() {\n    this.setState({seriesBar:\n      [{\n              name: 'From Recording',\n              data: [this.state.artistRecordEarnings.toFixed(0), this.state.labelShare.toFixed(0), 0]\n            }, {\n              name: 'From Writing',\n              data: [this.state.artistWriterEarnings.toFixed(0), this.state.labelPublishingShare.toFixed(0), this.state.publisherShare.toFixed(0)]\n            },{\n              name: 'From Advance',\n              data: [this.state.advance.toFixed(0), 0, 0]\n            }\n          ]\n    })\n  }\n\n  getPublisherShare(){\n    let pubGrossRevenue = avgPubPayout * this.state.streamNumber;\n    let pubPerformanceRevenue = pubGrossRevenue * .5;\n    let pubMechanicalRevenue = pubGrossRevenue * .5;\n    let pubPROAdminFee = pubPerformanceRevenue * .165;\n    let pubMechanicalAdminFee = pubMechanicalRevenue * .15;\n    let pubMechanicalRecordFee = (pubMechanicalRevenue - pubMechanicalAdminFee) * .3;\n    let publisherPercentage;\n\n    switch(this.state.publishingDealSelected) {\n      case 'Full/Traditional':\n        publisherPercentage = 1.0;\n        break;\n      case 'Co-Publishing':\n        publisherPercentage = 0.5;\n        break;\n      case 'Admin':\n        publisherPercentage = 0.1;\n        break;\n      case 'No Deal':\n        publisherPercentage = 0.0;\n        break;\n      default:\n        publisherPercentage = 0.0;\n    }\n\n    let publisherShare = ((pubPerformanceRevenue - pubPROAdminFee) * .5) * publisherPercentage\n    let artistWriterEarnings = ((pubPerformanceRevenue - pubPROAdminFee) * .5) + (((pubPerformanceRevenue - pubPROAdminFee) * .5) * (1 - publisherPercentage)) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))\n\n    this.setState({\n      publisherShare: publisherShare,\n      artistWriterEarnings: artistWriterEarnings,\n      grossPubRev: pubGrossRevenue,\n      labelPublishingShare: pubMechanicalRecordFee\n    });\n  }\n\n  weightedAverageOfSelected(){\n\n      let sum = 0.0;\n      for(let i=0; i < this.state.providers.length; i++) {\n        if(this.state.providers[i].includeInCalculations) {\n              sum += (this.state.providers[i].payoutPerStream * this.state.providers[i].marketShareStreams)\n          }\n      }\n      let sumOfWeights = 0.0;\n      for(let i=0;i < this.state.providers.length; i++) {\n        if(this.state.providers[i].includeInCalculations) {\n          sumOfWeights += this.state.providers[i].marketShareStreams\n        }\n      }\n      if(sumOfWeights <= 0.0) return 0.0\n      return sum/sumOfWeights;\n  }\n\n  getArtistTotalEarnings(){\n      if(this.state.role === \"both\") {\n          this.setState({artistTotalEarnings: this.state.artistRecordEarnings + (this.state.artistWriterEarnings > 0 ? this.state.artistWriterEarnings : 0)});\n      } else if(this.state.role === \"artist\") {\n          this.setState({artistTotalEarnings: this.state.artistRecordEarnings});\n      } else if(this.state.role === \"writer\") {\n          this.setState({artistTotalEarnings: (this.state.artistWriterEarnings > 0 ? this.state.artistWriterEarnings : 0)});\n      }\n  }\n\n  getGrossTotalEarnings(){\n    this.setState({grossTotalRev: this.state.grossRecordingRev + this.state.grossPubRev}, () => {});\n  }\n\n  autoRecoup(){\n    let recoupStreamsNeeds;\n\n    if(this.state.recordDealSelected === \"royalty\" || this.state.recordDealSelected === \"labelServices\"){\n\t     recoupStreamsNeeds = (this.state.totRecoupe/(parseFloat(this.state.sliderValue)/100)) / this.weightedAverageOfSelected()\n     } else {\n       recoupStreamsNeeds = ((this.state.costsTotal + this.state.advance) / (parseFloat(this.state.sliderValue)/100)) / this.weightedAverageOfSelected()\n     }\n\n    this.setState({\n      recoupStreamsNeeds: recoupStreamsNeeds\n    })\n  }\n\n  getStateMoneyGoalInput(){\n\n    if(this.moneyGoalInputRef.current.state.value !== \"\" && parseInt(this.moneyGoalInputRef.current.state.value) !== this.state.moneyGoalInput)\n      {\n       const e = parseInt(this.moneyGoalInputRef.current.state.value);\n       this.updateMoneyGoal(e);\n      }\n  }\n\n  updateMoneyGoal(e){\n\n    this.setState({moneyGoalInput: e}, () => {this.calculate();});\n\n  }\n\n  moneyGoal(){\n    let moneyGoalInput = parseFloat(this.state.moneyGoalInput);\n    let moneyGoalStreamsNeeded;\n\n    if(this.state.recordDealSelected === \"royalty\" || this.state.recordDealSelected === \"labelServices\"){\n      moneyGoalStreamsNeeded = (moneyGoalInput - parseFloat(this.state.advance) + (this.state.totRecoupe)) / ((parseFloat(this.state.sliderValue)/100) * this.weightedAverageOfSelected())\n    } else {\n      moneyGoalStreamsNeeded = ((moneyGoalInput / (parseFloat(this.state.sliderValue)/100)) + parseFloat(this.state.costsTotal)) / this.weightedAverageOfSelected()\n    }\n\n    this.setState({\n      moneyGoalStreamsNeeded: moneyGoalStreamsNeeded\n    })\n  }\n\n  percentRecouped(){\n    let recoupPercent = 0;\n    if(this.state.totRecoupe > 0) {\n      if ((this.state.artistRecordEarnings / this.state.totRecoupe) > 1){\n        recoupPercent = 100\n      } else {\n        if(this.state.grossRecordingRev !== 0) {\n          recoupPercent = (((this.state.totRecoupe - this.state.artistUnrecoupedAmount)/this.state.totRecoupe) * 100).toFixed(0)\n        } else {\n          recoupPercent = 0\n        }\n      }\n    }\n    //return recoupPercent;\n    this.setState({seriesRadial: [recoupPercent]},() => {\n    // this.calculate();\n  });\n  }\n\n  buildLabelServicesSelect(){\n      let stemDistribution = {\n          id: 0,\n          value: \"stemDistribution\",\n          label: 'Stem Distribution',\n          amt: (parseInt(this.state.artistRecordEarnings)* 0.1),\n          selected: true\n\n      }\n      let advertising = {\n          id: 1,\n          value: \"advertising\",\n          label: 'Avertising',\n          amt: 2500,\n          selected: false\n\n      }\n      let analytics = {\n          id: 2,\n          value: \"analytics\",\n          label: 'Analytics',\n          amt: 2500,\n          selected: false\n\n      }\n      let royaltyAccounting = {\n          id: 3,\n          value: \"royaltyAccounting\",\n          label: 'Royalty Accounting',\n          amt: (parseInt(this.state.artistRecordEarnings) * 0.5),\n          selected: false\n\n      }\n      let splitPayments = {\n          id: 4,\n          value: \"splitPayments\",\n          label: 'Split Payments',\n          amt: 1000,\n          selected: false\n\n      }\n\n      let services = [stemDistribution, advertising, analytics, royaltyAccounting, splitPayments]\n      this.setState( {labelServices: services})\n  }\n\n}\n\n\nexport default MobileVersion;\n","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/ToolTip.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SelectButton.js",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"129","replacedBy":"133"},{"ruleId":"131","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":2,"column":41,"nodeType":"137","messageId":"138","endLine":2,"endColumn":46},{"ruleId":"135","severity":1,"message":"139","line":97,"column":24,"nodeType":"137","messageId":"138","endLine":97,"endColumn":30},{"ruleId":"135","severity":1,"message":"140","line":3,"column":8,"nodeType":"137","messageId":"138","endLine":3,"endColumn":14},{"ruleId":"135","severity":1,"message":"141","line":2,"column":10,"nodeType":"137","messageId":"138","endLine":2,"endColumn":16},{"ruleId":"135","severity":1,"message":"142","line":3,"column":9,"nodeType":"137","messageId":"138","endLine":3,"endColumn":25},{"ruleId":"135","severity":1,"message":"143","line":3,"column":27,"nodeType":"137","messageId":"138","endLine":3,"endColumn":33},{"ruleId":"135","severity":1,"message":"140","line":3,"column":8,"nodeType":"137","messageId":"138","endLine":3,"endColumn":14},{"ruleId":"144","severity":1,"message":"145","line":681,"column":7,"nodeType":"146","endLine":681,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":683,"column":7,"nodeType":"146","endLine":683,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":685,"column":7,"nodeType":"146","endLine":685,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":691,"column":7,"nodeType":"146","endLine":691,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":693,"column":7,"nodeType":"146","endLine":693,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":695,"column":7,"nodeType":"146","endLine":695,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":700,"column":7,"nodeType":"146","endLine":700,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":702,"column":7,"nodeType":"146","endLine":702,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":704,"column":7,"nodeType":"146","endLine":704,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":829,"column":5,"nodeType":"146","endLine":829,"endColumn":32},{"ruleId":"135","severity":1,"message":"147","line":16,"column":8,"nodeType":"137","messageId":"138","endLine":16,"endColumn":16},{"ruleId":"144","severity":1,"message":"145","line":669,"column":7,"nodeType":"146","endLine":669,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":671,"column":7,"nodeType":"146","endLine":671,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":673,"column":7,"nodeType":"146","endLine":673,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":679,"column":7,"nodeType":"146","endLine":679,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":681,"column":7,"nodeType":"146","endLine":681,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":683,"column":7,"nodeType":"146","endLine":683,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":688,"column":7,"nodeType":"146","endLine":688,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":690,"column":7,"nodeType":"146","endLine":690,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":692,"column":7,"nodeType":"146","endLine":692,"endColumn":30},{"ruleId":"144","severity":1,"message":"145","line":817,"column":5,"nodeType":"146","endLine":817,"endColumn":32},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],["148"],["149"],"no-unused-vars","'Ticks' is defined but never used.","Identifier","unusedVar","'update' is assigned a value but never used.","'styled' is defined but never used.","'render' is defined but never used.","'TransitionMotion' is defined but never used.","'spring' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'Checkbox' is defined but never used.","no-global-assign","no-unsafe-negation"]


>>>>>>> 1d5b153b1fc8ae3d7bcb115858b0809343f2e456
