[{"/Users/nikhil/Desktop/MusicStreamingCalculator/src/index.js":"1","/Users/nikhil/Desktop/MusicStreamingCalculator/src/reportWebVitals.js":"2","/Users/nikhil/Desktop/MusicStreamingCalculator/src/App.js":"3","/Users/nikhil/Desktop/MusicStreamingCalculator/src/CalcPage.js":"4","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/ButtonGroup.js":"5","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/BarChart.js":"6","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SmallText.js":"7","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/MultiDropDown.js":"8","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/DealSplitSlider.js":"9","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/StreamSlider.js":"10","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SwitchButton.js":"11","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SingleDropDown.js":"12","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/RadialChart.js":"13","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/DspButton.js":"14","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/NumberInput.js":"15","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/TitleText.js":"16","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/ButtonGroupTest.js":"17","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/Accordion.js":"18","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/Checkbox.js":"19","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/MarketingCostDropDown.js":"20","/Users/nikhil/Desktop/MusicStreamingCalculator/src/DesktopVersion.js":"21","/Users/nikhil/Desktop/MusicStreamingCalculator/src/MobileVersion.js":"22"},{"size":500,"mtime":1607082597708,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1607082597709,"results":"25","hashOfConfig":"24"},{"size":492,"mtime":1608506058774,"results":"26","hashOfConfig":"24"},{"size":29831,"mtime":1608204379517,"results":"27","hashOfConfig":"24"},{"size":930,"mtime":1608050503437,"results":"28","hashOfConfig":"24"},{"size":1064,"mtime":1608476809767,"results":"29","hashOfConfig":"24"},{"size":245,"mtime":1607779102837,"results":"30","hashOfConfig":"24"},{"size":721,"mtime":1608404692010,"results":"31","hashOfConfig":"24"},{"size":3698,"mtime":1608062160926,"results":"32","hashOfConfig":"24"},{"size":3430,"mtime":1608467673889,"results":"33","hashOfConfig":"24"},{"size":1076,"mtime":1608201499780,"results":"34","hashOfConfig":"24"},{"size":782,"mtime":1608486720833,"results":"35","hashOfConfig":"24"},{"size":2049,"mtime":1608302082741,"results":"36","hashOfConfig":"24"},{"size":894,"mtime":1607693288170,"results":"37","hashOfConfig":"24"},{"size":1770,"mtime":1608484879705,"results":"38","hashOfConfig":"24"},{"size":197,"mtime":1607779100064,"results":"39","hashOfConfig":"24"},{"size":2217,"mtime":1608045912999,"results":"40","hashOfConfig":"24"},{"size":786,"mtime":1608466844668,"results":"41","hashOfConfig":"24"},{"size":456,"mtime":1608484681386,"results":"42","hashOfConfig":"24"},{"size":1276,"mtime":1608490979615,"results":"43","hashOfConfig":"24"},{"size":40400,"mtime":1608553729002,"results":"44","hashOfConfig":"24"},{"size":577,"mtime":1608505989626,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"xbyk7m",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"48"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"48"},"/Users/nikhil/Desktop/MusicStreamingCalculator/src/index.js",[],["101","102"],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/reportWebVitals.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/App.js",["103","104","105"],"import React from 'react';\nimport './App.css';\nimport CalcPage from './CalcPage.js';\nimport DesktopVersion from './DesktopVersion.js';\nimport MobileVersion from './MobileVersion.js';\nimport {BrowserView, MobileView, isBrowser, isMobile} from \"react-device-detect\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserView>\n        <DesktopVersion/>\n      </BrowserView>\n      <MobileView>\n        <MobileVersion/>\n      </MobileView>\n    </div>\n  );\n}\n\n\nexport default App;\n","/Users/nikhil/Desktop/MusicStreamingCalculator/src/CalcPage.js",["106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132"],"import React from 'react';\nimport './App.css';\nimport SmallText from './components/SmallText.js';\n//import TabGroup from './components/ButtonGroup.js';\nimport SingleDropDown from './components/SingleDropDown.js';\nimport NumberInput from './components/NumberInput.js';\nimport DspButton from './components/DspButton.js';\nimport DealSplitSlider from './components/DealSplitSlider.js';\nimport TabGroupTwo from './components/ButtonGroupTest.js';\n\n\n\nconst labelDealOptions = [\n  { value: 'royalty', label: 'Royalty' },\n  { value: 'netProfit', label: 'Net Profit' },\n  { value: 'distributionPercent', label: 'Distribution (%)' },\n  { value: 'distributionFee', label: 'Distribution (fee)' },\n  { value: 'labelServices', label: 'Label Services' }\n]\n\nconst pubDealOptions = [\n  { value: 'Full/Traditional', label: 'Full/Traditional' },\n  { value: 'Co-Publishing', label: 'Co-publising' },\n  { value: 'Admin', label: 'Admin' },\n  { value: 'No Deal', label: 'No Deal' }\n]\n\nconst marketingSplitOptions = [\n  { value: 0.0, label: '0%' },\n  { value: 0.5, label: '50%' },\n  { value: 1.0, label: '100%' }\n]\n\nconst labelServicesOptions = [\n  { value: 'steamDistribution', label: 'Steam Distribution' },\n  { value: 'avertising', label: 'Avertising' },\n  { value: 'analytics', label: 'Analytics' },\n  { value: 'royaltyAccounting', label: 'Royalty Accounting' },\n  { value: 'splitPayments', label: 'Split Payments' },\n]\n\nlet recArtist = {\n  name: \"Recording Artist Only\",\n  id: \"artist\",\n  ref: React.createRef(),\n  selected: false\n}\nlet recWriter = {\n  name: \"Writer Only\",\n  id: \"writer\",\n  ref: React.createRef(),\n  selected: false\n}\nlet recBoth = {\n  name: \"Both\",\n  id: \"both\",\n  ref: React.createRef(),\n  selected: true\n}\n\nconst roleTypes = [recArtist, recWriter, recBoth];\n\nconst ce = React.createElement;\n\n//average / approx payout for publishing for stream\nconst avgPubPayout = 0.0007174565191\n\n        //handling dsps\n        let spotify = {\n          id: 0,\n          ref: React.createRef(),\n          name: \"Spotify\",\n          payoutPerStream: 0.00331,\n          marketShareStreams: .2922,\n            marketShareDollars: .4893,\n            includeInCalculations: true\n        };\n        let apple = {\n          id: 1,\n          ref: React.createRef(),\n          name: \"Apple Music\",\n          payoutPerStream: 0.00495,\n          marketShareStreams: .0995,\n            marketShareDollars: .2497,\n            includeInCalculations: true\n        };\n        let youtube = {\n          id: 2,\n          ref: React.createRef(),\n          name: \"Youtube Content ld\",\n          payoutPerStream: 0.00028,\n          marketShareStreams: .4858,\n            marketShareDollars: .0699,\n            includeInCalculations: true\n        };\n        let amazon = {\n          id: 3,\n          ref: React.createRef(),\n          name: \"Amazon Unlimited\",\n          payoutPerStream: 0.01175,\n          marketShareStreams: .0068,\n            marketShareDollars: .0404,\n            includeInCalculations: true\n        };\n        let google = {\n          id: 4,\n          ref: React.createRef(),\n          name: \"Google Play\",\n          payoutPerStream: 0.00543,\n          marketShareStreams: .0112,\n            marketShareDollars: .0308,\n            includeInCalculations: true\n        };\n        let pandora = {\n          id: 5,\n          ref: React.createRef(),\n          name: \"Pandora\",\n          payoutPerStream: 0.00155,\n          marketShareStreams: .0386,\n            marketShareDollars: .0303,\n            includeInCalculations: true\n        };\n        let deezer = {\n          id: 6,\n          name: \"Deezer\",\n          ref: React.createRef(),\n          payoutPerStream: 0.00567,\n          marketShareStreams: .0091,\n            marketShareDollars: .026,\n            includeInCalculations: true\n        };\n        let amazonDig = {\n          id: 7,\n          ref: React.createRef(),\n          name: \"Amazon Digital Services\",\n          payoutPerStream: 0.00395,\n          marketShareStreams: .0095,\n            marketShareDollars: .019,\n            includeInCalculations: true\n        };\n        let tidal = {\n          id: 8,\n          ref: React.createRef(),\n          name: \"TIDAL\",\n          payoutPerStream: 0.00927,\n          marketShareStreams: 0.0021,\n            marketShareDollars: 0.0098,\n            includeInCalculations: true\n        };\n        let others = {\n          id: 9,\n          ref: React.createRef(),\n          name: \"Napster / Rhapsody\",\n          payoutPerStream: 0.0111,\n          marketShareStreams: 0.0014,\n            marketShareDollars: 0.0080,\n            includeInCalculations: true\n        };\n\n\n\n//console.log(act)\n\nclass CalcPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.dealTypeRef = React.createRef();\n        this.tabGroupRef = React.createRef();\n        this.pubTypeRef = React.createRef();\n        this.advanceRef = React.createRef();\n        this.costsRef = React.createRef();\n        this.artistButtonRef = React.createRef();\n        this.writerButtonRef = React.createRef();\n        this.bothButtonRef = React.createRef();\n        this.tabsRef = React.createRef();\n        this.dealSliderRef = React.createRef();\n\n\n        this.state = {\n            providers: [spotify, apple, youtube, amazon, google, pandora, deezer, amazonDig, tidal, others],\n            streamNumber: null,\n            role: null,\n            recordDeal: [],\n            publishDeal: [],\n            sliderValue: 50,\n            recordDealSelected: null,\n            publishingDealSelected: null,\n            advance: 0,\n            costs: 0,\n            grossRev: 0,\n            totRecoupe: 0,\n            publisherShare: 0,\n            writerEarnings: 0,\n            totalEarnings: 0,\n            roleTypes: roleTypes\n        };\n\n    }\n\n\n    componentDidMount() {\n        //console.log(\"mounted\");\n        this.buildRecordDealSelect();\n        this.handleRoleButton(\"Writer & Artist\");\n        this.buildPublishingDealSelect();\n        this.setSliderValue(50);\n        this.testMap();\n        //this.buildDspsArr();\n        this.setInitialRoleState();\n        this.setInitialStates();\n    }\n\n\n    render() {\n      return (\n           <div>\n              <h2>Welcome to the revenue calculator</h2>\n              <input\n                type = \"text\"\n                placeholder = \"Enter Est Streams\"\n                onChange = {e => this.changeStreams(e)}\n              />\n              <br />\n              <SmallText text=\"Role: \"/>\n              {this.state.roleTypes.map(type => (\n                <DspButton ref={type.ref}\n                  key={type.id}\n                  //active={type.selected}\n                  onChange={e => this.handleMyClick(type.id)}\n                  text={type.name}\n                />\n\n          ))}\n              <p> {this.state.role} </p>\n              <br />\n              <SmallText text=\"Record Deal Type: \"/>\n              <SingleDropDown ref={this.dealTypeRef}\n\n                  options={labelDealOptions}\n                  onChange = {e => this.getStateRecDeal(e)}\n              />\n              <br />\n              <SmallText text=\"Publishing Deal Type: \"/>\n              <SingleDropDown ref={this.pubTypeRef}\n                  options={pubDealOptions}\n                  onChange = {e => this.getStatePubDeal(e)}\n              />\n              <br />\n              <SmallText text=\"Deal Split: \"/>\n              <DealSplitSlider ref={this.dealSliderRef}\n                  onChange = {e => this.doSliderStuff(e)}\n              />\n              <br />\n              <SmallText text=\"Guaranteed Income: \"/>\n              <NumberInput ref={this.advanceRef}\n                id= {\"numInput\"}\n                label = \"From Advance\"\n                locked = {false}\n                active = {false}\n                onChange = {e => this.getStateAdvance(e)}\n              />\n              <br />\n              <SmallText text=\"Costs: \"/>\n              <NumberInput ref={this.costsRef}\n                id = {\"costInput\"}\n                label = \"Costs\"\n                locked = {false}\n                active = {false}\n                onChange = {e => this.getStateCosts(e)}\n              />\n              <br />\n              <SmallText text=\"Recoupable: \"/>\n              <input\n                 type=\"checkbox\"\n              />\n              <br />\n              <SmallText text=\"DSPs\"/>\n              <div>\n                {this.state.providers.map((provider) =>\n                   <DspButton ref={provider.ref}\n                     key={provider.id}\n                     text={provider.name}\n                     onChange = {e => this.getButtonClick(provider.id)}\n                   />\n                )}\n              </div>\n              <br />\n              <SmallText text=\"Gross Revenue: \"/>\n              <input\n                value = {this.state.grossRev}\n              />\n              <SmallText text=\"Total Earnings\"/>\n              <input\n                value = {this.state.totalEarnings}\n              />\n              <SmallText text=\"total money needed to recoupe\"/>\n              <input\n                value = {\"0\"}\n                />\n              <SmallText text=\"Label Earnings\"/>\n              <input\n                value = {this.state.publisherShare}\n              />\n              <SmallText text=\"Writer Earnings\"/>\n              <input\n                value = {this.state.writerEarnings}\n              />\n              <SmallText text=\"Unrecouped: \"/>\n\n           </div>\n        );\n\n\n\n      /*<!--\n      return ce('div', {ref: 'this.myRef'},\n        ce('h2', {className: \"font\"}, 'Welcome to the Revenue Calculator'),\n            ce('input', {id: \"estStreams\", type: \"text\", placeholder: \"Enter Est. Streams\", onChange: e => this.changeStreams(e)}),\n            ce('br'),\n            ce('text', null, 'Role: '),\n            /*ce('select', {onChange: e => this.handleRoleSelect(e)},\n                this.state.roles.map(role => ce('option', {key: role.id}, role.name))\n                ),*//*\n            ce('button', {onClick: e => this.handleRoleButton(\"artist\")}, 'Artist Only'),\n            ce('button', {onClick: e => this.handleRoleButton(\"writer\")}, 'Writer Only'),\n            ce('button', {onClick: e => this.handleRoleButton(\"both\")}, 'Writer & Artist'),\n            ce('br'),\n            ce('text', null, 'Record Deal Type: '),\n            ce('select', {onChange: e => this.handleRecDealSelect(e)},\n                this.state.recordDeal.map(deal => ce('option', {key: deal.id}, deal.name))\n                ),\n            ce('br'),\n            ce('text', null, 'Publishing Deal Type: '),\n            ce('select', {onChange: e => this.handlePublishingDealSelect(e)},\n                this.state.publishDeal.map(deal => ce('option', {key: deal.id}, deal.name))\n                ),\n            ce('br'),\n            ce('text', null, 'Deal Split: '),\n            ce('input', {type: 'range', ref: 'sliderRef', min: '1', max: '100', id: 'splitSlider', onChange: e => this.updateSlider(e)}),\n            ce('text', null, 'Guaranteed Income: '),\n            ce('input', {id: \"fromAdvance\", placeholder: \"From Advance\", onChange: e => this.updateAdvance(e)}),\n            ce('br'),\n            ce('text', null, 'Costs: '),\n            ce('input', {placeholder: 'Costs', onChange: e => this.updateCosts(e)}),\n            ce('br'),\n            ce('text', null, 'Recoupable: '),\n            ce('input', {type: 'checkbox', checked: 'true'}),\n            ce('br'),\n            ce('text', null, 'DSPs'),\n            ce('br'),\n            ce('table', {id: 'dspTable'},\n              ce('thead', null, ce('tr', null, ce('th', null, \"Platform\"), ce('th', null, \"Include\"))),\n              ce('tbody', null, this.state.providers.map(provider => ce('tr', null, ce('td', null, ce('input', {placeholder: provider.name})), ce('td', null, ce('input', {type: 'checkbox', checked: provider.includeInCalculations, onChange: e => this.toggleMe(provider.id)})))))\n            ),\n            ce('br'),\n            //ce('button', {onClick: e => this.calculate()}, 'Calculate'),\n            //ce('br'),\n            ce('text', null, 'Total Revenue: '),\n            ce('br'),\n            ce('text', null, 'Gross Revenue: '),\n            ce('input', {value: this.state.grossRev}),\n            ce('br'),\n            ce('text', null, 'Total Money Needed to Recoupe: '),\n            ce('input', {value: 0}),\n            ce('br'),\n            ce('text', null, 'Unrecouped: '),\n            ce('br'),\n            ce('text', null, 'Label Earnings: '),\n            ce('input', {value: this.state.publisherShare}),\n            ce('text', null, 'Writer Earnings: '),\n            ce('input', {value: this.state.writerEarnings}),\n            ce('br'),\n            ce('text', null, 'TOTAL EARNINGS: '),\n            ce('input', {value: this.state.totalEarnings}),\n            ce('br')\n\n        )-->*/\n\n    }\n\n    handleMyClick(id) {\n      //console.log(\"clicked on \" + id);\n      //console.log(this.state.roleTypes[0].ref.current.state.button);\n\n      //this.setState({role: id});\n      if(id===\"artist\" && this.state.roleTypes[0].selected != this.state.roleTypes[0].ref.current.state.button) {\n        this.setState({role: \"artist\"});\n        this.state.roleTypes[0].selected = true;\n        this.state.roleTypes[0].ref.current.setState({button: true});\n        this.state.roleTypes[1].selected = false;\n        this.state.roleTypes[1].ref.current.setState({button: false});\n        this.state.roleTypes[2].selected = false;\n        this.state.roleTypes[2].ref.current.setState({button: false});\n        this.calculate();\n      }\n      if(id===\"writer\" && this.state.roleTypes[1].selected != this.state.roleTypes[1].ref.current.state.button) {\n        this.setState({role: \"writer\"});\n        this.state.roleTypes[0].selected = false;\n        this.state.roleTypes[0].ref.current.setState({button: false});\n        this.state.roleTypes[1].selected = true;\n        this.state.roleTypes[1].ref.current.setState({button: true});\n        this.state.roleTypes[2].selected = false;\n        this.state.roleTypes[2].ref.current.setState({button: false});\n        this.calculate();\n      }\n      if(id===\"both\" && this.state.roleTypes[2].selected != this.state.roleTypes[2].ref.current.state.button) {\n        this.setState({role: \"both\"});\n        this.state.roleTypes[0].selected = false;\n        this.state.roleTypes[0].ref.current.setState({button: false});\n        this.state.roleTypes[1].selected = false;\n        this.state.roleTypes[1].ref.current.setState({button: false});\n        this.state.roleTypes[2].selected = true;\n        this.state.roleTypes[2].ref.current.setState({button: true});\n        this.calculate();\n      }\n    }\n\n    getRoleTypeClick() {\n      console.log(\"<<<<<<<<<<<\" + roleTypes);\n    }\n\n    changeSliderVal(val) {\n        this.dealSliderRef.current.setState({values: [val]});\n    }\n\n    doSliderStuff(e) {\n      console.log(this.dealSliderRef.current.state.values);\n      if(this.dealSliderRef.current.state.values != null && this.dealSliderRef.current.state.values[0] != this.state.sliderValue) {\n        //console.log(\"setting slider state to: \" + this.dealSliderRef.current.state.values[0]);\n        this.setState({sliderValue: this.dealSliderRef.current.state.values[0]});\n        this.calculate();\n      }\n    }\n    setInitialRoleState() {\n      /*this.artistButtonRef.current.setState({button: false});\n      this.writerButtonRef.current.setState({button: false});\n      this.bothButtonRef.current.setState({button: true});\n      */\n    }\n    getRoleButton(name) {\n\n         console.log(name);\n         console.log(this.artistButtonRef.current.state.button);\n         console.log(this.writerButtonRef.current.state.button);\n         console.log(this.bothButtonRef.current.state.button);\n\n         if(name===\"artist\" && this.artistButtonRef.current.state.button) {\n          //this.setState({role: \"artist\"});\n          this.writerButtonRef.current.setState({button: false});\n          this.bothButtonRef.current.setState({button: false});\n         } else if (name==\"writer\" && this.writerButtonRef.current.state.button) {\n          //this.handleRoleButton(\"writer\");\n          this.artistButtonRef.current.setState({button:false});\n          this.bothButtonRef.current.setState({button:false});\n         } else if (name==\"both\" && this.bothButtonRef.current.state.button) {\n          //this.handleRoleButton(\"both\");\n          this.artistButtonRef.current.setState({button:false});\n          this.writerButtonRef.current.setState({button:false});\n         }\n\n\n    }\n    getButtonClick(id) {\n      //console.log(\"clicked: \" + id);\n      //console.log(this.state.providers[id].ref.current.state);\n      if(this.state.providers[id].ref.current.state.button != null && this.state.providers[id].ref.current.state.button != this.state.providers[id].includeInCalculations) {\n        this.toggleMe(id);\n      }\n\n    }\n    getStateCosts() {\n      console.log(this.costsRef.current.state)\n      if(this.costsRef.current.state.value != \"\" && parseInt(this.costsRef.current.state.value) != this.state.costs) {\n        const e = parseInt(this.costsRef.current.state.value);\n        this.updateCosts(e);\n      }\n    }\n    getStateAdvance() {\n      console.log(this.advanceRef.current.state)\n      if(this.advanceRef.current.state.value != \"\" && parseInt(this.advanceRef.current.state.value) != this.state.advance) {\n          const e = parseInt(this.advanceRef.current.state.value);\n          this.updateAdvance(e);\n      }\n    }\n    getStatePubDeal() {\n      //console.log(\"getting state rec deal\");\n      if(this.pubTypeRef.current.state.selectedOption != null && this.pubTypeRef.current.state.selectedOption.value != this.state.publishingDealSelected) {\n        //console.log(this.dealTypeRef.current.state.selectedOption.value);\n        const e = this.pubTypeRef.current.state.selectedOption.value;\n        this.handlePublishingDealSelect(e);\n      }\n      //const node = this.dealTypeRef.current;\n      //console.log(\"Node: \" + node);\n    }\n    getStateRecDeal() {\n      //console.log(\"getting state rec deal\");\n      if(this.dealTypeRef.current.state.selectedOption != null && this.dealTypeRef.current.state.selectedOption.value != this.state.recordDealSelected) {\n        //console.log(this.dealTypeRef.current.state.selectedOption.value);\n        const e = this.dealTypeRef.current.state.selectedOption.value;\n        this.handleRecDealSelect(e);\n      }\n      //const node = this.dealTypeRef.current;\n      //console.log(\"Node: \" + node);\n    }\n    testMap() {\n      this.state.providers.map(provider => console.log(provider.name));\n      //this.state.providers.map(provider => ce('tr', null, ce('td', null, ce('text', null, provider.name))), ce('tr', null, ce('td', null, ce('input', {type: 'checkbox', checked: provider.includeInCalculations, onClick: e => this.toggleMe(provider.id)}))))\n    }\n\n    setInitialStates() {\n\n      this.setState({streamNumber: 1000000000,role: \"Writer & Artist\", recordDealSelected: \"Royalty\", publishingDealSelected: \"Full/Traditional\", advance: 0, costs: 0, grossRev: 0, publisherShare: 0, writerEarnings: 0, totalEarnings: 0});\n\n      console.log(this.state.providers)\n      this.calculate();\n    }\n\n    changeStreams(e) {\n        console.log(\"changed streams to: \" + e.target.value);\n        this.setState({streamNumber: e.target.value});\n        this.calculate();\n    }\n\n    updateAdvance(e) {\n      console.log(\"changed advance to: \" + e);\n      this.setState({advance: e});\n      this.calculate();\n    }\n\n    updateCosts(e) {\n        console.log(\"changed costs to: \" + e);\n        this.setState({costs: e});\n        this.calculate();\n    }\n\n    setSliderValue(val) {\n        this.setState( {sliderValue: val});\n        this.calculate();\n    }\n\n\n\n    updateSlider(e) {\n        console.log(e.target.value)\n        //val = document.getElementById(\"splitSlider\").value()\n        this.setState( {sliderValue: e.target.value})\n        this.calculate();\n    }\n\n    buildPublishingDealSelect() {\n        let fullTrad = {\n            id: 0,\n            name: \"Full/Traditional\"\n        }\n        let coPublishing = {\n            id: 1,\n            name: \"Co-Publishing\"\n        }\n        let adminDeal = {\n            id: 2,\n            name: \"Admin Deal\"\n        }\n        let noDeal = {\n            id: 3,\n            name: \"No Deal\"\n        }\n        let deals = [fullTrad, coPublishing, adminDeal, noDeal]\n        this.setState( {publishDeal: deals})\n    }\n\n    handlePublishingDealSelect(e) {\n        console.log(e);\n        this.setState({publishingDealSelected: e});\n        this.calculate();\n    }\n\n\n    handleRoleButton(which) {\n        console.log(which);\n        this.setState({role: which})\n        this.calculate();\n    }\n\n   // handleRecDealSelect(e)\n\n    handleRecDealSelect(e) {\n        console.log(\"selecting Roles\");\n        console.log(e);\n        if(e === \"royalty\") {\n          this.setState({sliderValue: 20});\n          this.changeSliderVal(20);\n        } else if (e === \"netProfit\") {\n          this.setState({sliderValue: 50});\n          this.changeSliderVal(50);\n        } else if (e === \"distributionPercent\") {\n          this.setState({sliderValue: 70});\n          this.changeSliderVal(70);\n        } else if (e === \"distributionFee\") {\n          this.setState({sliderValue: 100});\n          this.changeSliderVal(100);\n        } else if (e === \"labelServices\") {\n          this.setState({sliderValue: 80});\n          this.changeSliderVal(80);\n        }\n        //document.getElementById(\"splitSlider\").value = this.state.sliderValue;\n        //console.log(this.myRef.current);\n        //React.findDOMNode(this.refs.sliderRef).value = this.state.sliderValue;\n        console.log(\"sliderValue: \" + this.state.sliderValue);\n        this.setState({recordDealSelected: e})\n        this.calculate();\n    }\n\n    buildRecordDealSelect() {\n        //console.log(\"Roles!\");\n        let royalty = {\n            id: 0,\n            name: \"Royalty\"\n        };\n        let netProfit = {\n            id: 1,\n            name: \"Net Profit\"\n        };\n        let distributionPercent = {\n            id: 2,\n            name: \"Distribution Percent\"\n        };\n        let labelServices = {\n            id: 3,\n            name: \"Label Services\"\n        }\n\n        let rls = [royalty, netProfit, distributionPercent, labelServices];\n        this.setState( {recordDeal: rls} );\n    }\n\n    toggleMe(index) {\n      this.state.providers[index].includeInCalculations = !this.state.providers[index].includeInCalculations;\n      //console.log(dsps[index].name);\n      //console.log(dsps[index].includeInCalculations);\n      this.calculate();\n    }\n\n    /// MATH STUFF /////\n    calculate() {\n        this.getPublisherShare();\n\n        console.log(\"calculating\");\n        let artistShare;\n        let labelShare;\n        // Why are there double semi-colons?\n                   //prob a typo\n        let totalMoneyToRecoupe = parseFloat(this.state.advance) + parseFloat(this.state.costs);\n        //console.log(totalMoneyToRecoupe)\n        let grossRevenue= this.state.streamNumber * this.weightedAverageOfSelected();\n        //console.log(\"grossRevenue: \" + grossRevenue)\n        //checkDSPs();\n        //console.log(estStreams.value * avgPayout);\n        //console.log(estStreams.value * weightedAverageOfSelected());\n        if (this.state.recordDealSelected === \"royalty\") {\n            // Artist Split\n            if((grossRevenue * (parseFloat(this.state.sliderValue)/100)) <= totalMoneyToRecoupe){\n              console.log(\"unrecouped\");\n              artistShare = 0;\n            } else {\n              artistShare = (grossRevenue * (parseFloat(this.state.sliderValue)/100)) - totalMoneyToRecoupe;\n            }\n            labelShare = grossRevenue * (1-(parseFloat(this.state.sliderValue)/100));\n\n        } else if (this.state.recordDealSelected === \"netProfit\" || this.state.recordDealSelected === \"distributionPercent\" || this.state.recordDealSelected === \"Distribution Fee\") {\n            //net profit deals are generally guaranteed 50/50, distribution are generally 70/30 artist/label\n            let profit = (grossRevenue - this.state.costs);\n            // Artist Split\n            if(((profit * (parseFloat(this.state.sliderValue)/100)) - parseFloat(this.state.advance)) < 0){\n              console.log(\"unrecouped\");\n              artistShare = 0;\n            } else {\n              artistShare = (profit * (parseFloat(this.state.sliderValue)/100)) - parseFloat(this.state.advance);\n            }\n            // Label Split Net Profit, Distributions\n            if(this.state.recordDealSelected === \"netProfit\" || this.state.recordDealSelected === \"distributionPercent\") {\n                if(profit < 0){\n                    labelShare = 0;\n                } else {\n                    labelShare = (profit * (1-(parseFloat(this.state.sliderValue)/100)));\n                }\n            } else labelShare = grossRevenue - artistShare;\n\n            /* Nik Label Share for Net Profit, %Distribution Deals\n            if(profit < 0){\n              labelShare = 0;\n            } else {\n              labelShare = (profit * (1-(parseFloat(artistDeal.value)/100)));\n            }\n            */\n\n        } else if (this.state.recordDealSelected === \"labelServices\") {\n            // Artist Split\n            if((grossRevenue * (parseFloat(this.state.sliderValue)/100)) <= totalMoneyToRecoupe){\n              console.log(\"unrecouped\");\n              artistShare = 0;\n            } else {\n              artistShare = (grossRevenue * (parseFloat(this.state.sliderValue)/100)) - totalMoneyToRecoupe;\n            }\n            labelShare = grossRevenue * (1-(parseFloat(this.state.sliderValue)/100)) + this.state.costs;//extra menu items would be factored into costs\n        }\n\n        console.log(\"grossRevenue: \" + grossRevenue)\n        console.log(\"totRecoupe: \" + totalMoneyToRecoupe)\n        console.log(\"writerEarnings: \" + artistShare)\n        console.log(\"publisherShare: \" + labelShare)\n\n        this.setState({grossRev: grossRevenue, totRecoupe: totalMoneyToRecoupe, writerEarnings: artistShare, publisherShare: labelShare});\n\n        this.getTotalEarnings(artistShare);\n\n    }\n    getPublisherShare() {\n        //console.log(\"avgPubPayout: \" + avgPubPayout)\n\n        let pubGrossRevenue = avgPubPayout * this.state.streamNumber;\n        let pubPerformanceRevenue = pubGrossRevenue * .5;\n        let pubMechanicalRevenue = pubGrossRevenue * .5;\n        let pubPROAdminFee = pubPerformanceRevenue * .165;\n        let pubMechanicalAdminFee = pubMechanicalRevenue * .15;\n        let pubMechanicalRecordFee = (pubMechanicalRevenue - pubMechanicalAdminFee) * .3;\n\n        let publisherPercentage;\n\n        if(this.state.publishingDealSelected === \"Full/Traditional\") {\n            publisherPercentage = 1.0;\n            this.setState({publisherShare: ((pubPerformanceRevenue - pubPROAdminFee) * .5) * publisherPercentage});\n            this.setState({writerEarnings: ((pubPerformanceRevenue - pubPROAdminFee) * .5) + (((pubPerformanceRevenue - pubPROAdminFee) * .5) * (1- publisherPercentage)) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))});\n        } else if(this.state.publishingDealSelected === \"Co-Publishing\") {\n            publisherPercentage = 0.5;\n            this.setState({publisherShare: ((pubPerformanceRevenue - pubPROAdminFee) * .5) * publisherPercentage});\n            this.setState({writerEarnings: ((pubPerformanceRevenue - pubPROAdminFee) * .5) + (((pubPerformanceRevenue - pubPROAdminFee) * .5) * (1- publisherPercentage)) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))});\n        } else if(this.state.publishingDealSelected === \"Admin Deal\") {\n            publisherPercentage = 0.1;\n            this.setState({publisherShare: ((pubPerformanceRevenue - pubPROAdminFee) * .5) * publisherPercentage});\n            this.setState({writerEarnings: ((pubPerformanceRevenue - pubPROAdminFee) * .5) + (((pubPerformanceRevenue - pubPROAdminFee) * .5) * (1- publisherPercentage)) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))});\n        } else if(this.state.publishingDealSelected === \"No Deal\") {\n            publisherPercentage = 0.0;\n            this.setState({publisherShare: ((pubPerformanceRevenue - pubPROAdminFee) * .5) * publisherPercentage});\n            this.setState({writerEarnings: ((pubPerformanceRevenue - pubPROAdminFee) * .5) + (((pubPerformanceRevenue - pubPROAdminFee) * .5) * (1- publisherPercentage)) + (pubMechanicalRevenue - (pubMechanicalAdminFee + pubMechanicalRecordFee))});\n        }\n    }\n\n    weightedAverageOfSelected() {\n\n        let sum = 0.0;\n        for(let i=0; i < this.state.providers.length; i++) {\n          if(this.state.providers[i].includeInCalculations) {\n                sum += (this.state.providers[i].payoutPerStream * this.state.providers[i].marketShareStreams)\n            }\n        }\n        console.log(sum)\n        let sumOfWeights = 0.0;\n        for(let i=0;i < this.state.providers.length; i++) {\n          if(this.state.providers[i].includeInCalculations) {\n            sumOfWeights += this.state.providers[i].marketShareStreams\n          }\n        }\n        if(sumOfWeights <= 0.0) return 0.0\n        //console.log(sum)\n        console.log(sum/sumOfWeights);\n        return sum/sumOfWeights;\n    }\n\n\n\n    getTotalEarnings(artistShare) {\n        if(this.state.role === \"both\") {\n            this.setState({totalEarnings: artistShare + parseFloat(this.state.writerEarnings)});\n        } else if(this.state.role === \"artist\") {\n            this.setState({totalEarnings: artistShare});\n        } else if(this.state.role === \"writer\") {\n            this.setState({totalEarnings: this.state.writerEarnings});\n        }\n    }\n\n\n}\n\n\nexport default CalcPage;\n","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/ButtonGroup.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/BarChart.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SmallText.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/MultiDropDown.js",["133"],"import React from 'react';\nimport Select from 'react-select';\n\n\nclass MultiDropDown extends React.Component {\n  state = {\n    selectedOption: null,\n  };\n  handleChange = selectedOption => {\n    this.setState({ selectedOption });\n    console.log(`Option selected:`, selectedOption);\n  };\n  render() {\n    const { selectedOption } = this.state;\n\n    return (\n      <Select\n        defaultValue={this.props.options[0]}\n        isMulti\n        name=\"labelServices\"\n        options={this.props.options}\n        className=\"basic-multi-select\"\n        classNamePrefix=\"Select Services\"\n        styles={{\n          menu: provided => ({ ...provided, zIndex: 10 })\n          }}\n      />\n    );\n  }\n}\n\nexport default MultiDropDown;\n","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/DealSplitSlider.js",["134","135"],"import React, { Component } from 'react';\nimport { Slider, Rail, Handles, Tracks, Ticks } from 'react-compound-slider';\nimport SmallText from './SmallText.js';\n\nconst sliderStyle = {\n  position: 'relative',\n  width: '100%',\n  // height: 80,\n  // touchAction: 'none',\n}\n\nconst railStyle = {\n  position: 'absolute',\n  width: '100%',\n  height: 10,\n  marginTop: 35,\n  borderRadius: 5,\n  backgroundColor: '#CBDCFC',\n  zIndex: 0\n}\n\nconst domain = [0, 100]\nconst defaultValues = [25]\n\nexport function Handle({\n  handle: { id, value, percent },\n  getHandleProps\n}) {\n  return (\n    <div\n      style={{\n        left: `${percent}%`,\n        position: 'absolute',\n        marginLeft: -15,\n        marginTop: 25,\n        zIndex: 2,\n        width: 30,\n        height: 30,\n        border: 0,\n        textAlign: 'center',\n        cursor: 'pointer',\n        borderRadius: '50%',\n        backgroundColor: '#1971ff',\n        color: '#333',\n      }}\n      {...getHandleProps(id)}\n    >\n      <div style={{fontSize: 14, marginTop: 35, fontWeight: '500'}}>\n        {value}\n      </div>\n    </div>\n  )\n}\n\nfunction Track({ source, target, getTrackProps }) {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        height: 10,\n        zIndex: 1,\n        marginTop: 35,\n        backgroundColor: '#3665d6',\n        borderRadius: 5,\n        cursor: 'pointer',\n        left: `${source.percent}%`,\n        width: `${target.percent - source.percent}%`,\n      }}\n      {...getTrackProps() /* this will set up events if you want it to be clickeable (optional) */}\n    />\n  )\n}\n\n\nexport class DealSplitSlider extends Component {\n  state = {\n    values: defaultValues.slice(),\n    update: defaultValues.slice(),\n  }\n\n  componentDidUpdate() {\n    if (this.props.onChange) {\n      this.props.onChange(this.state);\n    }\n  }\n\n  onUpdate = update => {\n    this.setState({ update })\n  }\n\n  onChange = values => {\n    this.setState({ values })\n  }\n\n  render() {\n    const {\n      state: { values, update},\n    } = this\n\n    return (\n      <div>\n        <div style={{ height: 70, width: '100%' }}>\n          <Slider\n          rootStyle={sliderStyle}\n          domain={domain}\n          onUpdate={this.onUpdate}\n          onChange={this.onChange}\n          values={values}\n          mode={1}\n          step={1}\n          >\n          <Rail>\n            {({ getRailProps }) => (<div style={railStyle} {...getRailProps()} />)}\n          </Rail>\n          <Handles>\n            {({ handles, getHandleProps }) => (\n            <div className=\"slider-handles\">\n              {handles.map(handle => (\n              <Handle\n              key={handle.id}\n              handle={handle}\n              getHandleProps={getHandleProps}\n              />\n              ))}\n            </div>)}\n          </Handles>\n          <Tracks right={false}>\n            {({ tracks, getTrackProps }) => (\n              <div className=\"slider-tracks\">\n                {tracks.map(({ id, source, target }) => (\n                <Track\n                key={id}\n                source={source}\n                target={target}\n                getTrackProps={getTrackProps}\n                />))}\n              </div>)}\n          </Tracks>\n          </Slider>\n        </div>\n        <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between', margin: '0 2% 0'}}>\n          <SmallText text={`Artist:  ${parseInt(values)}`} style={{textAlign: 'left', fontSize: '16px', fontWeight: 'bold', lineHeight: '1.09'}}/>\n          <SmallText text={`${100-parseInt(values)} :Label`} style={{textAlign: 'left', fontSize: '16px', fontWeight: 'bold', lineHeight: '1.09',}}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default DealSplitSlider;\n","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/StreamSlider.js",["136"],"import React, { Component } from 'react'\nimport { Slider, Rail, Handles, Tracks } from 'react-compound-slider'\n\nconst sliderStyle = {\n  position: 'relative',\n  width: '96%',\n  height: 80,\n  // touchAction: 'none',\n}\n\nconst railStyle = {\n  position: 'absolute',\n  width: '100%',\n  height: 10,\n  marginTop: 35,\n  borderRadius: 5,\n  backgroundColor: '#CBDCFC',\n}\n\nfunction GetMiddleValue(min, max) {\n  min = domain[0];\n  max = domain[1];\n  return (min+max)/2\n}\n\nfunction MaxNumb(){\n  return Math.floor(Math.random() * 1000000);\n}\n\n\nconst domain = [0, MaxNumb()]\nconst defaultValues = [GetMiddleValue()]\n\nexport function Handle({\n  handle: { id, value, percent },\n  getHandleProps\n}) {\n  return (\n    <div\n      style={{\n        left: `${percent}%`,\n        position: 'absolute',\n        marginLeft: -15,\n        marginTop: 25,\n        zIndex: 2,\n        width: 30,\n        height: 30,\n        border: 0,\n        textAlign: 'center',\n        cursor: 'pointer',\n        borderRadius: '50%',\n        backgroundColor: '#1971ff',\n        color: '#333',\n      }}\n      {...getHandleProps(id)}\n    >\n      <div style={{fontSize: 12, marginTop: 35 }}>\n        {value}\n      </div>\n    </div>\n  )\n}\n\nfunction Track({ source, target, getTrackProps }) {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        height: 10,\n        zIndex: 1,\n        marginTop: 35,\n        backgroundColor: '#3665d6',\n        borderRadius: 5,\n        cursor: 'pointer',\n        left: `${source.percent}%`,\n        width: `${target.percent - source.percent}%`,\n      }}\n      {...getTrackProps() /* this will set up events if you want it to be clickeable (optional) */}\n    />\n  )\n}\n\n\nexport class StreamSlider extends Component {\n  state = {\n    values: defaultValues.slice(),\n    update: defaultValues.slice(),\n  }\n\n\n  componentDidUpdate() {\n    if (this.props.onChange) {\n      this.props.onChange(this.state);\n    }\n  }\n\n  onUpdate = update => {\n    this.setState({ update })\n  }\n\n  onChange = values => {\n    this.setState({ values })\n  }\n\n  render() {\n    const {\n      state: { values, update },\n    } = this\n\n    return (\n      <div style={{ height: 70, width: '100%' }}>\n        <Slider\n          rootStyle={sliderStyle}\n          domain={domain}\n          onUpdate={this.onUpdate}\n          onChange={this.onChange}\n          values={values}\n          mode={1}\n          step={1}\n        >\n        <Rail>\n          {({ getRailProps }) => (<div style={railStyle} {...getRailProps()} />)}\n        </Rail>\n          <Handles>\n            {({ handles, getHandleProps }) => (\n              <div className=\"slider-handles\">\n                {handles.map(handle => (\n                  <Handle\n                    key={handle.id}\n                    handle={handle}\n                    getHandleProps={getHandleProps}\n                  />\n                ))}\n              </div>\n            )}\n          </Handles>\n          <Tracks right={false}>\n            {({ tracks, getTrackProps }) => (\n              <div className=\"slider-tracks\">\n                {tracks.map(({ id, source, target }) => (\n                  <Track\n                    key={id}\n                    source={source}\n                    target={target}\n                    getTrackProps={getTrackProps}\n                  />\n                ))}\n              </div>\n            )}\n          </Tracks>\n        </Slider>\n      </div>\n    )\n  }\n}\n\nexport default StreamSlider;\n","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SwitchButton.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/SingleDropDown.js",["137","138"],"import React, { Component } from 'react';\nimport Select from 'react-select';\nimport styled from \"styled-components\";\n\nclass SingleDropDown extends React.Component {\n\n  state = {\n    selectedOption: null,\n  };\n\n  handleChange = selectedOption => {\n    this.setState({ selectedOption });\n  };\n\n\n  componentDidUpdate() {\n    if (this.props.onChange) {\n      this.props.onChange(this.state);\n    }\n  }\n\n\n  render() {\n    const { selectedOption } = this.state;\n\n    const customStyles = {\n    menu: (provided, state) => ({\n      ...provided,\n      zIndex: 10\n    })\n  }\n\n    return (\n      <Select\n        styles={customStyles}\n        value={selectedOption}\n        onChange={this.handleChange}\n        options={this.props.options}\n      />\n    );\n  }\n}\n\nexport default SingleDropDown;\n","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/RadialChart.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/DspButton.js",["139"],"/* eslint-env browser, commonjs, jquery, es6 */\n\nimport React from 'react';\nimport '../stylesheets/DspButton.css';\nimport SmallText from './SmallText';\n\n\nclass DspButton extends React.Component {\n  constructor(props){\n    super(props)\n    this.state ={\n      button: true\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(){\n    this.setState({\n      button:!this.state.button\n\n    })\n  }\n\n\n  componentDidUpdate() {\n    if (this.props.onChange) {\n      this.props.onChange(this.state);\n    }\n  }\n\n  testButton(){\n    console.log(\"DSP - MAKE VALUE TOGGLE ON/OFF\")\n  }\n\n  render(){\n    return (\n    <div className=\"container\">\n      <button className={this.state.button ? \"buttonTrue\": \"buttonFalse\"}\n            onClick={() => {\n            this.handleClick();\n            }}>\n        {this.props.text}\n      </button>\n    </div>\n    )\n  }\n}\n\nexport default DspButton;\n","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/NumberInput.js",["140","141","142"],"import React from \"react\";\nimport { render } from \"react-dom\";\nimport {TransitionMotion, spring } from 'react-motion';\nimport \"../stylesheets/NumberInput.css\";\n\nclass NumberInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      active: (props.locked && props.active) || false,\n      // FIX THIS VALUE TO HAVE INPUT BE TRUE... RN \"\" is so 1 is \"\" then 12 is \"1\"\n      value: props.value || \"\",\n      error: props.error || \"\",\n      label: props.label || \"Label\"\n    };\n  }\n  componentDidUpdate() {\n    if (this.props.onChange) {\n      this.props.onChange(this.state);\n    }\n  }\n\n  changeValue(event) {\n    const value = event.target.value;\n    this.setState({ value, error: 0 });\n  }\n\n  handleKeyPress(event) {\n    console.log(this.state.value)\n  }\n\n  render() {\n    const { active, value, error, label } = this.state;\n    const { predicted, locked } = this.props;\n    const fieldClassName = `field ${(locked ? active : active || value) &&\n      \"active\"} ${locked && !active && \"locked\"}`;\n\n    return (\n      <div className={fieldClassName}>\n        {active &&\n          value &&\n          predicted &&\n          predicted.includes(value) && <p className=\"predicted\">{predicted}</p>}\n        <input\n          id={0}\n          type=\"text\"\n          value={value}\n          placeholder={label}\n          maxLength={11}\n          onChange={this.changeValue.bind(this)}\n          onKeyPress={this.handleKeyPress.bind(this)}\n          onFocus={() => !locked && this.setState({ active: true })}\n          onBlur={() => !locked && this.setState({ active: false })}\n        />\n        <label htmlFor={0} className={error && \"error\"}>\n          {error || label}\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default NumberInput;\n","/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/TitleText.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/ButtonGroupTest.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/Accordion.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/Checkbox.js",[],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/components/MarketingCostDropDown.js",["143","144"],"import React, { Component } from 'react';\nimport Select from 'react-select';\nimport styled from \"styled-components\";\n\nclass MarketingDropDown extends React.Component {\n\n  state = {\n    selectedOption: null,\n  };\n\n  handleChange = selectedOption => {\n    this.setState({ selectedOption });\n  };\n\n\n  componentDidUpdate() {\n    if (this.props.onChange) {\n      this.props.onChange(this.state);\n    }\n  }\n\n\n  render() {\n    const { selectedOption } = this.state;\n\n    const customStyles = {\n      menu: (provided, state) => ({\n        ...provided,\n        zIndex: 10\n      }),\n      singleValue: (provided, state) => ({\n        ...provided,\n        fontSize: '12px',\n        color: 'black'\n      }),\n      placeholder: (provided, state) => ({\n        ...provided,\n        fontSize: '10px'\n      }),\n      indicatorsContainer: (base) => ({\n        ...base,\n        padding: 0\n      }),\n      dropdownIndicator: base => ({\n          ...base,\n          padding: 0\n      }),\n      clearIndicator: base => ({\n          ...base,\n          padding: 0\n      }),\n    }\n\n    return (\n      <Select\n        styles={customStyles}\n        value={selectedOption}\n        onChange={this.handleChange}\n        options={this.props.options}\n      />\n    );\n  }\n}\n\nexport default MarketingDropDown;\n","/Users/nikhil/Desktop/MusicStreamingCalculator/src/DesktopVersion.js",["145","146","147","148","149","150","151","152","153","154","155","156","157","158"],"/Users/nikhil/Desktop/MusicStreamingCalculator/src/MobileVersion.js",["159"],"import React from 'react';\nimport './App.css';\nimport SmallText from './components/SmallText.js';\nimport TitleText from './components/TitleText.js';\n\nclass MobileVersion extends React.Component{\n  constructor(props) {\n    super(props);\n  }\n  render(){\n    return(\n      <div style={{textAlign: 'center'}}>\n        <TitleText text=\"The MOBILE Streaming Calculator\" style={{color: '#111', fontSize: '28px', fontWeight: '700', justifyContent: 'center', textTransform: 'uppercase'}}/>\n        <SmallText text=\"COMING SOON\"/>\n      </div>\n    )\n  }\n}\n\nexport default MobileVersion;\n",{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","severity":1,"message":"165","line":3,"column":8,"nodeType":"166","messageId":"167","endLine":3,"endColumn":16},{"ruleId":"164","severity":1,"message":"168","line":6,"column":34,"nodeType":"166","messageId":"167","endLine":6,"endColumn":43},{"ruleId":"164","severity":1,"message":"169","line":6,"column":45,"nodeType":"166","messageId":"167","endLine":6,"endColumn":53},{"ruleId":"164","severity":1,"message":"170","line":9,"column":8,"nodeType":"166","messageId":"167","endLine":9,"endColumn":19},{"ruleId":"164","severity":1,"message":"171","line":28,"column":7,"nodeType":"166","messageId":"167","endLine":28,"endColumn":28},{"ruleId":"164","severity":1,"message":"172","line":34,"column":7,"nodeType":"166","messageId":"167","endLine":34,"endColumn":27},{"ruleId":"164","severity":1,"message":"173","line":63,"column":7,"nodeType":"166","messageId":"167","endLine":63,"endColumn":9},{"ruleId":"174","severity":1,"message":"175","line":386,"column":60,"nodeType":"176","messageId":"177","endLine":386,"endColumn":62},{"ruleId":"178","severity":1,"message":"179","line":388,"column":9,"nodeType":"180","endLine":388,"endColumn":32},{"ruleId":"178","severity":1,"message":"179","line":390,"column":9,"nodeType":"180","endLine":390,"endColumn":32},{"ruleId":"178","severity":1,"message":"179","line":392,"column":9,"nodeType":"180","endLine":392,"endColumn":32},{"ruleId":"174","severity":1,"message":"175","line":396,"column":60,"nodeType":"176","messageId":"177","endLine":396,"endColumn":62},{"ruleId":"178","severity":1,"message":"179","line":398,"column":9,"nodeType":"180","endLine":398,"endColumn":32},{"ruleId":"178","severity":1,"message":"179","line":400,"column":9,"nodeType":"180","endLine":400,"endColumn":32},{"ruleId":"178","severity":1,"message":"179","line":402,"column":9,"nodeType":"180","endLine":402,"endColumn":32},{"ruleId":"174","severity":1,"message":"175","line":406,"column":58,"nodeType":"176","messageId":"177","endLine":406,"endColumn":60},{"ruleId":"178","severity":1,"message":"179","line":408,"column":9,"nodeType":"180","endLine":408,"endColumn":32},{"ruleId":"178","severity":1,"message":"179","line":410,"column":9,"nodeType":"180","endLine":410,"endColumn":32},{"ruleId":"178","severity":1,"message":"179","line":412,"column":9,"nodeType":"180","endLine":412,"endColumn":32},{"ruleId":"174","severity":1,"message":"175","line":428,"column":104,"nodeType":"176","messageId":"177","endLine":428,"endColumn":106},{"ruleId":"174","severity":1,"message":"181","line":451,"column":25,"nodeType":"176","messageId":"177","endLine":451,"endColumn":27},{"ruleId":"174","severity":1,"message":"181","line":455,"column":25,"nodeType":"176","messageId":"177","endLine":455,"endColumn":27},{"ruleId":"174","severity":1,"message":"175","line":466,"column":121,"nodeType":"176","messageId":"177","endLine":466,"endColumn":123},{"ruleId":"174","severity":1,"message":"175","line":473,"column":44,"nodeType":"176","messageId":"177","endLine":473,"endColumn":46},{"ruleId":"174","severity":1,"message":"175","line":473,"column":97,"nodeType":"176","messageId":"177","endLine":473,"endColumn":99},{"ruleId":"174","severity":1,"message":"175","line":480,"column":46,"nodeType":"176","messageId":"177","endLine":480,"endColumn":48},{"ruleId":"174","severity":1,"message":"175","line":480,"column":101,"nodeType":"176","messageId":"177","endLine":480,"endColumn":103},{"ruleId":"174","severity":1,"message":"175","line":487,"column":117,"nodeType":"176","messageId":"177","endLine":487,"endColumn":119},{"ruleId":"174","severity":1,"message":"175","line":497,"column":119,"nodeType":"176","messageId":"177","endLine":497,"endColumn":121},{"ruleId":"178","severity":1,"message":"179","line":637,"column":7,"nodeType":"180","endLine":637,"endColumn":34},{"ruleId":"164","severity":1,"message":"182","line":14,"column":13,"nodeType":"166","messageId":"167","endLine":14,"endColumn":27},{"ruleId":"164","severity":1,"message":"183","line":2,"column":41,"nodeType":"166","messageId":"167","endLine":2,"endColumn":46},{"ruleId":"164","severity":1,"message":"184","line":97,"column":24,"nodeType":"166","messageId":"167","endLine":97,"endColumn":30},{"ruleId":"164","severity":1,"message":"184","line":107,"column":24,"nodeType":"166","messageId":"167","endLine":107,"endColumn":30},{"ruleId":"164","severity":1,"message":"185","line":1,"column":17,"nodeType":"166","messageId":"167","endLine":1,"endColumn":26},{"ruleId":"164","severity":1,"message":"186","line":3,"column":8,"nodeType":"166","messageId":"167","endLine":3,"endColumn":14},{"ruleId":"164","severity":1,"message":"187","line":5,"column":8,"nodeType":"166","messageId":"167","endLine":5,"endColumn":17},{"ruleId":"164","severity":1,"message":"188","line":2,"column":10,"nodeType":"166","messageId":"167","endLine":2,"endColumn":16},{"ruleId":"164","severity":1,"message":"189","line":3,"column":9,"nodeType":"166","messageId":"167","endLine":3,"endColumn":25},{"ruleId":"164","severity":1,"message":"190","line":3,"column":27,"nodeType":"166","messageId":"167","endLine":3,"endColumn":33},{"ruleId":"164","severity":1,"message":"185","line":1,"column":17,"nodeType":"166","messageId":"167","endLine":1,"endColumn":26},{"ruleId":"164","severity":1,"message":"186","line":3,"column":8,"nodeType":"166","messageId":"167","endLine":3,"endColumn":14},{"ruleId":"164","severity":1,"message":"191","line":6,"column":8,"nodeType":"166","messageId":"167","endLine":6,"endColumn":20},{"ruleId":"164","severity":1,"message":"192","line":8,"column":8,"nodeType":"166","messageId":"167","endLine":8,"endColumn":16},{"ruleId":"178","severity":1,"message":"179","line":584,"column":7,"nodeType":"180","endLine":584,"endColumn":30},{"ruleId":"178","severity":1,"message":"179","line":586,"column":7,"nodeType":"180","endLine":586,"endColumn":30},{"ruleId":"178","severity":1,"message":"179","line":588,"column":7,"nodeType":"180","endLine":588,"endColumn":30},{"ruleId":"178","severity":1,"message":"179","line":594,"column":7,"nodeType":"180","endLine":594,"endColumn":30},{"ruleId":"178","severity":1,"message":"179","line":596,"column":7,"nodeType":"180","endLine":596,"endColumn":30},{"ruleId":"178","severity":1,"message":"179","line":598,"column":7,"nodeType":"180","endLine":598,"endColumn":30},{"ruleId":"178","severity":1,"message":"179","line":603,"column":7,"nodeType":"180","endLine":603,"endColumn":30},{"ruleId":"178","severity":1,"message":"179","line":605,"column":7,"nodeType":"180","endLine":605,"endColumn":30},{"ruleId":"178","severity":1,"message":"179","line":607,"column":7,"nodeType":"180","endLine":607,"endColumn":30},{"ruleId":"178","severity":1,"message":"179","line":743,"column":5,"nodeType":"180","endLine":743,"endColumn":32},{"ruleId":"193","severity":1,"message":"194","line":850,"column":5,"nodeType":"195","messageId":"196","endLine":863,"endColumn":6},{"ruleId":"164","severity":1,"message":"197","line":918,"column":8,"nodeType":"166","messageId":"167","endLine":918,"endColumn":26},{"ruleId":"198","severity":1,"message":"199","line":7,"column":3,"nodeType":"200","messageId":"201","endLine":9,"endColumn":4},"no-native-reassign",["202"],"no-negated-in-lhs",["203"],"no-unused-vars","'CalcPage' is defined but never used.","Identifier","unusedVar","'isBrowser' is defined but never used.","'isMobile' is defined but never used.","'TabGroupTwo' is defined but never used.","'marketingSplitOptions' is assigned a value but never used.","'labelServicesOptions' is assigned a value but never used.","'ce' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","Expected '===' and instead saw '=='.","'selectedOption' is assigned a value but never used.","'Ticks' is defined but never used.","'update' is assigned a value but never used.","'Component' is defined but never used.","'styled' is defined but never used.","'SmallText' is defined but never used.","'render' is defined but never used.","'TransitionMotion' is defined but never used.","'spring' is defined but never used.","'SwitchButton' is defined but never used.","'TabGroup' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'recoupStreamsNeeds' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]